{
	"info": {
		"_postman_id": "1fe029e2-b0d1-4bd9-9342-3499826ab768",
		"name": "CHA acceptance tests v2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "admin",
			"item": [
				{
					"name": "1. List regimes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Returns correct code', () => {",
									"    pm.expect(pm.response.code).to.equal(200)",
									"})",
									"",
									"// Get and store wrls regime Id for next request",
									"const response = pm.response.json();",
									"const result = response.filter(obj => {",
									"  return obj.slug === 'wrls'",
									"})[0]",
									"",
									"if (result) {",
									"  pm.environment.set(\"regimeId\", result.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/regimes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"regimes"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Show \"wrls\" regime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Returns correct code', () => {",
									"    pm.expect(pm.response.code).to.equal(200)",
									"})",
									"pm.test('Returns the expected regime', () => {",
									"    const body = pm.response.json()",
									"",
									"    pm.expect(body.slug).to.equal('wrls')",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/regimes/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"regimes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{regimeId}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "system-user",
			"item": [
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns correct code\", () => {",
									"    pm.expect(pm.response.code).to.equal(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "create-bill-run",
			"item": [
				{
					"name": "1. Create Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region A\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response.billRun.id)\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. billRunId is unique",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region A\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"billRun_id1\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number1\", response.billRun.billRunNumber);\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID of previous Bill Run is not the same as this Bill Run\", function () {\r",
									"    pm.expect(environment.billRun_id).to.not.eql(environment.billRun_id1);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number of previous Bill Run is not the same as this Bill Run\", function () {\r",
									"    pm.expect(environment.billRun_number).to.not.eql(environment.billRun_number1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Create Bill Run - Region B",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region B\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"B\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Create Bill Run - Region E",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region E\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"E\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Create Bill Run - Region N",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region N\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"N\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Create Bill Run - Region S",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region S\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "7. Create Bill Run - Region T",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region T\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"T\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. Create Bill Run - Region W",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region W\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"W\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "9. Create Bill Run - Region Y",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"Y\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "10. Region code is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Code Missing\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states region is required\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"region\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "11. Region code must be valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Invalid Region Code\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states region is required\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"region\\\" must be one of [A, B, E, N, S, T, W, Y]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"G\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "12. Region code must be a String",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Invalid Region Code\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states region is required\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"region\\\" must be one of [A, B, E, N, S, T, W, Y]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "create-pre-sroc-transaction",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region T\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response.billRun.id)\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"T\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create a valid Pre-SRoC Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"Y10656902A_ExtraRgnY_record\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. Create a valid Pre-SRoC Transaction with Client ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Client ID response is correct\", function () {",
									"    pm.expect(response.transaction.clientId).to.eql(environment.client_id);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"console.log(\"Client ID generated: \" + environment.client_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomClientId = Math.floor((Math.random() * 1000) + 1);\r",
									"const clientId = \"T\" + randomClientId;\r",
									"\r",
									"pm.environment.set(\"client_id\", clientId);\r",
									"\r",
									"console.log(clientId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"Y10656902A_ExtraRgnY_record\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"clientId\": \"{{client_id}}\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. 409 Conflict Error is returned when creating a transaction with Client ID thats already in use",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"New Transaction ID has not been generated\", function () {",
									"    pm.expect(response).not.to.have.property('id');",
									"});",
									"",
									"pm.test(\"New Client ID has not been generated\", function () {",
									"    pm.expect(response).not.to.have.property('clientId');",
									"});",
									"",
									"pm.test(\"Verify error message for Client ID thats already in use\", function () {",
									"    pm.expect(response.message).to.include(`A transaction with Client ID '${environment.client_id}' for Regime 'wrls' already exists.`);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"Y10656902A_ExtraRgnY_record\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"clientId\": \"{{client_id}}\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Create a valid Pre-SRoC Transaction with mandatory data items only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. \"periodStart\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodStart is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. \"periodEnd\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodEnd is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" is required. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. \"credit\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input credit is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"credit\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. \"billableDays\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input billableDays is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10. \"authorisedDays\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input authorisedDays is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11. \"volume\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input volume is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. \"source\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input source is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"source\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. \"season\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input season is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"season\\\" is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. \"loss\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input loss is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"loss\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15. \"twoPartTariff\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input twoPartTariff is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"twoPartTariff\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. \"compensationCharge\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input compensationCharge is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"compensationCharge\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. \"waterUndertaker\" is mandatory when \"compensationCharge\" is true and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input waterUndertaker is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"waterUndertaker\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": true,\r\n    \"eiucSource\": \"Unsupported\",\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. \"regionalChargingArea\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input regionalChargingArea is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"regionalChargingArea\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "19. \"section127Agreement\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input section127Agreement is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section127Agreement\\\" is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. \"section130Agreement\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input section130Agreement is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section130Agreement\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "21. \"customerReference\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input customerReference is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"customerReference\\\" is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. \"lineDescription\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input lineDescription is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"lineDescription\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. \"licenceNumber\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input licenceNumber is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"licenceNumber\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "24. \"chargePeriod\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input chargePeriod is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"chargePeriod\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. \"region\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input region is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"region\\\" is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. \"areaCode\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input areaCode is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"areaCode\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. \"region\" must match Bill Run region",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Region data input\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states Region is does not match Billrun Region\", function () {",
									"    pm.expect(response.message).to.include(\"Bill run \" + environment.billRun_id + \" is for region T but transaction is for region S.\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. \"customerReference\" must be less than or equal 12 chars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying error message states customerReference must be 12 characters or less\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states customerReference must be 12 characters or less\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"customerReference\\\" length must be less than or equal to 12 characters long\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A2\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "29. \"licenceNumber\" must be less than or equal 150 chars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying error message states licenceNumber must be 150 characters or less\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states licenceNumber must be 150 characters or less\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"licenceNumber\\\" length must be less than or equal to 150 characters long\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis pa\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "30. \"areaCode\" must be valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying error message states areaCode must be valid\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states areaCode must be valid\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"areaCode\\\" must be one of [ARCA, AREA, ARNA, CASC, MIDLS, MIDLT, MIDUS, MIDUT, AACOR, AADEV, AANWX, AASWX, NWCEN, NWNTH, NWSTH, HAAR, KAEA, SAAR, AGY2N, AGY2S, AGY3, AGY3N, AGY3S, AGY4N, AGY4S, N, SE, SE1, SE2, SW, ABNRTH, DALES, NAREA, RIDIN, DEFAULT, MULTI]\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCAs\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "31. \"lineDescription\" must be less than or equal 240 chars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying error message states lineDescription must valid\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states lineDescription must be valid\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"lineDescription\\\" length must be less than or equal to 240 characters long\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque euh\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "32. \"subjectToMinimumCharge\" must be a Boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying Subject To Minimum Charge is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states newLicence must be a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"subjectToMinimumCharge\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"subjectToMinimumCharge\": \"Test\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "33. \"eiuCSource\" is mandatory when \"compensationCharge\" is true and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input eiucSource is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"eiucSource\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": true,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "calculate-pre-sroc-charge-in-transaction",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region T\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response.billRun.id)\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"T\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create a valid Pre-SRoC Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"waterUndertaker\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. \"compensationCharge\" as \"true\" requires \"EIUC Source\" and \"Water Undertaker\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with compensationCharge as true (including EIUC Source and Water Undertaker)\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": true,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. Pre-SRoC Transaction is created when Charge value is 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction when Charge value is 0\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": 0,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Verify conditional validation on \"EIUC Source\" and \"Water Undertaker\" when \"compensationCharge\" is true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying conditional validation on EIUC Source and Water Undertaker when compensationCharge is true\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of mandatory data items required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"eiucSource\\\" is required. \\\"waterUndertaker\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": true,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. \"periodStartDate\" accepts correct format DD-MMM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate is correctly formatted for DD-MMM-YYYY\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. \"periodStartDate\" is correct format DD-MM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate is correctly formatted for DD-MM-YYYY\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-04-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. \"periodStartDate\" DD must be valid day",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate must be valid day\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. \"periodStartDate\" MM must be valid month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01--2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10.  \"periodStartDate\" YYYY must be valid year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate YYYY must be valid year\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-20--\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11 \"periodStartDate\" YYYY must be valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate YYYY must be valid year\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. \"periodEndDate\" accepts correct format DD-MMM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate is correctly formatted for DD-MMM-YYYY\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. \"periodEndDate\" accepts correct format DD-MM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate is correctly formatted for DD-MM-YYYY\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-03-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. \"periodEndDate\" DD must be valid day",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid day\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"-03-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15.  \"periodEndDate\" MM must be valid month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31--2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. \"periodEndDate\" YYYY must be valid year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-20--\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. \"periodStartDate\" & \"periodEndDate\" must fall in the same FY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate & periodEndDate to fall in the same FY\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of periodStartDate & periodEndDate to fall in the same FY\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEndFinancialYear\\\" must be [2018]\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2018\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\":false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. \"periodStartDate\" must be less than \"periodEndDate\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be later than periodStartDate\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of periodEndDate must be later than periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be less than or equal to \\\"ref:periodEnd\\\"\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2017\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\":false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "19. \"billabledays\" does not accept INT value more than 366",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Billable days takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of Billable days takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" must be less than or equal to 366\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 367,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. \"billabledays\" does not accept INT value less than 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Billable days takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of Billable days takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" must be greater than or equal to 0\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": -1,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "21. \"authorisedDays\" does not accept INT value more than 366",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating authorisedDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of authorisedDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" must be less than or equal to 366\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 367,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. \"authorisedDays\" does not accept INT value less than 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating authorisedDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of authorisedDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" must be greater than or equal to 0\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": -1,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. \"credit\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Credit is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of Credit is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"credit\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": \"test\",\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "24. \"twoPartTariff\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating twoPartTariff is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of twoPartTariff is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"twoPartTariff\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": \"test\",\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. \"compensationCharge\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating compensationCharge is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of compensationCharge is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"compensationCharge\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": \"test\",\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. \"waterUndertaker\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating waterUndertaker is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of waterUndertaker is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"waterUndertaker\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": \"test\",\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. \"section127Agreement\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section127Agreement is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section127Agreement is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section127Agreement\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": \"test\",\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. \"section130Agreement\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section130Agreement is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section130Agreement is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section130Agreement\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": \"test\",\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "29. \"volume\" only accepts number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Volume to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of volume data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" must be a number\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"one\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "30. \"volume\" does not accept boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Volume to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of volume data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" must be a number\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": true,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "31. \"section126Factor\" only accepts number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must be a number\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": 1045,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": \"one\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "32. \"section126Factor\" does not accept boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must be a number\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": 1045,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": true,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "33. \"section126Factor\" does not accept numbers with more than 3 decimal places",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number with up to 3 decimal places\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number with up to 3 decimal places\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must have no more than 3 decimal places\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": 1045,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1.2345,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "34. BigINT Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Check chargeValue output field for BIGINT data type\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": 521548,\r\n    \"source\": \"Kielder\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"High\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Midlands\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "calculate-standalone-pre-sroc-charge",
			"item": [
				{
					"name": "1. Calculate valid Pre-SRoC Charge and verify response data items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating a valid Pre-SRoC Charge\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify sourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.sourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify seasonFactor is returned\", function () {",
									"    pm.expect(response.calculation.seasonFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify lossFactor is returned\", function () {",
									"    pm.expect(response.calculation.lossFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify licenceHolderChargeAgreement is returned\", function () {",
									"    pm.expect(response.calculation.licenceHolderChargeAgreement).to.eql(null);",
									"});",
									"",
									"pm.test(\"Verify chargeElementAgreement is returned\", function () {",
									"    pm.expect(response.calculation.chargeElementAgreement).to.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiucSourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.eiucSourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiuc is returned\", function () {",
									"    pm.expect(response.calculation.eiuc).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify suc is returned\", function () {",
									"    pm.expect(response.calculation.eiucFactor).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "2. Calculate valid Pre-SRoC Charge with mandatory data items only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating a valid Pre-SRoC Charge with mandatory only data items\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify sourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.sourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify seasonFactor is returned\", function () {",
									"    pm.expect(response.calculation.seasonFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify lossFactor is returned\", function () {",
									"    pm.expect(response.calculation.lossFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify licenceHolderChargeAgreement is returned\", function () {",
									"    pm.expect(response.calculation.licenceHolderChargeAgreement).to.eql(null);",
									"});",
									"",
									"pm.test(\"Verify chargeElementAgreement is returned\", function () {",
									"    pm.expect(response.calculation.chargeElementAgreement).to.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiucSourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.eiucSourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiuc is returned\", function () {",
									"    pm.expect(response.calculation.eiuc).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify suc is returned\", function () {",
									"    pm.expect(response.calculation.eiucFactor).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.58\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. \"section126Factor\" is not returned as part of response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verify Section 126 Factor is not returned as part of response\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify abatementAdjustment 126 is not returned\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"abatementAdjustment\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": true,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. \"section127Factor\" is correctly returned as part of response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verify Section 127 Factor is correctly returned as part of response\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Section 127 is correctly returned\", function () {",
									"    pm.expect(response.calculation.chargeElementAgreement).to.eql(\"S127 x 0.5\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Calculate a valid Credit Pre-SRoC Charge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating a valid Credit Pre-SRoC Charge\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify chargeValue is returned as negative\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-\");",
									"});",
									"",
									"pm.test(\"Verify abatementAdjustment 126 is not returned\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"abatementAdjustment\");",
									"});",
									"",
									"pm.test(\"Verify sourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.sourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify seasonFactor is returned\", function () {",
									"    pm.expect(response.calculation.seasonFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify lossFactor is returned\", function () {",
									"    pm.expect(response.calculation.lossFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify licenceHolderChargeAgreement is returned\", function () {",
									"    pm.expect(response.calculation.licenceHolderChargeAgreement).to.eql(null);",
									"});",
									"",
									"pm.test(\"Verify chargeElementAgreement is returned\", function () {",
									"    pm.expect(response.calculation.chargeElementAgreement).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiucSourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.eiucSourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiuc is returned\", function () {",
									"    pm.expect(response.calculation.eiuc).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify suc is returned\", function () {",
									"    pm.expect(response.calculation.eiucFactor).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. \"periodStart\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verify periodStart is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodStart is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. \"periodEnd\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate periodEnd is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodEnd is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" is required. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. \"credit\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate credit is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input credit is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"credit\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. \"billableDays\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate billableDays is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input billableDays is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10. \"authorisedDays\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate authorisedDays is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input authorisedDays is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11. \"volume\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate volume is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input volume is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. \"source\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate source is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input source is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"source\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. \"season\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate season is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input season is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"season\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. \"loss\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate loss is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input loss is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"loss\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15. \"twoPartTariff\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate twoPartTariff is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input twoPartTariff is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"twoPartTariff\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. \"compensationCharge\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate compensationCharge is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input compensationCharge is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"compensationCharge\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. \"regionalChargingArea\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate regionalChargingArea is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input regionalChargingArea is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"regionalChargingArea\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. \"section127Agreement\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate section127Agreement is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input section127Agreement is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section127Agreement\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "19. \"section130Agreement\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate section130Agreement is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input section130Agreement is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section130Agreement\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. \"EIUC Source\" and \"Water Undertaker\" required when \"compensationCharge\" is true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating conditional validation on EIUC Source and Water Undertaker when compensationCharge is true\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of mandatory data items required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"eiucSource\\\" is required. \\\"waterUndertaker\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": true,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "21. \"periodStartDate\" accepts correct format DD-MMM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate is correctly formatted for DD-MMM-YYYY\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. \"periodStartDate\" is correct format DD-MM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate is correctly formatted for DD-MM-YYYY\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-04-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. \"periodStartDate\" DD must be valid day",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate must be valid day\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "24. \"periodStartDate\" MM must be valid month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01--2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. \"periodStartDate\" YYYY must be valid year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate YYYY must be valid year\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-20--\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. \"periodEndDate\" accepts correct format DD-MMM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate YYYY must be valid year\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. \"periodEndDate\" accepts correct format DD-MM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate is correctly formatted for DD-MM-YYYY\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-03-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. \"periodEndDate\" DD must be valid day",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid day\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"-03-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "29. \"periodEndDate\" MM must be valid month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31--2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "30. \"periodEndDate\" YYYY must be valid year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-20--\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "31. \"periodStartDate\" & \"periodEndDate\" must fall in the same FY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate & periodEndDate to fall in the same FY\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of periodStartDate & periodEndDate to fall in the same FY\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEndFinancialYear\\\" must be [2018]\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2018\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.55\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "32. \"periodStartDate\" must be less than \"periodEndDate\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be later than periodStartDate\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of periodEndDate must be later than periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be less than or equal to \\\"ref:periodEnd\\\"\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2017\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.55\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "33. \"billabledays\" does not accept INT value more than 366",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating billableDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that billableDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" must be less than or equal to 366\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 367,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "34. \"billabledays\" does not accept INT value less than 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating billableDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that billableDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" must be greater than or equal to 0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": -1,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "35. \"authorisedDays\" does not accept INT value more than 366",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating authorisedDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that authorisedDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" must be less than or equal to 366\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 367,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "36. \"authorisedDays\" does not accept INT value less than 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating authorisedDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that authorisedDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" must be greater than or equal to 0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": -1,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "37. \"credit\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating credit is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that credit is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"credit\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": \"test\",\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "38. \"twoPartTariff\" only accepts a boolean Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating twoPartTariff is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that twoPartTariff is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"twoPartTariff\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": \"test\",\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "39. \"compensationCharge\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating compensationCharge is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that compensationCharge is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"compensationCharge\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": \"test\",\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "40. \"waterUndertaker\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating waterUndertaker is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that waterUndertaker is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"waterUndertaker\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": \"test\",\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "41. \"section127Agreement\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section127Agreement is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that section127Agreement is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section127Agreement\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": \"test\",\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "42. \"section130Agreement\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section130Agreement is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that section130Agreement is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section130Agreement\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": \"test\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "43. \"volume\" only accepts number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Volume to be a number\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of volume data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" must be a number\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"twentytwo\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "44. \"volume\" does not accept boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Volume to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of volume data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" must be a number\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": true,\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "45. \"section126Factor\" only accepts number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must be a number\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"1414.25\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": \"one\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "46. \"section126Factor\" does not accept boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must be a number\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"1414.25\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": true,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "47. \"section126Factor\" does not accept numbers with more than 3 decimal places",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number with up to 3 decimal places\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number with up to 3 decimal places\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must have no more than 3 decimal places\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": 6524,\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1.2345,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "48. BigINT Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Check chargeValue output field for BIGINT data type\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 245,\r\n\t\"authorisedDays\": 245,\r\n    \"volume\": \"588545\",\r\n    \"source\": \"Kielder\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"High\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Midlands\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "view-status-generate-summary",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"S\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"S\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"S\" + randomCustomerRef2 + \"C\";\r",
									"\r",
									"const licenceNum = \"S\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"S\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"S\" + randomLicenseNum2 + \"_GEN2\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create a valid Pre-SRoC Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"1.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. \"regime\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify 404 error due to missing regime\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2//bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. \"billRunId\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify 404 error due to missing bill run ID\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs//status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Valid \"billRunId\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify 404 error due to invalid bill run ID\");\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run ID is not found in CM database\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.randomBillRunID + \" is unknown.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"\r",
									"\r",
									"pm.environment.set(\"randomBillRunID\", myUUID);\r",
									"\r",
									"console.log(myUUID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{randomBillRunID}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{randomBillRunID}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. Current status of the bill run is returned",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify current status of the Bill Run is returned upon receipt of valid request\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify current status of Bill Run\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"initialised\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. Current status of the bill run is returned",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify current status of the Bill Run is returned upon receipt of valid request\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify current status of Bill Run\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"generated\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. Generated Bill Run cannot be regenerated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify bill Run that has already been generated throws error\");\r",
									"\r",
									"pm.test(\"409 error\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify error message that Bill Run has already been generated\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Summary for bill run \" + environment.billRun_id + \" has already been generated.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "11. Bill Run without transactions cannot be generated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify the CM returns error when a Bill Run without transactions is generated\");\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Summary for a Bill Run without transactions cannot be generated\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Summary for bill run \" + environment.billRun_id + \" cannot be generated because it has no transactions.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. Create a valid Pre-SRoC Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"1.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. \"billRunId\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Bill Run is not found - 404 error\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs//generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. \"regime\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify regime is not found - 404 error\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2//bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15. Valid \"billRunId\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify valid billRunId parameter is mandatory\");\r",
									"\r",
									"pm.test(\"Verify Bill Run is not found - 404 error\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify valid billRunId parameter is mandatory\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.randomBillRunID + \" is unknown.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{randomBillRunID}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{randomBillRunID}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "invoice-level-summary",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"Y\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. No invoices are present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"const invoiceArray = response.billRun.invoices",
									"console.log(\"Verify no invoices are present in newly created Bill Run\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No invoices present in the bill run\", function () {",
									"    pm.expect(invoiceArray).to.eql([]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. Calculate & Capture Transaction Charge value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating and capturing transaction charge value\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});",
									"",
									"//Capture charge value",
									"pm.environment.set(\"set_chargeValue\", response.calculation.chargeValue);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. Add a valid Pre-SRoC Transaction to Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"Y\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"Y\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"Y\" + randomCustomerRef2 + \"C\";\r",
									"\r",
									"const licenceNum = \"Y\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"Y\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"Y\" + randomLicenseNum2 + \"_GEN2\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);\r",
									"\r",
									"console.log(environment.customer_ref)\r",
									"console.log(environment.customer_ref1)\r",
									"console.log(environment.customer_ref2)\r",
									"\r",
									"console.log(environment.licence_num)\r",
									"console.log(environment.licence_num1)\r",
									"console.log(environment.licence_num2)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Verify new invoice has been created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"A new group is created after no matching transactions are found\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)",
									"//Capture invoice Id for the invoice",
									"const invoiceId = invoiceArray.id",
									"",
									"//Capture netTotal ",
									"pm.environment.set(\"net_total\", invoiceArray.netTotal);",
									"",
									"//Capture invoiceId ",
									"pm.environment.set(\"invoice_id\", invoiceArray.id);",
									"",
									"//Verify invoice array is not empty - maybe not neccesary ",
									"pm.test(\"Verify invoice array is not empty\", function () {",
									"    pm.expect(invoiceArray).to.not.eql(null);",
									"});",
									"",
									"//Verify new invoice is created for",
									"pm.test(\"Verify new invoice is created for \" + environment.customer_ref, () => {",
									"    pm.expect(invoiceArray.customerReference).to.eql(environment.customer_ref)",
									"});",
									"",
									"//Verify transaction has been added to the invoice",
									"pm.test(\"Verify transaction has been added to the invoice\", () => {",
									"    pm.expect(invoiceArray.netTotal).to.eql(environment.set_chargeValue)",
									"});",
									"",
									"//Verify licence is correct",
									"pm.test(\"Verify licence is correct\", () => {",
									"    pm.expect(invoiceArray.licences[0].licenceNumber).to.eql(environment.licence_num)",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. Add a valid Pre-SRoC Transaction with matching FY, CustomerRef and Licence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching FY, CustomerRef and Licence and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. Verify transactions are added to the same invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"No new group is created for transactions sharing the same combination of `financial year`, `customer reference` and `licence number`\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref",
									"const invoiceArray = response.billRun.invoices.find(element => element.id === environment.invoice_id)",
									"",
									"//Capture netTotal ",
									"pm.environment.set(\"net_total\", invoiceArray.netTotal);",
									"",
									"",
									"//Verify transaction has been added to the existing invoice",
									"pm.test(\"Verify transaction has been added to existing invoice \", () => {",
									"    pm.expect(invoiceArray.netTotal).to.eql(environment.set_chargeValue + environment.set_chargeValue)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. New Invoice is not created if FY & Customer Ref are the same but Licence Number is different",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching FY, CustomerRef and Licence and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. Verify transactions are added to the same invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"No new group is created for transactions sharing the same `financial year` & `customer reference` but `licence number` is different\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching invoice ID",
									"const invoiceArray = response.billRun.invoices.find(element => element.id === environment.invoice_id)",
									"//Capture licences within invoice",
									"const licenceArray = invoiceArray.licences.find(element => element.licenceNumber === environment.licence_num1)",
									"",
									"",
									"//Verify transaction has been added to the exisiting invoice",
									"pm.test(\"Verify transaction has been added to existing invoice \", () => {",
									"    pm.expect(invoiceArray.netTotal).to.eql(environment.net_total + environment.set_chargeValue)",
									"});",
									"",
									"//Verify licence number has been added to invoice has been added to the existing invoice",
									"pm.test(\"Verify licence number has been added to existing invoice \", () => {",
									"    pm.expect(licenceArray.licenceNumber).to.eql(environment.licence_num1)",
									"});",
									"",
									"//Capture debit line count",
									"pm.environment.set(\"debitLine_count\", invoiceArray.debitLineCount);",
									"",
									"//Capture debit line value",
									"pm.environment.set(\"debitLine_value\", invoiceArray.debitLineValue);",
									"",
									"//Capture credit line count",
									"pm.environment.set(\"creditLine_count\", invoiceArray.creditLineCount);",
									"",
									"//Capture credit line value",
									"pm.environment.set(\"creditLine_value\", invoiceArray.creditLineValue);",
									"",
									"//Capture zero value line count",
									"pm.environment.set(\"zeroLine_count\", invoiceArray.zeroLineCount);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10. Calculate & Capture Transaction Charge value Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating and capturing transaction charge value\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});",
									"",
									"//Capture charge value",
									"pm.environment.set(\"set_chargeValue\", response.calculation.chargeValue);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2016\",\r\n    \"periodEnd\": \"31-MAR-2017\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11. New Invoice is created if Customer Ref  is the same but FY different",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching CustomerRef and different FY and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2016\",\r\n    \"periodEnd\": \"31-MAR-2017\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2017 - 31-MAR-2016\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. Verify transactions are added to a NEW invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"A NEW group is created for transactions same `customer reference` but `financial year` is different\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"//Capture first invoice matching customer ref",
									"const invoiceArray1 = response.billRun.invoices.find(element => element.id === environment.invoice_id)",
									"",
									"",
									"",
									"//Capture second invoice matching financial year",
									"const invoiceArray2 = response.billRun.invoices.find(element => element.financialYear === 2016)",
									"",
									"/*",
									"//Capture licences within invoice",
									"const licenceArray2 = invoiceArray2.licences[0]",
									"*/",
									"",
									"",
									"//Verify transaction has been added to the new invoice",
									"pm.test(\"Verify transaction has been added to new invoice \", () => {",
									"    pm.expect(invoiceArray2.netTotal).to.eql(environment.set_chargeValue)",
									"});",
									"",
									"//Verify licence number has been added to the new invoice",
									"pm.test(\"Verify licence number has been added to existing invoice \", () => {",
									"    pm.expect(invoiceArray2.licences[0].licenceNumber).to.eql(environment.licence_num1)",
									"});",
									"",
									"//Verify values have not changed in first invoice",
									"pm.test(\"Verify debit line count has not changed in first invoice\", () => {",
									"    pm.expect(invoiceArray1.debitLineCount).to.eql(environment.debitLine_count)",
									"});",
									"",
									"pm.test(\"Verify debit line value has not changed in first invoice\", () => {",
									"    pm.expect(invoiceArray1.debitLineValue).to.eql(environment.debitLine_value)",
									"});",
									"",
									"pm.test(\"Verify credit line count has not changed in first invoice\", () => {",
									"    pm.expect(invoiceArray1.creditLineCount).to.eql(environment.creditLine_count)",
									"});",
									"",
									"pm.test(\"Verify credit line value has not changed in first invoice\", () => {",
									"    pm.expect(invoiceArray1.creditLineValue).to.eql(environment.creditLine_value)",
									"});",
									"",
									"pm.test(\"Verify zero value line count has not changed in first invoice\", () => {",
									"    pm.expect(invoiceArray1.zeroLineCount).to.eql(environment.zeroLine_count)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. New Invoice is created if FY is the same but Customer Ref is different",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching CustomerRef and different FY and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2016\",\r\n    \"periodEnd\": \"31-MAR-2017\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2017 - 31-MAR-2016\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. Verify transactions are added to a NEW invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"A NEW group is created for transactions same `customer reference` but `financial year` is different\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)",
									"//Capture licences within invoice",
									"const licenceArray = invoiceArray.licences",
									"",
									"//Verify transaction has been added to the new invoice",
									"pm.test(\"Verify transaction has been added to new invoice \", () => {",
									"    pm.expect(invoiceArray.netTotal).to.eql(environment.set_chargeValue)",
									"});",
									"",
									"//Verify licence number has been added to the new invoice",
									"pm.test(\"Verify licence number has been added to existing invoice \", () => {",
									"    pm.expect(licenceArray[0].licenceNumber).to.eql(environment.licence_num1)",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15. Create a new Invoice by adding a Transaction with new Customer Ref and Licence Num",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching FY, CustomerRef and Licence and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"3\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref2}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"01-APR-2017 - 31-MAR-2018\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. Capture Invoice debit, credit, zero & netTotal line items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Debit Lines have been updated\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref 2",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)",
									"//Capture invoice Id for the invoice",
									"const invoiceId = invoiceArray.id",
									"",
									"",
									"//Capture debit line count",
									"pm.environment.set(\"debitLine_count\", invoiceArray.debitLineCount);",
									"",
									"//Capture debit line value",
									"pm.environment.set(\"debitLine_value\", invoiceArray.debitLineValue);",
									"",
									"//Capture credit line count",
									"pm.environment.set(\"creditLine_count\", invoiceArray.creditLineCount);",
									"",
									"//Capture credit line value",
									"pm.environment.set(\"creditLine_value\", invoiceArray.creditLineValue);",
									"",
									"//Capture zero value line count",
									"pm.environment.set(\"zeroLine_count\", invoiceArray.zeroLineCount);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. Calculate & Capture Transaction Charge value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating and capturing transaction charge value\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});",
									"",
									"//Capture charge value",
									"pm.environment.set(\"set_chargeValue\", response.calculation.chargeValue);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"2541\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. Add a non-zero value Pre-SRoC Transaction with \"credit\" as false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching FY, CustomerRef and Licence and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"2541\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref2}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"01-APR-2017 - 31-MAR-2018\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "19. Verify Debit lines are updated correctly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verify Debit lines have been updated correctly\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)",
									"//Capture invoice Id for the invoice",
									"const invoiceId = invoiceArray.id",
									"",
									"//Capture net total value",
									"pm.environment.set(\"netTotal_value\", invoiceArray.netTotal);",
									"",
									"//Verify Debit Line count is incremented by 1",
									"pm.test(\"Verify Debit Line count is incremented by 1\", () => {",
									"    pm.expect(invoiceArray.debitLineCount).to.eql(environment.debitLine_count + 1)",
									"});",
									"",
									"//Verify Debit Line value is increased by the value of the transaction",
									"pm.test(\"Verify Debit Line value is increased by the transaction value\", () => {",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(environment.debitLine_value + environment.set_chargeValue)",
									"});",
									"",
									"//Verify Credit Line count has stayed the same",
									"pm.test(\"Verify Credit Line count has stayed the same\", () => {",
									"    pm.expect(invoiceArray.creditLineCount).to.eql(environment.creditLine_count)",
									"});",
									"",
									"//Verify Credit Line value has stayed the same",
									"pm.test(\"Verify Credit Line value has stayed the same\", () => {",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(environment.creditLine_value)",
									"});",
									"",
									"//Verify Zero Line count has stayed the same",
									"pm.test(\"Zero Line count has stayed the same\", () => {",
									"    pm.expect(invoiceArray.zeroLineCount).to.eql(environment.zeroLine_count)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. Update Credit and Debit Line items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Debit Lines have been updated\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref 2",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)",
									"//Capture invoice Id for the invoice",
									"const invoiceId = invoiceArray.id",
									"",
									"",
									"//Capture debit line count",
									"pm.environment.set(\"debitLine_count\", invoiceArray.debitLineCount);",
									"",
									"//Capture debit line value",
									"pm.environment.set(\"debitLine_value\", invoiceArray.debitLineValue);",
									"",
									"//Capture credit line count",
									"pm.environment.set(\"creditLine_count\", invoiceArray.creditLineCount);",
									"",
									"//Capture credit line value",
									"pm.environment.set(\"creditLine_value\", invoiceArray.creditLineValue);",
									"",
									"//Capture zero value line count",
									"pm.environment.set(\"zeroLine_count\", invoiceArray.zeroLineCount);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "21. Calculate & Capture Transaction Charge value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating and capturing transaction charge value\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});",
									"",
									"//Capture positive charge value",
									"var chargeValue = response.calculation.chargeValue",
									"var expChargeValue = Math.abs(chargeValue)",
									"pm.environment.set(\"set_chargeValue\", expChargeValue);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"2541\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. Add a non-zero value Pre-SRoC Transaction with \"credit\" as true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching FY, CustomerRef and Licence and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id2\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID 2 is generated: \" + environment.transaction_id2);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"2541\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref2}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"01-APR-2017 - 31-MAR-2018\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. Verify Credit lines are updated correctly and Debit Lines are unchanged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verify Credit lines have been updated correctly\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)",
									"//Capture invoice Id for the invoice",
									"const invoiceId = invoiceArray.id",
									"",
									"//Verify Credit Line count is incremented by 1",
									"pm.test(\"Verify Credit Line count is incremented by 1\", () => {",
									"    pm.expect(invoiceArray.creditLineCount).to.eql(environment.creditLine_count + 1)",
									"});",
									"",
									"//Verify Credit Line value is increased by the value of the transaction",
									"pm.test(\"Verify Credit Line value is increased by the transaction value\", () => {",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(environment.creditLine_value + environment.set_chargeValue)",
									"});",
									"",
									"//Verify Debit Line count is unchanged",
									"pm.test(\"Verify Debit Line count is unchanged\", () => {",
									"    pm.expect(invoiceArray.debitLineCount).to.eql(environment.debitLine_count)",
									"});",
									"",
									"//Verify Debit Line value is unchanged",
									"pm.test(\"Verify Debit Line value is unchanged\", () => {",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(environment.debitLine_value)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "24. Update Invoice Line items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Debit Lines have been updated\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref 2",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)",
									"//Capture invoice Id for the invoice",
									"const invoiceId = invoiceArray.id",
									"",
									"//Capture debit line count",
									"pm.environment.set(\"debitLine_count\", invoiceArray.debitLineCount);",
									"",
									"//Capture debit line value",
									"pm.environment.set(\"debitLine_value\", invoiceArray.debitLineValue);",
									"",
									"//Capture credit line count",
									"pm.environment.set(\"creditLine_count\", invoiceArray.creditLineCount);",
									"",
									"//Capture credit line value",
									"pm.environment.set(\"creditLine_value\", invoiceArray.creditLineValue);",
									"",
									"//Capture zero value line count",
									"pm.environment.set(\"zeroLine_count\", invoiceArray.zeroLineCount);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. Add Zero value charge Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching FY, CustomerRef and Licence and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 1,\r\n\t\"authorisedDays\": 1,\r\n    \"volume\": \"0\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref2}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"01-APR-2017 - 31-MAR-2018\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. Verify Zero Value lines are updated correctly and Debit & Credit Lines are unchanged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verify Zero Value lines have been updated correctly\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)",
									"//Capture invoice Id for the invoice",
									"const invoiceId = invoiceArray.id",
									"",
									"//Verify Zero Value Line count is incremented by 1",
									"pm.test(\"Verify Zero Value Line count is incremented by 1\", () => {",
									"    pm.expect(invoiceArray.zeroLineCount).to.eql(environment.zeroLine_count + 1)",
									"});",
									"",
									"//Verify Debit Line count is unchanged",
									"pm.test(\"Verify Debit Line count is unchanged\", () => {",
									"    pm.expect(invoiceArray.debitLineCount).to.eql(environment.debitLine_count)",
									"});",
									"",
									"//Verify Debit Line value is unchanged",
									"pm.test(\"Verify Debit Line value is unchanged\", () => {",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(environment.debitLine_value)",
									"});",
									"",
									"//Verify Credit Line count is unchanged",
									"pm.test(\"Verify Credit Line count is unchanged\", () => {",
									"    pm.expect(invoiceArray.creditLineCount).to.eql(environment.creditLine_count)",
									"});",
									"",
									"//Verify Credit Line value is unchanged",
									"pm.test(\"Verify Credit Line value is unchanged\", () => {",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(environment.creditLine_value)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. Calculate & Capture Transaction Charge value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating and capturing transaction charge value\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});",
									"",
									"//Capture charge value",
									"pm.environment.set(\"set_chargeValue\", response.calculation.chargeValue);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2014\",\r\n    \"periodEnd\": \"31-MAR-2015\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"9854\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. Add Credit Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching FY, CustomerRef and Licence and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id2\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID 2 is generated: \" + environment.transaction_id2);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2014\",\r\n    \"periodEnd\": \"31-MAR-2015\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"9854\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref2}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"01-APR-2017 - 31-MAR-2018\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "29. Verify Credit lines are updated correctly and Debit Lines are unchanged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verify Net totals have been updated correctly and include minus sign\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref",
									"const invoiceArray = response.billRun.invoices.find(element => element.financialYear === 2014)",
									"",
									"//Verify Net Total value is correct",
									"pm.test(\"Verify Net Total value is correct\", () => {",
									"    pm.expect(invoiceArray.netTotal).to.eql(environment.set_chargeValue)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "deminimis",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef3 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef4 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef5 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum3 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum4 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum5 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"A\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"A\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"A\" + randomCustomerRef2 + \"C\";\r",
									"const customerRef3 = \"A\" + randomCustomerRef2 + \"D\";\r",
									"const customerRef4 = \"A\" + randomCustomerRef2 + \"E\";\r",
									"const customerRef5 = \"A\" + randomCustomerRef2 + \"F\";\r",
									"\r",
									"const licenceNum = \"A\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"A\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"A\" + randomLicenseNum2 + \"_GEN2\";\r",
									"const licenceNum3 = \"A\" + randomLicenseNum2 + \"_GEN3\";\r",
									"const licenceNum4 = \"A\" + randomLicenseNum2 + \"_GEN4\";\r",
									"const licenceNum5 = \"A\" + randomLicenseNum2 + \"_GEN5\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"pm.environment.set(\"customer_ref3\", customerRef3);\r",
									"pm.environment.set(\"customer_ref4\", customerRef4);\r",
									"pm.environment.set(\"customer_ref5\", customerRef5);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);\r",
									"pm.environment.set(\"licence_num3\", licenceNum3);\r",
									"pm.environment.set(\"licence_num4\", licenceNum4);\r",
									"pm.environment.set(\"licence_num5\", licenceNum5);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create a non-Deminimis Debit Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"5856\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. Debit Invoice and Transaction above £5 are not flagged as deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify debit invoice above £5 is not flagged as deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount is not 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary debitLineCount is not 0\", function () {\r",
									"    pm.expect(response.billRun.debitLineCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary debitLineValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is not 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.not.eql(0);\r",
									"});\r",
									"\r",
									"//--------------------------------------------------------\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is returned and is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is returned and is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is returned and is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Create a Credit Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"65\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. Credit Invoice and Transaction below £0 are not flagged as deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Credit Invoice and Transaction below £0 are not flagged as deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is not 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditLineCount is not 0\", function () {\r",
									"    pm.expect(response.billRun.creditLineCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditLineValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.creditLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is not 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.not.eql(0);\r",
									"});\r",
									"\r",
									"//--------------------------------------------------------\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineCount is returned and is not 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is returned and is not 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is returned and is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "10. Create Zero value transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. Invoice value of 0 is not considered Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Zero Value Invoice and Transaction are not flagged as deminimiss\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary zeroLineCount is not 0\", function () {\r",
									"    pm.expect(response.billRun.zeroLineCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									"//--------------------------------------------------------\r",
									"\r",
									"pm.test(\"Verify zeroValueInvoice is returned and is true\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is returned and is 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "14. Create Transaction with Charge Value of 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. Bill Run Summary excludes Deminimis Invoice value of 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary excludes Invoices and Transactions valued below £5 and positive\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary debitLineCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.debitLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary debitLineValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditLineCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary zeroLineCount is 0\", function () {\r",
									"    pm.expect(response.billRun.zeroLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal excludes deminimis and is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. Invoice Level Summary includes deminimis Invoices and Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoices and Transactions valued below £5 and positive are Deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineCount is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineCount includes deminimis\", function () {\r",
									"    pm.expect(invoiceArray.debitLineCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue includes deminimis\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroLineCount is 0\", function () {\r",
									"    pm.expect(invoiceArray.zeroLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "19. Charge Value of 499 is considered Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"1.583\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"High\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "21. Bill Run Summary excludes deminimis Invoices value of 499",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary excludes Invoices and Transactions valued below £5 and positive\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary debitLineCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.debitLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary debitLineValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditLineCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary zeroLineCount is 0\", function () {\r",
									"    pm.expect(response.billRun.zeroLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal excludes deminimis and is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. Invoice Level Summary includes deminimis Invoices and Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoices and Transactions valued below £5 and positive are Deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineCount is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineCount includes deminimis\", function () {\r",
									"    pm.expect(invoiceArray.debitLineCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue includes deminimis\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroLineCount is 0\", function () {\r",
									"    pm.expect(invoiceArray.zeroLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "24. Charge Value of -1 is not considered Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-AUG-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 92,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"0.5\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"All Year\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Wales\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-AUG-2019 - 31-MAR-2020\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. Bill Run Summary shows -1 value invoice is not Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary shows -1 value invoice is not Deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 1\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount is 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue is 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditLineCount is 1\", function () {\r",
									"    pm.expect(response.billRun.creditLineCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditLineValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.creditLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary debitLineCount is 0\", function () {\r",
									"    pm.expect(response.billRun.debitLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary debitLineValue is 0\", function () {\r",
									"    pm.expect(response.billRun.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary zeroLineCount is 0\", function () {\r",
									"    pm.expect(response.billRun.zeroLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is not 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.not.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. Invoice Level Summary shows -1 value invoice is not Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows -1 value invoice is not Deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineCount is 1\", function () {\r",
									"    pm.expect(invoiceArray.creditLineCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineCount is 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroLineCount is 0\", function () {\r",
									"    pm.expect(invoiceArray.zeroLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(-1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "29. Charge Value of 500 is not considered Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"1.584\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"High\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "30. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "31. Bill Run Summary shows 500 value invoice is not deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary shows 500 value invoice is not deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount is not 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary debitLineCount is not 0\", function () {\r",
									"    pm.expect(response.billRun.debitLineCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary debitLineValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary zeroLineCount is 0\", function () {\r",
									"    pm.expect(response.billRun.zeroLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is not 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.not.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "32. Invoice Level Summary shows 500 value invoice is not Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows 500 value invoice is not Deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineCount is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineCount is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroLineCount is 0\", function () {\r",
									"    pm.expect(invoiceArray.zeroLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "33. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "34. Create Transaction that falls below 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"87\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "35. Create Transaction that falls below 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "36. Create Transaction that falls below 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"38\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num1}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "37. Create Transaction that falls below 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"28\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num2}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "38. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "39. Bill Run Summary excludes Deminimis Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary excludes Deminimis Invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary debitLineCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.debitLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary debitLineValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditLineCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary zeroLineCount is 0\", function () {\r",
									"    pm.expect(response.billRun.zeroLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal excludes deminimis and is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "40. Invoice Level Summary shows an Invoice with a net value of below 500 and made up of multiple transactions across different Licenses is flagged as Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows an Invoice with a net value of below 500 and made up of multiple transactions across different Licenses is flagged as Deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineCount is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineCount is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroLineCount is 0\", function () {\r",
									"    pm.expect(invoiceArray.zeroLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "41. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "42. Create a credit Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"167\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "43. Create Transaction which brings the Invoice to Positive and below 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"365\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "44. Bill Run Summary excludes Deminimis Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary excludes Deminimis Invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary debitLineCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.debitLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary debitLineValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditLineCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.creditLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditLineValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary zeroLineCount is 0\", function () {\r",
									"    pm.expect(response.billRun.zeroLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal excludes deminimis and is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "45. Invoice Level Summary shows an Invoice with a net value of below 500 and made up of multiple transactions across different Licenses is flagged as Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows an Invoice with a net value of below 500 and made up of at least 1 credit transaction\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineCount is 1\", function () {\r",
									"    pm.expect(invoiceArray.creditLineCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineCount is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroLineCount is 0\", function () {\r",
									"    pm.expect(invoiceArray.zeroLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "46. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "47. Create a Zero value Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"0\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "48. Create Transaction which brings the Invoice to Positive and below 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"365\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "49. Bill Run Summary excludes Deminimis Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary excludes Deminimis Invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary debitLineCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.debitLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary debitLineValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditLineCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary zeroLineCount is 0\", function () {\r",
									"    pm.expect(response.billRun.zeroLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal excludes deminimis and is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "50. Invoice Level Summary shows an Invoice with a net value of below 500 and made up of multiple transactions across different Licenses is flagged as Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows an Invoice with a net value of below 500 and made up at least 1 Zero value transaction\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineCount is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineCount is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroLineCount is 1\", function () {\r",
									"    pm.expect(invoiceArray.zeroLineCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{systemToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Use to automate refreshing the AWS cognito bearer token in Postman",
					"//",
					"// Thanks to the following sources for helping to put this",
					"// together",
					"// https://nicolaswidart.com/blog/automatically-set-authentication-tokens-in-postman-requests",
					"// https://medium.com/@allen.helton/how-to-automate-oauth2-token-renewal-in-postman-864420d381a0",
					"// https://stackoverflow.com/a/55614206/6117745",
					"// https://docs.aws.amazon.com/cognito/latest/developerguide/token-endpoint.html",
					"",
					"const sdk = require('postman-collection')",
					"",
					"// We need to support requests against endpoints that require different",
					"// credentials. We keep the code generic by referencing the environment",
					"// variables that hold those credentials using these variables. We default",
					"// to the 'system' versions as they will be used in the majority of cases.",
					"let tokenVar = 'systemToken'",
					"let tokenTimestampVar = 'systemTokenTimestamp'",
					"let tokenExpiresInVar = 'systemExpiresIn'",
					"let oauthUserVar = 'systemUser'",
					"let oauthPassVar = 'systemPass'",
					"",
					"const authServiceUrl = pm.environment.get('tokenUrl')",
					"",
					"if (automateToken()) {",
					"  console.log('CHA API - Automating token')",
					"  // Check if the request is to an admin endpoint. It includes so update the variables",
					"",
					"  if (requestRequiresAdmin()) {",
					"    updateEnvironmentReferencesToAdmin()",
					"    console.log('CHA API - Admin path determined. Using admin env vars.')",
					"  }",
					"",
					"  if (tokenRefreshNeeded()) {",
					"    console.log('CHA API - Refresh of token needed')",
					"    refreshToken()",
					"  }",
					"}",
					"",
					"function automateToken () {",
					"  let automate = pm.environment.get('automateToken') || 'true'",
					"",
					"  if (automate === 'true') {",
					"    automate = true",
					"  } else {",
					"    automate = false",
					"  }",
					"",
					"  return automate",
					"}",
					"",
					"function requestRequiresAdmin () {",
					"  const path = pm.request.url.getPath()",
					"  const regex = RegExp('(authorised_systems|regime)', 'i')",
					"",
					"  return regex.test(path)",
					"}",
					"",
					"// Update the values we use to reference to environment variables",
					"// to use the admin alternatives",
					"function updateEnvironmentReferencesToAdmin () {",
					"  tokenVar = 'adminToken'",
					"  tokenTimestampVar = 'adminTokenTimestamp'",
					"  tokenExpiresInVar = 'adminExpiresIn'",
					"  oauthUserVar = 'adminUser'",
					"  oauthPassVar = 'adminPass'",
					"}",
					"",
					"// Compares the current token's timestamp against the current time",
					"// in UTC. If the difference in milliseconds is greater than",
					"// tokenExpiresInAsMilliseconds() then a refresh is needed",
					"function tokenRefreshNeeded () {",
					"  // Date.now() returns the number of milliseconds since 1970-01-01",
					"  const difference = (Date.now() - timestampAsMilliseconds())",
					"",
					"  return difference >= tokenExpiresInAsMilliseconds()",
					"}",
					"",
					"// When we successfully request a token we record a timestamp",
					"// in the environment variables.",
					"function timestampAsMilliseconds () {",
					"  // Set a default in case we don't have a timestamp in the env vars",
					"  let result = Date.UTC(2010, 0, 1)",
					"  const tokenTimestamp = pm.environment.get(tokenTimestampVar)",
					"",
					"  if (tokenTimestamp) {",
					"    result = tokenTimestamp",
					"  }",
					"",
					"  return result",
					"}",
					"",
					"// When we successfully request a token we record how long the token",
					"// will be valid for (expressed as seconds) in the environment variables.",
					"// As we need to deal in milliseconds this function takes that value (or",
					"// a default if the env var doesn't exist) and converts it to millseconds.",
					"function tokenExpiresInAsMilliseconds () {",
					"  // Set a default in case we don't have a timestamp in the env vars",
					"  let result = 3600",
					"  const tokenExpiresIn = pm.environment.get(tokenExpiresInVar)",
					"",
					"  if (tokenExpiresIn) {",
					"    result = tokenExpiresIn",
					"  }",
					"",
					"  return result * 1000",
					"}",
					"",
					"function encodedKeys () {",
					"  const keys = pm.environment.get(oauthUserVar) + ':' + pm.environment.get(oauthPassVar)",
					"",
					"  return CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));",
					"}",
					"",
					"function refreshToken () {",
					"  const tokenRequest = new sdk.Request({",
					"    url: authServiceUrl,",
					"    method: 'POST',",
					"    header: [",
					"      new sdk.Header({",
					"        key: 'content-type',",
					"        value: 'application/x-www-form-urlencoded'",
					"      }),",
					"      new sdk.Header({",
					"        key: 'acccept',",
					"        value: 'application/json'",
					"      }),",
					"      new sdk.Header({",
					"        key: 'Authorization',",
					"        value: 'Basic ' + encodedKeys()",
					"      })",
					"    ],",
					"    body: {",
					"      mode: 'urlencoded',",
					"      urlencoded: [",
					"        { key: 'grant_type', value: 'client_credentials' },",
					"      ]",
					"    }",
					"  })",
					"",
					"  pm.sendRequest(tokenRequest, function (err, response) {",
					"    if (err) {",
					"      throw err",
					"    }",
					"",
					"    if (response.code !== 200) {",
					"      throw new Error('Could not log in.')",
					"    }",
					"",
					"    pm.environment.set(tokenVar, response.json().access_token)",
					"    pm.environment.set(tokenExpiresInVar, response.json().expires_in)",
					"    pm.environment.set(tokenTimestampVar, Date.now());",
					"    console.log(`New token has been set: ${response.json().access_token}`);",
					"  })",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "slug",
			"value": "wrls"
		}
	]
}