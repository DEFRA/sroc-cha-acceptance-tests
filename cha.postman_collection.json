{
	"info": {
		"_postman_id": "1f4b2569-4305-4dc1-9655-f317133e129b",
		"name": "CHA acceptance tests v2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "admin",
			"item": [
				{
					"name": "List Regimes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Returns correct code', () => {",
									"    pm.expect(pm.response.code).to.equal(200)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/regimes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"regimes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show regimes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Returns correct code', () => {",
									"    pm.expect(pm.response.code).to.equal(200)",
									"})",
									"pm.test('Returns the expected regime', () => {",
									"    const body = pm.response.json()",
									"",
									"    pm.expect(body.regime.slug).to.equal(pm.variables.get('slug'))",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/regimes/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"regimes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{slug}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "system-user",
			"item": [
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns correct code\", () => {",
									"    pm.expect(pm.response.code).to.equal(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "create-bill-run",
			"item": [
				{
					"name": "1. Create Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region A\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response.billRun.id)\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. billRunId is unique",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region A\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"billRun_id1\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number1\", response.billRun.billRunNumber);\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID of previous Bill Run is not the same as this Bill Run\", function () {\r",
									"    pm.expect(environment.billRun_id).to.not.eql(environment.billRun_id1);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number of previous Bill Run is not the same as this Bill Run\", function () {\r",
									"    pm.expect(environment.billRun_number).to.not.eql(environment.billRun_number1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Create Bill Run - Region B",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region B\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"B\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Create Bill Run - Region E",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region E\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"E\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Create Bill Run - Region N",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region N\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"N\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Create Bill Run - Region S",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region S\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "7. Create Bill Run - Region T",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region T\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"T\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. Create Bill Run - Region W",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region W\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"W\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "9. Create Bill Run - Region Y",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"Y\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "10. Region code is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Code Missing\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states region is required\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"region\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "11. Region code must be valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Invalid Region Code\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states region is required\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"region\\\" must be one of [A, B, E, N, S, T, W, Y]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"G\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "12. Region code must be a String",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Invalid Region Code\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states region is required\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"region\\\" must be one of [A, B, E, N, S, T, W, Y]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "create-pre-sroc-transaction",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region T\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response.billRun.id)\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"T\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create a valid Pre-SRoC Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"Y10656902A_ExtraRgnY_record\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. Create a valid Pre-SRoC Transaction with Client ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Client ID response is correct\", function () {",
									"    pm.expect(response.transaction.clientId).to.eql(environment.client_id);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"console.log(\"Client ID generated: \" + environment.client_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomClientId = Math.floor((Math.random() * 1000) + 1);\r",
									"const clientId = \"T\" + randomClientId;\r",
									"\r",
									"pm.environment.set(\"client_id\", clientId);\r",
									"\r",
									"console.log(clientId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"Y10656902A_ExtraRgnY_record\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"clientId\": \"{{client_id}}\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. 409 Conflict Error is returned when creating a transaction with Client ID thats already in use",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"New Transaction ID has not been generated\", function () {",
									"    pm.expect(response).not.to.have.property('id');",
									"});",
									"",
									"pm.test(\"New Client ID has not been generated\", function () {",
									"    pm.expect(response).not.to.have.property('clientId');",
									"});",
									"",
									"pm.test(\"Verify error message for Client ID thats already in use\", function () {",
									"    pm.expect(response.message).to.include(`A transaction with Client ID '${environment.client_id}' for Regime 'wrls' already exists.`);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"Y10656902A_ExtraRgnY_record\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"clientId\": \"{{client_id}}\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Create a valid Pre-SRoC Transaction with mandatory data items only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. \"periodStart\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodStart is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. \"periodEnd\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodEnd is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" is required. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. \"credit\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input credit is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"credit\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. \"billableDays\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input billableDays is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10. \"authorisedDays\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input authorisedDays is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11. \"volume\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input volume is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. \"source\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input source is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"source\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. \"season\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input season is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"season\\\" is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. \"loss\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input loss is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"loss\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15. \"twoPartTariff\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input twoPartTariff is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"twoPartTariff\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. \"compensationCharge\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input compensationCharge is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"compensationCharge\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. \"waterUndertaker\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input waterUndertaker is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"waterUndertaker\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. \"regionalChargingArea\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input regionalChargingArea is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"regionalChargingArea\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "19. \"section127Agreement\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input section127Agreement is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section127Agreement\\\" is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. \"section130Agreement\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input section130Agreement is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section130Agreement\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "21. \"customerReference\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input customerReference is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"customerReference\\\" is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. \"lineDescription\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input lineDescription is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"lineDescription\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. \"licenceNumber\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input licenceNumber is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"licenceNumber\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "24. \"chargePeriod\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input chargePeriod is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"chargePeriod\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. \"region\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input region is required\", function () {",
									"    pm.expect(response.message).to.include(\"Bill run \" + environment.billRun_id + \" is for region T but transaction is for region undefined.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. \"areaCode\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input areaCode is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"areaCode\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. \"region\" must match Bill Run region",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Region data input\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states Region is does not match Billrun Region\", function () {",
									"    pm.expect(response.message).to.include(\"Bill run \" + environment.billRun_id + \" is for region T but transaction is for region S.\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. \"customerReference\" must be less than or equal 12 chars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying error message states customerReference must be 12 characters or less\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states customerReference must be 12 characters or less\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"customerReference\\\" length must be less than or equal to 12 characters long\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A2\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "29. \"licenceNumber\" must be less than or equal 150 chars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying error message states licenceNumber must be 150 characters or less\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states licenceNumber must be 150 characters or less\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"licenceNumber\\\" length must be less than or equal to 150 characters long\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis pa\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "30. \"areaCode\" must be valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying error message states areaCode must be valid\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states areaCode must be valid\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"areaCode\\\" must be one of [ARCA, AREA, ARNA, CASC, MIDLS, MIDLT, MIDUS, MIDUT, AACOR, AADEV, AANWX, AASWX, NWCEN, NWNTH, NWSTH, HAAR, KAEA, SAAR, AGY2N, AGY2S, AGY3, AGY3N, AGY3S, AGY4N, AGY4S, N, SE, SE1, SE2, SW, ABNRTH, DALES, NAREA, RIDIN, DEFAULT, MULTI]\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCAs\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "31. \"lineDescription\" must be less than or equal 240 chars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying error message states lineDescription must valid\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states lineDescription must be valid\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"lineDescription\\\" length must be less than or equal to 240 characters long\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque euh\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "32. \"newLicense\" must be a Boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying New License is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states newLicence must be a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"newLicence\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": \"Test\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "calculate-pre-sroc-charge-in-transaction",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region T\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response.billRun.id)\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"T\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create a valid Pre-SRoC Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"waterUndertaker\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. \"compensationCharge\" as \"true\" requires \"EIUC Source\" and \"Water Undertaker\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with compensationCharge as true (including EIUC Source and Water Undertaker)\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": true,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. Pre-SRoC Transaction is created when Charge value is 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction when Charge value is 0\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": 0,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Verify conditional validation on \"EIUC Source\" and \"Water Undertaker\" when \"compensationCharge\" is true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying conditional validation on EIUC Source and Water Undertaker when compensationCharge is true\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of mandatory data items required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"eiucSource\\\" is required. \\\"waterUndertaker\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": true,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. \"periodStartDate\" accepts correct format DD-MMM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate is correctly formatted for DD-MMM-YYYY\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. \"periodStartDate\" is correct format DD-MM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate is correctly formatted for DD-MM-YYYY\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-04-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. \"periodStartDate\" DD must be valid day",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate must be valid day\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. \"periodStartDate\" MM must be valid month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01--2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10.  \"periodStartDate\" YYYY must be valid year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate YYYY must be valid year\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-20--\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11 \"periodStartDate\" YYYY must be valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate YYYY must be valid year\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. \"periodEndDate\" accepts correct format DD-MMM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate is correctly formatted for DD-MMM-YYYY\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. \"periodEndDate\" accepts correct format DD-MM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate is correctly formatted for DD-MM-YYYY\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-03-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. \"periodEndDate\" DD must be valid day",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid day\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"-03-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15.  \"periodEndDate\" MM must be valid month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31--2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. \"periodEndDate\" YYYY must be valid year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-20--\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. \"periodStartDate\" & \"periodEndDate\" must fall in the same FY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate & periodEndDate to fall in the same FY\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of periodStartDate & periodEndDate to fall in the same FY\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEndFinancialYear\\\" must be [2018]\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2018\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\":false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. \"periodStartDate\" must be less than \"periodEndDate\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be later than periodStartDate\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of periodEndDate must be later than periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be less than \\\"ref:periodEnd\\\"\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2017\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\":false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "19. \"billabledays\" does not accept INT value more than 366",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Billable days takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of Billable days takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" must be less than or equal to 366\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 367,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. \"billabledays\" does not accept INT value less than 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Billable days takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of Billable days takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" must be greater than or equal to 0\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": -1,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "21. \"authorisedDays\" does not accept INT value more than 366",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating authorisedDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of authorisedDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" must be less than or equal to 366\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 367,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. \"authorisedDays\" does not accept INT value less than 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating authorisedDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of authorisedDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" must be greater than or equal to 0\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": -1,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. \"credit\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Credit is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of Credit is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"credit\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": \"test\",\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "24. \"twoPartTariff\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating twoPartTariff is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of twoPartTariff is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"twoPartTariff\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": \"test\",\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. \"compensationCharge\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating compensationCharge is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of compensationCharge is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"compensationCharge\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": \"test\",\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. \"waterUndertaker\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating waterUndertaker is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of waterUndertaker is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"waterUndertaker\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": \"test\",\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. \"section127Agreement\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section127Agreement is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section127Agreement is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section127Agreement\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": \"test\",\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. \"section130Agreement\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section130Agreement is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section130Agreement is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section130Agreement\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": \"test\",\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "29. \"volume\" only accepts number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Volume to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of volume data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" must be a number\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"one\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "30. \"volume\" does not accept boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Volume to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of volume data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" must be a number\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": true,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "31. \"section126Factor\" only accepts number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must be a number\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": 1045,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": \"one\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "32. \"section126Factor\" does not accept boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must be a number\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": 1045,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": true,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "33. \"section126Factor\" does not accept numbers with more than 3 decimal places",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number with up to 3 decimal places\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number with up to 3 decimal places\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must be a number with no more than 3 decimal places\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": 1045,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1.2345,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "34. BigINT Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Check chargeValue output field for BIGINT data type\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": 521548,\r\n    \"source\": \"Kielder\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"High\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Midlands\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "calculate-standalone-pre-sroc-charge",
			"item": [
				{
					"name": "1. Calculate valid Pre-SRoC Charge and verify response data items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating a valid Pre-SRoC Charge\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify sourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.sourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify seasonFactor is returned\", function () {",
									"    pm.expect(response.calculation.seasonFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify lossFactor is returned\", function () {",
									"    pm.expect(response.calculation.lossFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify licenceHolderChargeAgreement is returned\", function () {",
									"    pm.expect(response.calculation.licenceHolderChargeAgreement).to.eql(null);",
									"});",
									"",
									"pm.test(\"Verify chargeElementAgreement is returned\", function () {",
									"    pm.expect(response.calculation.chargeElementAgreement).to.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiucSourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.eiucSourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiuc is returned\", function () {",
									"    pm.expect(response.calculation.eiuc).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify suc is returned\", function () {",
									"    pm.expect(response.calculation.eiucFactor).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "2. Calculate valid Pre-SRoC Charge with mandatory data items only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating a valid Pre-SRoC Charge with mandatory only data items\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify sourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.sourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify seasonFactor is returned\", function () {",
									"    pm.expect(response.calculation.seasonFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify lossFactor is returned\", function () {",
									"    pm.expect(response.calculation.lossFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify licenceHolderChargeAgreement is returned\", function () {",
									"    pm.expect(response.calculation.licenceHolderChargeAgreement).to.eql(null);",
									"});",
									"",
									"pm.test(\"Verify chargeElementAgreement is returned\", function () {",
									"    pm.expect(response.calculation.chargeElementAgreement).to.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiucSourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.eiucSourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiuc is returned\", function () {",
									"    pm.expect(response.calculation.eiuc).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify suc is returned\", function () {",
									"    pm.expect(response.calculation.eiucFactor).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.58\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. \"section126Factor\" is not returned as part of response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verify Section 126 Factor is not returned as part of response\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify abatementAdjustment 126 is not returned\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"abatementAdjustment\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": true,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. \"section127Factor\" is correctly returned as part of response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verify Section 127 Factor is correctly returned as part of response\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Section 127 is correctly returned\", function () {",
									"    pm.expect(response.calculation.chargeElementAgreement).to.eql(\"S127 x 0.5\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Calculate a valid Credit Pre-SRoC Charge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating a valid Credit Pre-SRoC Charge\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify chargeValue is returned as negative\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-\");",
									"});",
									"",
									"pm.test(\"Verify abatementAdjustment 126 is not returned\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"abatementAdjustment\");",
									"});",
									"",
									"pm.test(\"Verify sourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.sourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify seasonFactor is returned\", function () {",
									"    pm.expect(response.calculation.seasonFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify lossFactor is returned\", function () {",
									"    pm.expect(response.calculation.lossFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify licenceHolderChargeAgreement is returned\", function () {",
									"    pm.expect(response.calculation.licenceHolderChargeAgreement).to.eql(null);",
									"});",
									"",
									"pm.test(\"Verify chargeElementAgreement is returned\", function () {",
									"    pm.expect(response.calculation.chargeElementAgreement).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiucSourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.eiucSourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiuc is returned\", function () {",
									"    pm.expect(response.calculation.eiuc).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify suc is returned\", function () {",
									"    pm.expect(response.calculation.eiucFactor).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. \"periodStart\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verify periodStart is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodStart is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. \"periodEnd\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate periodEnd is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodEnd is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" is required. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. \"credit\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate credit is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input credit is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"credit\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. \"billableDays\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate billableDays is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input billableDays is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10. \"authorisedDays\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate authorisedDays is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input authorisedDays is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11. \"volume\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate volume is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input volume is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. \"source\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate source is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input source is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"source\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. \"season\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate season is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input season is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"season\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. \"loss\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate loss is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input loss is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"loss\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15. \"twoPartTariff\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate twoPartTariff is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input twoPartTariff is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"twoPartTariff\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. \"compensationCharge\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate compensationCharge is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input compensationCharge is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"compensationCharge\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. \"regionalChargingArea\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate regionalChargingArea is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input regionalChargingArea is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"regionalChargingArea\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. \"section127Agreement\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate section127Agreement is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input section127Agreement is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section127Agreement\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "19. \"section130Agreement\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate section130Agreement is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input section130Agreement is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section130Agreement\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. \"EIUC Source\" and \"Water Undertaker\" required when \"compensationCharge\" is true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating conditional validation on EIUC Source and Water Undertaker when compensationCharge is true\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of mandatory data items required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"eiucSource\\\" is required. \\\"waterUndertaker\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": true,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "21. \"periodStartDate\" accepts correct format DD-MMM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate is correctly formatted for DD-MMM-YYYY\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. \"periodStartDate\" is correct format DD-MM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate is correctly formatted for DD-MM-YYYY\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-04-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. \"periodStartDate\" DD must be valid day",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate must be valid day\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "24. \"periodStartDate\" MM must be valid month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01--2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. \"periodStartDate\" YYYY must be valid year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate YYYY must be valid year\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-20--\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. \"periodEndDate\" accepts correct format DD-MMM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate YYYY must be valid year\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. \"periodEndDate\" accepts correct format DD-MM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate is correctly formatted for DD-MM-YYYY\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-03-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. \"periodEndDate\" DD must be valid day",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid day\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"-03-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "29. \"periodEndDate\" MM must be valid month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31--2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "30. \"periodEndDate\" YYYY must be valid year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-20--\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "31. \"periodStartDate\" & \"periodEndDate\" must fall in the same FY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate & periodEndDate to fall in the same FY\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of periodStartDate & periodEndDate to fall in the same FY\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEndFinancialYear\\\" must be [2018]\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2018\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.55\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "32. \"periodStartDate\" must be less than \"periodEndDate\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be later than periodStartDate\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of periodEndDate must be later than periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be less than \\\"ref:periodEnd\\\"\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2017\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.55\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "33. \"billabledays\" does not accept INT value more than 366",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating billableDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that billableDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" must be less than or equal to 366\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 367,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "34. \"billabledays\" does not accept INT value less than 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating billableDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that billableDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" must be greater than or equal to 0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": -1,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "35. \"authorisedDays\" does not accept INT value more than 366",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating authorisedDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that authorisedDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" must be less than or equal to 366\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 367,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "36. \"authorisedDays\" does not accept INT value less than 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating authorisedDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that authorisedDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" must be greater than or equal to 0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": -1,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "37. \"credit\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating credit is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that credit is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"credit\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": \"test\",\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "38. \"twoPartTariff\" only accepts a boolean Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating twoPartTariff is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that twoPartTariff is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"twoPartTariff\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": \"test\",\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "39. \"compensationCharge\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating compensationCharge is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that compensationCharge is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"compensationCharge\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": \"test\",\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "40. \"waterUndertaker\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating waterUndertaker is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that waterUndertaker is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"waterUndertaker\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": \"test\",\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "41. \"section127Agreement\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section127Agreement is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that section127Agreement is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section127Agreement\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": \"test\",\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "42. \"section130Agreement\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section130Agreement is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that section130Agreement is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section130Agreement\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": \"test\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "43. \"volume\" only accepts number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Volume to be a number\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of volume data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" must be a number\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"twentytwo\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "44. \"volume\" does not accept boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Volume to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of volume data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" must be a number\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": true,\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "45. \"section126Factor\" only accepts number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must be a number\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"1414.25\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": \"one\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "46. \"section126Factor\" does not accept boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must be a number\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"1414.25\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": true,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "47. \"section126Factor\" does not accept numbers with more than 3 decimal places",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number with up to 3 decimal places\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number with up to 3 decimal places\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must be a number with no more than 3 decimal places\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": 6524,\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1.2345,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "48. BigINT Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Check chargeValue output field for BIGINT data type\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 245,\r\n\t\"authorisedDays\": 245,\r\n    \"volume\": \"588545\",\r\n    \"source\": \"Kielder\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"High\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Midlands\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{systemToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Use to automate refreshing the AWS cognito bearer token in Postman",
					"//",
					"// Thanks to the following sources for helping to put this",
					"// together",
					"// https://nicolaswidart.com/blog/automatically-set-authentication-tokens-in-postman-requests",
					"// https://medium.com/@allen.helton/how-to-automate-oauth2-token-renewal-in-postman-864420d381a0",
					"// https://stackoverflow.com/a/55614206/6117745",
					"// https://docs.aws.amazon.com/cognito/latest/developerguide/token-endpoint.html",
					"",
					"const sdk = require('postman-collection')",
					"",
					"// We need to support requests against endpoints that require different",
					"// credentials. We keep the code generic by referencing the environment",
					"// variables that hold those credentials using these variables. We default",
					"// to the 'system' versions as they will be used in the majority of cases.",
					"let tokenVar = 'systemToken'",
					"let tokenTimestampVar = 'systemTokenTimestamp'",
					"let tokenExpiresInVar = 'systemExpiresIn'",
					"let oauthUserVar = 'systemUser'",
					"let oauthPassVar = 'systemPass'",
					"",
					"const authServiceUrl = pm.environment.get('tokenUrl')",
					"",
					"if (automateToken()) {",
					"  console.log('CHA API - Automating token')",
					"  // Check if the request is to an admin endpoint. It includes so update the variables",
					"",
					"  if (requestRequiresAdmin()) {",
					"    updateEnvironmentReferencesToAdmin()",
					"    console.log('CHA API - Admin path determined. Using admin env vars.')",
					"  }",
					"",
					"  if (tokenRefreshNeeded()) {",
					"    console.log('CHA API - Refresh of token needed')",
					"    refreshToken()",
					"  }",
					"}",
					"",
					"function automateToken () {",
					"  let automate = pm.environment.get('automateToken') || 'true'",
					"",
					"  if (automate === 'true') {",
					"    automate = true",
					"  } else {",
					"    automate = false",
					"  }",
					"",
					"  return automate",
					"}",
					"",
					"function requestRequiresAdmin () {",
					"  const path = pm.request.url.getPath()",
					"  const regex = RegExp('(authorised_systems|regime)', 'i')",
					"",
					"  return regex.test(path)",
					"}",
					"",
					"// Update the values we use to reference to environment variables",
					"// to use the admin alternatives",
					"function updateEnvironmentReferencesToAdmin () {",
					"  tokenVar = 'adminToken'",
					"  tokenTimestampVar = 'adminTokenTimestamp'",
					"  tokenExpiresInVar = 'adminExpiresIn'",
					"  oauthUserVar = 'adminUser'",
					"  oauthPassVar = 'adminPass'",
					"}",
					"",
					"// Compares the current token's timestamp against the current time",
					"// in UTC. If the difference in milliseconds is greater than",
					"// tokenExpiresInAsMilliseconds() then a refresh is needed",
					"function tokenRefreshNeeded () {",
					"  // Date.now() returns the number of milliseconds since 1970-01-01",
					"  const difference = (Date.now() - timestampAsMilliseconds())",
					"",
					"  return difference >= tokenExpiresInAsMilliseconds()",
					"}",
					"",
					"// When we successfully request a token we record a timestamp",
					"// in the environment variables.",
					"function timestampAsMilliseconds () {",
					"  // Set a default in case we don't have a timestamp in the env vars",
					"  let result = Date.UTC(2010, 0, 1)",
					"  const tokenTimestamp = pm.environment.get(tokenTimestampVar)",
					"",
					"  if (tokenTimestamp) {",
					"    result = tokenTimestamp",
					"  }",
					"",
					"  return result",
					"}",
					"",
					"// When we successfully request a token we record how long the token",
					"// will be valid for (expressed as seconds) in the environment variables.",
					"// As we need to deal in milliseconds this function takes that value (or",
					"// a default if the env var doesn't exist) and converts it to millseconds.",
					"function tokenExpiresInAsMilliseconds () {",
					"  // Set a default in case we don't have a timestamp in the env vars",
					"  let result = 3600",
					"  const tokenExpiresIn = pm.environment.get(tokenExpiresInVar)",
					"",
					"  if (tokenExpiresIn) {",
					"    result = tokenExpiresIn",
					"  }",
					"",
					"  return result * 1000",
					"}",
					"",
					"function encodedKeys () {",
					"  const keys = pm.environment.get(oauthUserVar) + ':' + pm.environment.get(oauthPassVar)",
					"",
					"  return CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));",
					"}",
					"",
					"function refreshToken () {",
					"  const tokenRequest = new sdk.Request({",
					"    url: authServiceUrl,",
					"    method: 'POST',",
					"    header: [",
					"      new sdk.Header({",
					"        key: 'content-type',",
					"        value: 'application/x-www-form-urlencoded'",
					"      }),",
					"      new sdk.Header({",
					"        key: 'acccept',",
					"        value: 'application/json'",
					"      }),",
					"      new sdk.Header({",
					"        key: 'Authorization',",
					"        value: 'Basic ' + encodedKeys()",
					"      })",
					"    ],",
					"    body: {",
					"      mode: 'urlencoded',",
					"      urlencoded: [",
					"        { key: 'grant_type', value: 'client_credentials' },",
					"      ]",
					"    }",
					"  })",
					"",
					"  pm.sendRequest(tokenRequest, function (err, response) {",
					"    if (err) {",
					"      throw err",
					"    }",
					"",
					"    if (response.code !== 200) {",
					"      throw new Error('Could not log in.')",
					"    }",
					"",
					"    pm.environment.set(tokenVar, response.json().access_token)",
					"    pm.environment.set(tokenExpiresInVar, response.json().expires_in)",
					"    pm.environment.set(tokenTimestampVar, Date.now());",
					"    console.log(`New token has been set: ${response.json().access_token}`);",
					"  })",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "slug",
			"value": "wrls"
		}
	]
}