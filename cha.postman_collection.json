{
	"info": {
		"_postman_id": "1fe029e2-b0d1-4bd9-9342-3499826ab768",
		"name": "CHA acceptance tests v2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "admin",
			"item": [
				{
					"name": "1. List regimes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Returns correct code', () => {",
									"    pm.expect(pm.response.code).to.equal(200)",
									"})",
									"",
									"// Get and store wrls regime Id for next request",
									"const response = pm.response.json();",
									"const result = response.filter(obj => {",
									"  return obj.slug === 'wrls'",
									"})[0]",
									"",
									"if (result) {",
									"  pm.environment.set(\"regimeId\", result.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/regimes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"regimes"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Show \"wrls\" regime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Returns correct code', () => {",
									"    pm.expect(pm.response.code).to.equal(200)",
									"})",
									"pm.test('Returns the expected regime', () => {",
									"    const body = pm.response.json()",
									"",
									"    pm.expect(body.slug).to.equal('wrls')",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/regimes/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"regimes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{regimeId}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{adminToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "system-user",
			"item": [
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns correct code\", () => {",
									"    pm.expect(pm.response.code).to.equal(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "create-bill-run",
			"item": [
				{
					"name": "1. Create Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region A\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response.billRun.id)\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. billRunId is unique",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region A\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"billRun_id1\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number1\", response.billRun.billRunNumber);\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID of previous Bill Run is not the same as this Bill Run\", function () {\r",
									"    pm.expect(environment.billRun_id).to.not.eql(environment.billRun_id1);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number of previous Bill Run is not the same as this Bill Run\", function () {\r",
									"    pm.expect(environment.billRun_number).to.not.eql(environment.billRun_number1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Create Bill Run - Region B",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region B\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"B\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Create Bill Run - Region E",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region E\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"E\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Create Bill Run - Region N",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region N\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"N\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Create Bill Run - Region S",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region S\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "7. Create Bill Run - Region T",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region T\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"T\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. Create Bill Run - Region W",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region W\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"W\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "9. Create Bill Run - Region Y",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200 or 201\", function() {\r",
									"   pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"Y\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "10. Region code is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Code Missing\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states region is required\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"region\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "11. Region code must be valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Invalid Region Code\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states region is required\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"region\\\" must be one of [A, B, E, N, S, T, W, Y]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"G\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "12. Region code must be a String",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Invalid Region Code\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states region is required\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"region\\\" must be one of [A, B, E, N, S, T, W, Y]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "create-pre-sroc-transaction",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region T\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response.billRun.id)\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"T\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create a valid Pre-SRoC Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"Y10656902A_ExtraRgnY_record\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. Create a valid Pre-SRoC Transaction with Client ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Client ID response is correct\", function () {",
									"    pm.expect(response.transaction.clientId).to.eql(environment.client_id);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"console.log(\"Client ID generated: \" + environment.client_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomClientId = Math.floor((Math.random() * 10000) + 1);\r",
									"const clientId = \"T\" + randomClientId;\r",
									"\r",
									"pm.environment.set(\"client_id\", clientId);\r",
									"\r",
									"console.log(clientId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"Y10656902A_ExtraRgnY_record\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"clientId\": \"{{client_id}}\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. 409 Conflict Error is returned when creating a transaction with Client ID thats already in use",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"New Transaction ID has not been generated\", function () {",
									"    pm.expect(response).not.to.have.property('id');",
									"});",
									"",
									"pm.test(\"Verify error message for Client ID thats already in use\", function () {",
									"    pm.expect(response.message).to.include(`A transaction with Client ID '${environment.client_id}' for Regime 'wrls' already exists.`);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"Y10656902A_ExtraRgnY_record\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"clientId\": \"{{client_id}}\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Create a valid Pre-SRoC Transaction with mandatory data items only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. \"periodStart\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodStart is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. \"periodEnd\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodEnd is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" is required. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. \"credit\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input credit is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"credit\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. \"billableDays\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input billableDays is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10. \"authorisedDays\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input authorisedDays is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11. \"volume\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input volume is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. \"source\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input source is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"source\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. \"season\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input season is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"season\\\" is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. \"loss\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input loss is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"loss\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15. \"twoPartTariff\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input twoPartTariff is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"twoPartTariff\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. \"compensationCharge\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input compensationCharge is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"compensationCharge\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. \"waterUndertaker\" is mandatory when \"compensationCharge\" is true and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input waterUndertaker is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"waterUndertaker\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": true,\r\n    \"eiucSource\": \"Unsupported\",\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. \"regionalChargingArea\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input regionalChargingArea is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"regionalChargingArea\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "19. \"section127Agreement\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input section127Agreement is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section127Agreement\\\" is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. \"section130Agreement\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input section130Agreement is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section130Agreement\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "21. \"customerReference\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input customerReference is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"customerReference\\\" is required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. \"lineDescription\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input lineDescription is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"lineDescription\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. \"licenceNumber\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input licenceNumber is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"licenceNumber\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "24. \"chargePeriod\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input chargePeriod is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"chargePeriod\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. \"region\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input region is required\", function () {",
									"    pm.expect(response.message).to.include(\"Bill run \" + environment.billRun_id + \" is for region T but transaction is for region undefined.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. \"areaCode\" is mandatory and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input areaCode is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"areaCode\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. \"region\" must match Bill Run region",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Region data input\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states Region is does not match Billrun Region\", function () {",
									"    pm.expect(response.message).to.include(\"Bill run \" + environment.billRun_id + \" is for region T but transaction is for region S.\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. \"customerReference\" must be less than or equal 12 chars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying error message states customerReference must be 12 characters or less\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states customerReference must be 12 characters or less\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"customerReference\\\" length must be less than or equal to 12 characters long\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A2\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "29. \"licenceNumber\" must be less than or equal 150 chars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying error message states licenceNumber must be 150 characters or less\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states licenceNumber must be 150 characters or less\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"licenceNumber\\\" length must be less than or equal to 150 characters long\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis pa\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "30. \"areaCode\" must be valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying error message states areaCode must be valid\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states areaCode must be valid\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"areaCode\\\" must be one of [ARCA, AREA, ARNA, CASC, MIDLS, MIDLT, MIDUS, MIDUT, AACOR, AADEV, AANWX, AASWX, NWCEN, NWNTH, NWSTH, HAAR, KAEA, SAAR, AGY2N, AGY2S, AGY3, AGY3N, AGY3S, AGY4N, AGY4S, N, SE, SE1, SE2, SW, ABNRTH, DALES, NAREA, RIDIN, DEFAULT, MULTI]\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCAs\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "31. \"lineDescription\" must be less than or equal 240 chars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying error message states lineDescription must valid\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states lineDescription must be valid\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"lineDescription\\\" length must be less than or equal to 240 characters long\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque euh\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "32. \"subjectToMinimumCharge\" must be a Boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying Subject To Minimum Charge is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message states newLicence must be a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"subjectToMinimumCharge\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"subjectToMinimumCharge\": \"Test\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "33. \"eiuCSource\" is mandatory when \"compensationCharge\" is true and Transaction is not created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input eiucSource is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"eiucSource\\\" is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": true,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "34. \"periodEnd\" must be later or equal to \"periodStartDate\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodEnd is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be less than or equal to \\\"ref:periodEnd\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"02-APR-2020\",\r\n    \"periodEnd\": \"01-APR-2020\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "34. \"periodEnd\" must be later or equal to \"periodStartDate\" Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodEnd is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be less than or equal to \\\"ref:periodEnd\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"02-APR-2020\",\r\n    \"periodEnd\": \"01-APR-2020\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "35. \"periodStart\" must be April 1st 2014 or later",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodEnd is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be greater than or equal to \\\"2014-04-01T00:00:00.000Z\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"31-MAR-2014\",\r\n    \"periodEnd\": \"01-JUN-2015\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "36. Transaction is not created if Ruleset does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodEnd is required\", function () {",
									"    pm.expect(response.message).to.include(\"Ruleset not found, please check periodStart value.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2025\",\r\n    \"periodEnd\": \"31-MAR-2026\",\r\n    \"credit\": false,\r\n    \"billableDays\": 310,\r\n    \"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section127Agreement\": true,\r\n    \"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "37. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "38. Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "39. Approve Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "40. Send Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "41. Bill Run Status is \"billed\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"billed\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "42. Transaction cannot be added to a Billed Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Transaction cannot be added to a Billed Bill Run\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.billRun_id + \" cannot be edited because its status is billed.\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"Y10656902A_ExtraRgnY_record\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "43. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region T\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response.billRun.id)\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"T\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "44. Create a valid Pre-SRoC Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"Y10656902A_ExtraRgnY_record\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "45. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "46. Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "47. Approve Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "48. Send Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "49. Bill Run Status is \"billing_not_required\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"billing_not_required\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "50. Transaction cannot be added to a Billed Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Transaction cannot be added to a Billed Bill Run\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.billRun_id + \" cannot be edited because its status is billing_not_required.\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"Y10656902A_ExtraRgnY_record\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "calculate-pre-sroc-charge-in-transaction",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region T\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response.billRun.id)\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"T\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create a valid Pre-SRoC Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2021\",\r\n    \"periodEnd\": \"31-MAR-2022\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"waterUndertaker\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. \"compensationCharge\" as \"true\" requires \"EIUC Source\" and \"Water Undertaker\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with compensationCharge as true (including EIUC Source and Water Undertaker)\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": true,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. Pre-SRoC Transaction is created when Charge value is 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction when Charge value is 0\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": 0,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Verify conditional validation on \"EIUC Source\" and \"Water Undertaker\" when \"compensationCharge\" is true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verifying conditional validation on EIUC Source and Water Undertaker when compensationCharge is true\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of mandatory data items required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"eiucSource\\\" is required. \\\"waterUndertaker\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": true,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. \"periodStartDate\" accepts correct format DD-MMM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate is correctly formatted for DD-MMM-YYYY\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. \"periodStartDate\" is correct format DD-MM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate is correctly formatted for DD-MM-YYYY\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-04-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. \"periodStartDate\" DD must be valid day",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate must be valid day\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. \"periodStartDate\" MM must be valid month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01--2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10.  \"periodStartDate\" YYYY must be valid year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate YYYY must be valid year\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-20--\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11 \"periodStartDate\" YYYY must be valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate YYYY must be valid year\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. \"periodEndDate\" accepts correct format DD-MMM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate is correctly formatted for DD-MMM-YYYY\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. \"periodEndDate\" accepts correct format DD-MM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate is correctly formatted for DD-MM-YYYY\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-03-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. \"periodEndDate\" DD must be valid day",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid day\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"-03-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15.  \"periodEndDate\" MM must be valid month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31--2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. \"periodEndDate\" YYYY must be valid year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-20--\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. \"periodStartDate\" & \"periodEndDate\" must fall in the same FY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate & periodEndDate to fall in the same FY\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of periodStartDate & periodEndDate to fall in the same FY\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEndFinancialYear\\\" must be [2018]\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2018\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\":false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. \"periodStartDate\" must be less than \"periodEndDate\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be later than periodStartDate\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of periodEndDate must be later than periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be less than or equal to \\\"ref:periodEnd\\\"\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2017\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\":false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "19. \"billabledays\" does not accept INT value more than 366",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Billable days takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of Billable days takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" must be less than or equal to 366\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 367,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. \"billabledays\" does not accept INT value less than 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Billable days takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of Billable days takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" must be greater than or equal to 0\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": -1,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "21. \"authorisedDays\" does not accept INT value more than 366",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating authorisedDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of authorisedDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" must be less than or equal to 366\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 367,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. \"authorisedDays\" does not accept INT value less than 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating authorisedDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of authorisedDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" must be greater than or equal to 0\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": -1,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. \"credit\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Credit is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of Credit is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"credit\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": \"test\",\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "24. \"twoPartTariff\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating twoPartTariff is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of twoPartTariff is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"twoPartTariff\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": \"test\",\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. \"compensationCharge\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating compensationCharge is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of compensationCharge is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"compensationCharge\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": \"test\",\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. \"waterUndertaker\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating waterUndertaker is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of waterUndertaker is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"waterUndertaker\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": \"test\",\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. \"section127Agreement\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section127Agreement is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section127Agreement is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section127Agreement\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": \"test\",\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. \"section130Agreement\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section130Agreement is a boolean\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section130Agreement is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section130Agreement\\\" must be a boolean\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": \"test\",\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "29. \"volume\" only accepts number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Volume to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of volume data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" must be a number\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"one\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "30. \"volume\" does not accept boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Volume to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of volume data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" must be a number\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": true,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "31. \"section126Factor\" only accepts number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must be a number\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": 1045,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": \"one\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "32. \"section126Factor\" does not accept boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must be a number\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": 1045,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": true,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "33. \"section126Factor\" does not accept numbers with more than 3 decimal places",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number with up to 3 decimal places\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number with up to 3 decimal places\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must have no more than 3 decimal places\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": 1045,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1.2345,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "34. \"periodStartDate\" is equal to \"periodEndDate\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"01-APR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\":false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 01-APR-2020\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "35. \"periodStart\" must be April 1st 2014 or later",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodEnd is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be greater than or equal to \\\"2014-04-01T00:00:00.000Z\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"31-MAR-2014\",\r\n    \"periodEnd\": \"01-JUN-2014\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\":false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 01-APR-2020\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "36. Transaction is not created if Ruleset does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodEnd is required\", function () {",
									"    pm.expect(response.message).to.include(\"Ruleset not found, please check periodStart value.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2025\",\r\n    \"periodEnd\": \"31-MAR-2026\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"25125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\":false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 01-APR-2020\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "37. BigINT Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Check chargeValue output field for BIGINT data type\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 365,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": 521548,\r\n    \"source\": \"Kielder\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"High\",  \r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"0\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Midlands\",\r\n    \"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"T1234567890A\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"ExtraRgnY_record1\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "calculate-standalone-pre-sroc-charge",
			"item": [
				{
					"name": "1. Calculate valid Pre-SRoC Charge and verify response data items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating a valid Pre-SRoC Charge\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify sourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.sourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify seasonFactor is returned\", function () {",
									"    pm.expect(response.calculation.seasonFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify lossFactor is returned\", function () {",
									"    pm.expect(response.calculation.lossFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify licenceHolderChargeAgreement is returned\", function () {",
									"    pm.expect(response.calculation.licenceHolderChargeAgreement).to.eql(null);",
									"});",
									"",
									"pm.test(\"Verify chargeElementAgreement is returned\", function () {",
									"    pm.expect(response.calculation.chargeElementAgreement).to.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiucSourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.eiucSourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiuc is returned\", function () {",
									"    pm.expect(response.calculation.eiuc).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify suc is returned\", function () {",
									"    pm.expect(response.calculation.eiucFactor).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "2. Calculate valid Pre-SRoC Charge with mandatory data items only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating a valid Pre-SRoC Charge with mandatory only data items\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify sourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.sourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify seasonFactor is returned\", function () {",
									"    pm.expect(response.calculation.seasonFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify lossFactor is returned\", function () {",
									"    pm.expect(response.calculation.lossFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify licenceHolderChargeAgreement is returned\", function () {",
									"    pm.expect(response.calculation.licenceHolderChargeAgreement).to.eql(null);",
									"});",
									"",
									"pm.test(\"Verify chargeElementAgreement is returned\", function () {",
									"    pm.expect(response.calculation.chargeElementAgreement).to.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiucSourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.eiucSourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiuc is returned\", function () {",
									"    pm.expect(response.calculation.eiuc).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify suc is returned\", function () {",
									"    pm.expect(response.calculation.eiucFactor).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.58\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. \"section126Factor\" is not returned as part of response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verify Section 126 Factor is not returned as part of response\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify abatementAdjustment 126 is not returned\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"abatementAdjustment\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": true,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. \"section127Factor\" is correctly returned as part of response",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verify Section 127 Factor is correctly returned as part of response\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Section 127 is correctly returned\", function () {",
									"    pm.expect(response.calculation.chargeElementAgreement).to.eql(\"S127 x 0.5\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Calculate a valid Credit Pre-SRoC Charge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating a valid Credit Pre-SRoC Charge\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify chargeValue is returned as negative\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"-\");",
									"});",
									"",
									"pm.test(\"Verify abatementAdjustment 126 is not returned\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"abatementAdjustment\");",
									"});",
									"",
									"pm.test(\"Verify sourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.sourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify seasonFactor is returned\", function () {",
									"    pm.expect(response.calculation.seasonFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify lossFactor is returned\", function () {",
									"    pm.expect(response.calculation.lossFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify licenceHolderChargeAgreement is returned\", function () {",
									"    pm.expect(response.calculation.licenceHolderChargeAgreement).to.eql(null);",
									"});",
									"",
									"pm.test(\"Verify chargeElementAgreement is returned\", function () {",
									"    pm.expect(response.calculation.chargeElementAgreement).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiucSourceFactor is returned\", function () {",
									"    pm.expect(response.calculation.eiucSourceFactor).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify eiuc is returned\", function () {",
									"    pm.expect(response.calculation.eiuc).to.not.eql(null);",
									"});",
									"",
									"pm.test(\"Verify suc is returned\", function () {",
									"    pm.expect(response.calculation.eiucFactor).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. \"periodStart\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verify periodStart is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodStart is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. \"periodEnd\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate periodEnd is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodEnd is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" is required. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. \"credit\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate credit is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input credit is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"credit\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. \"billableDays\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate billableDays is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input billableDays is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10. \"authorisedDays\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate authorisedDays is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input authorisedDays is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11. \"volume\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate volume is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input volume is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. \"source\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate source is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input source is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"source\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. \"season\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate season is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input season is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"season\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. \"loss\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate loss is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input loss is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"loss\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15. \"twoPartTariff\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate twoPartTariff is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input twoPartTariff is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"twoPartTariff\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. \"compensationCharge\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate compensationCharge is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input compensationCharge is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"compensationCharge\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. \"regionalChargingArea\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate regionalChargingArea is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input regionalChargingArea is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"regionalChargingArea\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. \"section127Agreement\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate section127Agreement is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input section127Agreement is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section127Agreement\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "19. \"section130Agreement\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validate section130Agreement is mandatory\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input section130Agreement is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section130Agreement\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. \"EIUC Source\" and \"Water Undertaker\" required when \"compensationCharge\" is true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating conditional validation on EIUC Source and Water Undertaker when compensationCharge is true\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of mandatory data items required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"eiucSource\\\" is required. \\\"waterUndertaker\\\" is required\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": true,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "21. \"periodStartDate\" accepts correct format DD-MMM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate is correctly formatted for DD-MMM-YYYY\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. \"periodStartDate\" is correct format DD-MM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate is correctly formatted for DD-MM-YYYY\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-04-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. \"periodStartDate\" DD must be valid day",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate must be valid day\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "24. \"periodStartDate\" MM must be valid month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01--2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. \"periodStartDate\" YYYY must be valid year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate YYYY must be valid year\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-20--\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. \"periodEndDate\" accepts correct format DD-MMM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate YYYY must be valid year\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. \"periodEndDate\" accepts correct format DD-MM-YYYY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate is correctly formatted for DD-MM-YYYY\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-03-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. \"periodEndDate\" DD must be valid day",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid day\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"-03-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "29. \"periodEndDate\" MM must be valid month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31--2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "30. \"periodEndDate\" YYYY must be valid year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be valid month\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of invalid values for periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEnd\\\" must be in [DD-MMM-YYYY, DD-MM-YYYY, YYYY-MM-DD, DD/MM/YYYY, YYYY/MM/DD] format. \\\"periodStart\\\" date references \\\"ref:periodEnd\\\" which must have a valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-20--\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "31. \"periodStartDate\" & \"periodEndDate\" must fall in the same FY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodStartDate & periodEndDate to fall in the same FY\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of periodStartDate & periodEndDate to fall in the same FY\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodEndFinancialYear\\\" must be [2018]\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2018\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.55\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "32. \"periodStartDate\" must be less than or equal to \"periodEndDate\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating periodEndDate must be later than periodStartDate\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of periodEndDate must be later than periodStartDate\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be less than or equal to \\\"ref:periodEnd\\\"\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2017\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.55\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "33. \"billabledays\" does not accept INT value more than 366",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating billableDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that billableDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" must be less than or equal to 366\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 367,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "34. \"billabledays\" does not accept INT value less than 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating billableDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that billableDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"billableDays\\\" must be greater than or equal to 0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": -1,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "35. \"authorisedDays\" does not accept INT value more than 366",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating authorisedDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that authorisedDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" must be less than or equal to 366\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 367,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "36. \"authorisedDays\" does not accept INT value less than 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating authorisedDays takes integer value between 0 and 366\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that authorisedDays takes integer value between 0 and 366\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"authorisedDays\\\" must be greater than or equal to 0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": -1,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "37. \"credit\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating credit is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that credit is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"credit\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": \"test\",\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "38. \"twoPartTariff\" only accepts a boolean Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating twoPartTariff is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that twoPartTariff is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"twoPartTariff\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": \"test\",\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "39. \"compensationCharge\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating compensationCharge is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that compensationCharge is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"compensationCharge\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": \"test\",\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "40. \"waterUndertaker\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating waterUndertaker is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that waterUndertaker is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"waterUndertaker\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": \"test\",\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "41. \"section127Agreement\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section127Agreement is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that section127Agreement is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section127Agreement\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": \"test\",\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "42. \"section130Agreement\" only accepts a boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section130Agreement is a boolean\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication that section130Agreement is a boolean\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section130Agreement\\\" must be a boolean\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"3.5865\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": \"test\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "43. \"volume\" only accepts number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Volume to be a number\");",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of volume data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" must be a number\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"twentytwo\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "44. \"volume\" does not accept boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating Volume to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of volume data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"volume\\\" must be a number\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": true,\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "45. \"section126Factor\" only accepts number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must be a number\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"1414.25\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": \"one\",\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "46. \"section126Factor\" does not accept boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must be a number\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"1414.25\",\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": true,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "47. \"section126Factor\" does not accept numbers with more than 3 decimal places",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Validating section126Factor to be a number with up to 3 decimal places\");",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify error message for indication of section126Factor data input must be a number with up to 3 decimal places\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"section126Factor\\\" must have no more than 3 decimal places\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": 6524,\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1.2345,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "48. \"periodStart\" must be April 1st 2014 or later",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodEnd is required\", function () {",
									"    pm.expect(response.message).to.include(\"\\\"periodStart\\\" must be greater than or equal to \\\"2014-04-01T00:00:00.000Z\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"31-MAR-2014\",\r\n    \"periodEnd\": \"01-JUN-2014\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": 6524,\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "49. Transaction is not calculated if Ruleset does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Verify input periodEnd is required\", function () {",
									"    pm.expect(response.message).to.include(\"Ruleset not found, please check periodStart value.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2025\",\r\n    \"periodEnd\": \"31-MAR-2026\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 214,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": 6524,\r\n    \"source\": \"Supported\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Anglian\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "50. BigINT Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Check chargeValue output field for BIGINT data type\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 245,\r\n\t\"authorisedDays\": 245,\r\n    \"volume\": \"588545\",\r\n    \"source\": \"Kielder\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"High\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Midlands\",\r\n\t\"section126Factor\": 1,\r\n\t\"section127Agreement\": false,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "view-status-generate-summary",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef3 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum3 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"S\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"S\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"S\" + randomCustomerRef2 + \"C\";\r",
									"const customerRef3 = \"S\" + randomCustomerRef3 + \"D\";\r",
									"\r",
									"const licenceNum = \"S\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"S\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"S\" + randomLicenseNum2 + \"_GEN2\";\r",
									"const licenceNum3 = \"S\" + randomLicenseNum3 + \"_GEN3\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"pm.environment.set(\"customer_ref3\", customerRef3);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);\r",
									"pm.environment.set(\"licence_num3\", licenceNum3);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create a valid Pre-SRoC Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"1.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. \"regime\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify 404 error due to missing regime\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2//bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. \"billRunId\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify 404 error due to missing bill run ID\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs//status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Valid \"billRunId\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify 404 error due to invalid bill run ID\");\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run ID is not found in CM database\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.randomBillRunID + \" is unknown.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"\r",
									"\r",
									"pm.environment.set(\"randomBillRunID\", myUUID);\r",
									"\r",
									"console.log(myUUID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{randomBillRunID}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{randomBillRunID}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. Current status of the bill run is returned",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify current status of the Bill Run is returned upon receipt of valid request\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify current status of Bill Run\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"initialised\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. Current status of the bill run is returned",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify current status of the Bill Run is returned upon receipt of valid request\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. Generated Bill Run cannot be regenerated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify bill Run that has already been generated throws error\");\r",
									"\r",
									"pm.test(\"409 error\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify error message that Bill Run has already been generated\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Summary for bill run \" + environment.billRun_id + \" has already been generated.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "11. Bill Run without transactions cannot be generated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify the CM returns error when a Bill Run without transactions is generated\");\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Summary for a Bill Run without transactions cannot be generated\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Summary for bill run \" + environment.billRun_id + \" cannot be generated because it has no transactions.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. Create a valid Pre-SRoC Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"1.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. \"billRunId\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Bill Run is not found - 404 error\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs//generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. \"regime\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify regime is not found - 404 error\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2//bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15. Valid \"billRunId\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify valid billRunId parameter is mandatory\");\r",
									"\r",
									"pm.test(\"Verify Bill Run is not found - 404 error\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify valid billRunId parameter is mandatory\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.randomBillRunID + \" is unknown.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{randomBillRunID}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{randomBillRunID}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "17. Create a valid Pre-SRoC Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"2005\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref2}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref2}}_{{licence_num2}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. Capture Transaction charge value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"charge_value\", response.chargeValue);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "19. Bill Run Status is initialised",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify current status of the Bill Run is initialised\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify current status of Bill Run\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"initialised\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "21. Bill Run Status is generated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify current status of the Bill Run is generated\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. Bill Run and Invoice level summaries are correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is generated\", function () {\r",
									"    pm.expect(response.billRun.status).to.eql(\"generated\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify invoiceCount is 1\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify invoiceValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(environment.charge_value);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify netTotal is not 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(environment.charge_value);\r",
									"});\r",
									"\r",
									"//--------------------------------------------\r",
									"\r",
									"pm.test(\"Verify Invoice level debitLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(environment.charge_value);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(environment.charge_value);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. Create a valid Pre-SRoC Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id1\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"320\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref2}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref2}}_{{licence_num2}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "24. Capture Transaction charge value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"charge_value2\", response.chargeValue);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id1}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. Bill Run Status is back to initialised",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify current status of the Bill Run is initialised\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify current status of Bill Run\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"initialised\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. Bill Run Status is generated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify current status of the Bill Run is generated\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. Bill Run and Invoice level summaries are correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is generated\", function () {\r",
									"    pm.expect(response.billRun.status).to.eql(\"generated\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify creditNoteCount is not 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify invoiceCount is 1\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify invoiceValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(environment.charge_value - environment.charge_value2);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify netTotal is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(environment.charge_value - environment.charge_value2);\r",
									"});\r",
									"\r",
									"//--------------------------------------------\r",
									"\r",
									"pm.test(\"Verify Invoice level debitLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(environment.charge_value);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level creditLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(environment.charge_value2);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level netTotal is 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(environment.charge_value - environment.charge_value2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "29. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "30. Create a valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"1145\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num1}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "31. Capture Transaction charge value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"charge_value3\", response.chargeValue);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "32. Bill Run Status is initialised",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify current status of the Bill Run is initialised\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify current status of Bill Run\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"initialised\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "33. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "34. Bill Run Status is generated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify current status of the Bill Run is generated\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "35. Bill Run and Invoice level summaries are correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
									"\r",
									"function pos_to_neg(num) {\r",
									"    return -Math.abs(num);\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is generated\", function () {\r",
									"    pm.expect(response.billRun.status).to.eql(\"generated\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify creditNoteCount is 1\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify creditNoteValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(environment.charge_value3);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify invoiceCount is 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify invoiceValue is 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify netTotal is not 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(pos_to_neg(environment.charge_value3));\r",
									"});\r",
									"\r",
									"//--------------------------------------------\r",
									"\r",
									"pm.test(\"Verify Invoice level debitLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level creditLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(environment.charge_value3);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(pos_to_neg(environment.charge_value3));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "36. Create a valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id1\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"9985\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref3}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num3}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref3}}_{{licence_num3}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "37. Capture Transaction charge value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"charge_value4\", response.chargeValue);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id1}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "38. Bill Run Status is back to initialised",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify current status of the Bill Run is initialised\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify current status of Bill Run\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"initialised\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "39. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "40. Bill Run Status is generated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify current status of the Bill Run is generated\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "41. Bill Run and Invoice level summaries are correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray1 = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref3)\r",
									"\r",
									"function pos_to_neg(num) {\r",
									"    return -Math.abs(num);\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is generated\", function () {\r",
									"    pm.expect(response.billRun.status).to.eql(\"generated\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify creditNoteCount is 1\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify creditNoteValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(environment.charge_value3);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify invoiceCount is 1\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify invoiceValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(environment.charge_value4);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify netTotal is correct\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(pos_to_neg(environment.charge_value3)+environment.charge_value4);\r",
									"});\r",
									"\r",
									"//--------------------------------------------\r",
									"\r",
									"pm.test(\"Verify Invoice level debitLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(environment.charge_value4);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(environment.charge_value4);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Verify Invoice level debitLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray1.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level creditLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray1.creditLineValue).to.eql(environment.charge_value3);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray1.netTotal).to.eql(pos_to_neg(environment.charge_value3));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "42. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"T\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "43. Create a valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"1145\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num1}}\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "44. Capture Transaction charge value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"charge_value\", response.chargeValue);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "45. Bill Run Status is initialised",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify current status of the Bill Run is initialised\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify current status of Bill Run\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"initialised\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "46. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "47. Bill Run Status is generated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify current status of the Bill Run is generated\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "48. Bill Run and Invoice level summaries are correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is generated\", function () {\r",
									"    pm.expect(response.billRun.status).to.eql(\"generated\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify invoiceCount is 1\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify invoiceValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(environment.charge_value);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify netTotal is not 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(environment.charge_value);\r",
									"});\r",
									"\r",
									"//--------------------------------------------\r",
									"\r",
									"pm.test(\"Verify Invoice level debitLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(environment.charge_value);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(environment.charge_value);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "49. Create a valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"1145\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num1}}\",\r\n    \"region\": \"T\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "50. Capture Transaction charge value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"charge_value1\", response.chargeValue);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "51. Bill Run Status is back to initialised",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify current status of the Bill Run is initialised\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify current status of Bill Run\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"initialised\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "52. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "53. Bill Run Status is generated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify current status of the Bill Run is generated\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "54. Bill Run and Invoice level summaries are correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is generated\", function () {\r",
									"    pm.expect(response.billRun.status).to.eql(\"generated\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify invoiceCount is 1\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify invoiceValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(environment.charge_value+environment.charge_value1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify netTotal is not 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(environment.charge_value+environment.charge_value1);\r",
									"});\r",
									"\r",
									"//--------------------------------------------\r",
									"\r",
									"pm.test(\"Verify Invoice level debitLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(environment.charge_value+environment.charge_value1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(environment.charge_value+environment.charge_value1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "invoice-level-summary",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"Y\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. No invoices are present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"const invoiceArray = response.billRun.invoices",
									"console.log(\"Verify no invoices are present in newly created Bill Run\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No invoices present in the bill run\", function () {",
									"    pm.expect(invoiceArray).to.eql([]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. Calculate & Capture Transaction Charge value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating and capturing transaction charge value\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});",
									"",
									"//Capture charge value",
									"pm.environment.set(\"set_chargeValue\", response.calculation.chargeValue);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. Add a valid Pre-SRoC Transaction to Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID generated: \" + environment.transaction_id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"Y\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"Y\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"Y\" + randomCustomerRef2 + \"C\";\r",
									"\r",
									"const licenceNum = \"Y\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"Y\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"Y\" + randomLicenseNum2 + \"_GEN2\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);\r",
									"\r",
									"console.log(environment.customer_ref)\r",
									"console.log(environment.customer_ref1)\r",
									"console.log(environment.customer_ref2)\r",
									"\r",
									"console.log(environment.licence_num)\r",
									"console.log(environment.licence_num1)\r",
									"console.log(environment.licence_num2)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Verify new invoice has been created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"A new group is created after no matching transactions are found\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)",
									"//Capture invoice Id for the invoice",
									"const invoiceId = invoiceArray.id",
									"",
									"//Capture netTotal ",
									"pm.environment.set(\"net_total\", invoiceArray.netTotal);",
									"",
									"//Capture invoiceId ",
									"pm.environment.set(\"invoice_id\", invoiceArray.id);",
									"",
									"//Verify invoice array is not empty - maybe not neccesary ",
									"pm.test(\"Verify invoice array is not empty\", function () {",
									"    pm.expect(invoiceArray).to.not.eql(null);",
									"});",
									"",
									"//Verify new invoice is created for",
									"pm.test(\"Verify new invoice is created for \" + environment.customer_ref, () => {",
									"    pm.expect(invoiceArray.customerReference).to.eql(environment.customer_ref)",
									"});",
									"",
									"//Verify transaction has been added to the invoice",
									"pm.test(\"Verify transaction has been added to the invoice\", () => {",
									"    pm.expect(invoiceArray.netTotal).to.eql(environment.set_chargeValue)",
									"});",
									"",
									"//Verify licence is correct",
									"pm.test(\"Verify licence is correct\", () => {",
									"    pm.expect(invoiceArray.licences[0].licenceNumber).to.eql(environment.licence_num)",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. Add a valid Pre-SRoC Transaction with matching FY, CustomerRef and Licence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching FY, CustomerRef and Licence and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. Verify transactions are added to the same invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"No new group is created for transactions sharing the same combination of `financial year`, `customer reference` and `licence number`\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref",
									"const invoiceArray = response.billRun.invoices.find(element => element.id === environment.invoice_id)",
									"",
									"//Capture netTotal ",
									"pm.environment.set(\"net_total\", invoiceArray.netTotal);",
									"",
									"",
									"//Verify transaction has been added to the existing invoice",
									"pm.test(\"Verify transaction has been added to existing invoice \", () => {",
									"    pm.expect(invoiceArray.netTotal).to.eql(environment.set_chargeValue + environment.set_chargeValue)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. New Invoice is not created if FY & Customer Ref are the same but Licence Number is different",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching FY, CustomerRef and Licence and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. Verify transactions are added to the same invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"No new group is created for transactions sharing the same `financial year` & `customer reference` but `licence number` is different\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching invoice ID",
									"const invoiceArray = response.billRun.invoices.find(element => element.id === environment.invoice_id)",
									"//Capture licences within invoice",
									"const licenceArray = invoiceArray.licences.find(element => element.licenceNumber === environment.licence_num1)",
									"",
									"",
									"//Verify transaction has been added to the exisiting invoice",
									"pm.test(\"Verify transaction has been added to existing invoice \", () => {",
									"    pm.expect(invoiceArray.netTotal).to.eql(environment.net_total + environment.set_chargeValue)",
									"});",
									"",
									"//Verify licence number has been added to invoice has been added to the existing invoice",
									"pm.test(\"Verify licence number has been added to existing invoice \", () => {",
									"    pm.expect(licenceArray.licenceNumber).to.eql(environment.licence_num1)",
									"});",
									"",
									"//Capture debit line count",
									"pm.environment.set(\"debitLine_count\", invoiceArray.debitLineCount);",
									"",
									"//Capture debit line value",
									"pm.environment.set(\"debitLine_value\", invoiceArray.debitLineValue);",
									"",
									"//Capture credit line count",
									"pm.environment.set(\"creditLine_count\", invoiceArray.creditLineCount);",
									"",
									"//Capture credit line value",
									"pm.environment.set(\"creditLine_value\", invoiceArray.creditLineValue);",
									"",
									"//Capture zero value line count",
									"pm.environment.set(\"zeroLine_count\", invoiceArray.zeroLineCount);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10. Calculate & Capture Transaction Charge value Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating and capturing transaction charge value\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});",
									"",
									"//Capture charge value",
									"pm.environment.set(\"set_chargeValue\", response.calculation.chargeValue);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2016\",\r\n    \"periodEnd\": \"31-MAR-2017\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11. New Invoice is created if Customer Ref  is the same but FY different",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching CustomerRef and different FY and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2016\",\r\n    \"periodEnd\": \"31-MAR-2017\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2017 - 31-MAR-2016\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. Verify transactions are added to a NEW invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"A NEW group is created for transactions same `customer reference` but `financial year` is different\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"//Capture first invoice matching customer ref",
									"const invoiceArray1 = response.billRun.invoices.find(element => element.id === environment.invoice_id)",
									"",
									"",
									"",
									"//Capture second invoice matching financial year",
									"const invoiceArray2 = response.billRun.invoices.find(element => element.financialYear === 2016)",
									"",
									"/*",
									"//Capture licences within invoice",
									"const licenceArray2 = invoiceArray2.licences[0]",
									"*/",
									"",
									"",
									"//Verify transaction has been added to the new invoice",
									"pm.test(\"Verify transaction has been added to new invoice \", () => {",
									"    pm.expect(invoiceArray2.netTotal).to.eql(environment.set_chargeValue)",
									"});",
									"",
									"//Verify licence number has been added to the new invoice",
									"pm.test(\"Verify licence number has been added to existing invoice \", () => {",
									"    pm.expect(invoiceArray2.licences[0].licenceNumber).to.eql(environment.licence_num1)",
									"});",
									"",
									"pm.test(\"Verify debit line value has not changed in first invoice\", () => {",
									"    pm.expect(invoiceArray1.debitLineValue).to.eql(environment.debitLine_value)",
									"});",
									"",
									"pm.test(\"Verify credit line value has not changed in first invoice\", () => {",
									"    pm.expect(invoiceArray1.creditLineValue).to.eql(environment.creditLine_value)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. New Invoice is created if FY is the same but Customer Ref is different",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching CustomerRef and different FY and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2016\",\r\n    \"periodEnd\": \"31-MAR-2017\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"110\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2017 - 31-MAR-2016\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. Verify transactions are added to a NEW invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"A NEW group is created for transactions same `customer reference` but `financial year` is different\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)",
									"//Capture licences within invoice",
									"const licenceArray = invoiceArray.licences",
									"",
									"//Verify transaction has been added to the new invoice",
									"pm.test(\"Verify transaction has been added to new invoice \", () => {",
									"    pm.expect(invoiceArray.netTotal).to.eql(environment.set_chargeValue)",
									"});",
									"",
									"//Verify licence number has been added to the new invoice",
									"pm.test(\"Verify licence number has been added to existing invoice \", () => {",
									"    pm.expect(licenceArray[0].licenceNumber).to.eql(environment.licence_num1)",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15. Create a new Invoice by adding a Transaction with new Customer Ref and Licence Num",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching FY, CustomerRef and Licence and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"3\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref2}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"01-APR-2017 - 31-MAR-2018\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. Capture Invoice debit, credit, zero & netTotal line items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Debit Lines have been updated\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref 2",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)",
									"//Capture invoice Id for the invoice",
									"const invoiceId = invoiceArray.id",
									"",
									"",
									"//Capture debit line count",
									"pm.environment.set(\"debitLine_count\", invoiceArray.debitLineCount);",
									"",
									"//Capture debit line value",
									"pm.environment.set(\"debitLine_value\", invoiceArray.debitLineValue);",
									"",
									"//Capture credit line count",
									"pm.environment.set(\"creditLine_count\", invoiceArray.creditLineCount);",
									"",
									"//Capture credit line value",
									"pm.environment.set(\"creditLine_value\", invoiceArray.creditLineValue);",
									"",
									"//Capture zero value line count",
									"pm.environment.set(\"zeroLine_count\", invoiceArray.zeroLineCount);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. Calculate & Capture Transaction Charge value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating and capturing transaction charge value\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});",
									"",
									"//Capture charge value",
									"pm.environment.set(\"set_chargeValue\", response.calculation.chargeValue);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"2541\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. Add a non-zero value Pre-SRoC Transaction with \"credit\" as false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching FY, CustomerRef and Licence and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"2541\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref2}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"01-APR-2017 - 31-MAR-2018\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "19. Verify Debit lines are updated correctly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verify Debit lines have been updated correctly\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)",
									"//Capture invoice Id for the invoice",
									"const invoiceId = invoiceArray.id",
									"",
									"//Capture net total value",
									"pm.environment.set(\"netTotal_value\", invoiceArray.netTotal);",
									"",
									"//Verify Debit Line value is increased by the value of the transaction",
									"pm.test(\"Verify Debit Line value is increased by the transaction value\", () => {",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(environment.debitLine_value + environment.set_chargeValue)",
									"});",
									"",
									"",
									"//Verify Credit Line value has stayed the same",
									"pm.test(\"Verify Credit Line value has stayed the same\", () => {",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(environment.creditLine_value)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. Update Credit and Debit Line items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Debit Lines have been updated\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref 2",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)",
									"//Capture invoice Id for the invoice",
									"const invoiceId = invoiceArray.id",
									"",
									"",
									"//Capture debit line count",
									"pm.environment.set(\"debitLine_count\", invoiceArray.debitLineCount);",
									"",
									"//Capture debit line value",
									"pm.environment.set(\"debitLine_value\", invoiceArray.debitLineValue);",
									"",
									"//Capture credit line count",
									"pm.environment.set(\"creditLine_count\", invoiceArray.creditLineCount);",
									"",
									"//Capture credit line value",
									"pm.environment.set(\"creditLine_value\", invoiceArray.creditLineValue);",
									"",
									"//Capture zero value line count",
									"pm.environment.set(\"zeroLine_count\", invoiceArray.zeroLineCount);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "21. Calculate & Capture Transaction Charge value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating and capturing transaction charge value\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});",
									"",
									"//Capture positive charge value",
									"var chargeValue = response.calculation.chargeValue",
									"var expChargeValue = Math.abs(chargeValue)",
									"pm.environment.set(\"set_chargeValue\", expChargeValue);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"2541\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. Add a non-zero value Pre-SRoC Transaction with \"credit\" as true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching FY, CustomerRef and Licence and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id2\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID 2 is generated: \" + environment.transaction_id2);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"2541\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref2}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"01-APR-2017 - 31-MAR-2018\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. Verify Credit lines are updated correctly and Debit Lines are unchanged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verify Credit lines have been updated correctly\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)",
									"//Capture invoice Id for the invoice",
									"const invoiceId = invoiceArray.id",
									"",
									"//Verify Credit Line value is increased by the value of the transaction",
									"pm.test(\"Verify Credit Line value is increased by the transaction value\", () => {",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(environment.creditLine_value + environment.set_chargeValue)",
									"});",
									"",
									"//Verify Debit Line value is unchanged",
									"pm.test(\"Verify Debit Line value is unchanged\", () => {",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(environment.debitLine_value)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "24. Update Invoice Line items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Debit Lines have been updated\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref 2",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)",
									"//Capture invoice Id for the invoice",
									"const invoiceId = invoiceArray.id",
									"",
									"//Capture debit line count",
									"pm.environment.set(\"debitLine_count\", invoiceArray.debitLineCount);",
									"",
									"//Capture debit line value",
									"pm.environment.set(\"debitLine_value\", invoiceArray.debitLineValue);",
									"",
									"//Capture credit line count",
									"pm.environment.set(\"creditLine_count\", invoiceArray.creditLineCount);",
									"",
									"//Capture credit line value",
									"pm.environment.set(\"creditLine_value\", invoiceArray.creditLineValue);",
									"",
									"//Capture zero value line count",
									"pm.environment.set(\"zeroLine_count\", invoiceArray.zeroLineCount);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. Add Zero value charge Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching FY, CustomerRef and Licence and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2017\",\r\n    \"periodEnd\": \"31-MAR-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 1,\r\n\t\"authorisedDays\": 1,\r\n    \"volume\": \"0\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref2}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"01-APR-2017 - 31-MAR-2018\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. Verify Zero Value lines are updated correctly and Debit & Credit Lines are unchanged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verify Zero Value lines have been updated correctly\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)",
									"//Capture invoice Id for the invoice",
									"const invoiceId = invoiceArray.id",
									"",
									"//Verify Debit Line value is unchanged",
									"pm.test(\"Verify Debit Line value is unchanged\", () => {",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(environment.debitLine_value)",
									"});",
									"",
									"//Verify Credit Line value is unchanged",
									"pm.test(\"Verify Credit Line value is unchanged\", () => {",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(environment.creditLine_value)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. Calculate & Capture Transaction Charge value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Calculating and capturing transaction charge value\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify chargeValue is returned\", function () {",
									"    pm.expect(response.calculation.chargeValue).to.not.eql(null);",
									"});",
									"",
									"//Capture charge value",
									"pm.environment.set(\"set_chargeValue\", response.calculation.chargeValue);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2014\",\r\n    \"periodEnd\": \"31-MAR-2015\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"9854\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. Add Credit Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction with matching FY, CustomerRef and Licence and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id2\", response.transaction.id);",
									"",
									"console.log(\"Transaction ID 2 is generated: \" + environment.transaction_id2);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2014\",\r\n    \"periodEnd\": \"31-MAR-2015\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"9854\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref2}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"01-APR-2017 - 31-MAR-2018\",\r\n    \"region\": \"Y\",\r\n    \"areaCode\": \"AGY3\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "29. Verify Credit lines are updated correctly and Debit Lines are unchanged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Verify Net totals have been updated correctly and include minus sign\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Capture invoice matching customer ref",
									"const invoiceArray = response.billRun.invoices.find(element => element.financialYear === 2014)",
									"",
									"//Verify Net Total value is correct",
									"pm.test(\"Verify Net Total value is correct\", () => {",
									"    pm.expect(invoiceArray.netTotal).to.eql(environment.set_chargeValue)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "deminimis",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef3 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef4 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef5 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum3 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum4 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum5 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"A\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"A\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"A\" + randomCustomerRef2 + \"C\";\r",
									"const customerRef3 = \"A\" + randomCustomerRef2 + \"D\";\r",
									"const customerRef4 = \"A\" + randomCustomerRef2 + \"E\";\r",
									"const customerRef5 = \"A\" + randomCustomerRef2 + \"F\";\r",
									"\r",
									"const licenceNum = \"A\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"A\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"A\" + randomLicenseNum2 + \"_GEN2\";\r",
									"const licenceNum3 = \"A\" + randomLicenseNum2 + \"_GEN3\";\r",
									"const licenceNum4 = \"A\" + randomLicenseNum2 + \"_GEN4\";\r",
									"const licenceNum5 = \"A\" + randomLicenseNum2 + \"_GEN5\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"pm.environment.set(\"customer_ref3\", customerRef3);\r",
									"pm.environment.set(\"customer_ref4\", customerRef4);\r",
									"pm.environment.set(\"customer_ref5\", customerRef5);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);\r",
									"pm.environment.set(\"licence_num3\", licenceNum3);\r",
									"pm.environment.set(\"licence_num4\", licenceNum4);\r",
									"pm.environment.set(\"licence_num5\", licenceNum5);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create a non-Deminimis Debit Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"5856\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. Debit Invoice and Transaction above £5 are not flagged as deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify debit invoice above £5 is not flagged as deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount is not 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is not 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.not.eql(0);\r",
									"});\r",
									"\r",
									"//--------------------------------------------------------\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is returned and is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is returned and is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is returned and is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Create a Credit Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"65\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. Credit Invoice and Transaction below £0 are not flagged as deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Credit Invoice and Transaction below £0 are not flagged as deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is not 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditLineCount is not 0\", function () {\r",
									"    pm.expect(response.billRun.creditLineCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditLineValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.creditLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is not 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.not.eql(0);\r",
									"});\r",
									"\r",
									"//--------------------------------------------------------\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineCount is returned and is not 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is returned and is not 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is returned and is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "10. Create Zero value transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. Invoice value of 0 is not considered Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Zero Value Invoice and Transaction are not flagged as deminimiss\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary zeroLineCount is not 0\", function () {\r",
									"    pm.expect(response.billRun.zeroLineCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									"//--------------------------------------------------------\r",
									"\r",
									"pm.test(\"Verify zeroValueInvoice is returned and is true\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is returned and is 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "14. Create Transaction with Charge Value of 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. Bill Run Summary excludes Deminimis Invoice value of 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary excludes Invoices and Transactions valued below £5 and positive\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal excludes deminimis and is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. Invoice Level Summary includes deminimis Invoices and Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoices and Transactions valued below £5 and positive are Deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue includes deminimis\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "19. Charge Value of 499 is considered Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"1.583\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"High\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "21. Bill Run Summary excludes deminimis Invoices value of 499",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary excludes Invoices and Transactions valued below £5 and positive\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal excludes deminimis and is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. Invoice Level Summary includes deminimis Invoices and Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoices and Transactions valued below £5 and positive are Deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue includes deminimis\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "24. Charge Value of -1 is not considered Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-AUG-2019\",\r\n    \"periodEnd\": \"31-MAR-2020\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 92,\r\n\t\"authorisedDays\": 214,\r\n    \"volume\": \"0.5\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"All Year\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Wales\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-AUG-2019 - 31-MAR-2020\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. Bill Run Summary shows -1 value invoice is not Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary shows -1 value invoice is not Deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 1\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount is 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue is 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is not 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.not.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. Invoice Level Summary shows -1 value invoice is not Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows -1 value invoice is not Deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(-1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "29. Charge Value of £5.00 is not considered Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"1.584\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"High\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "30. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "31. Bill Run Summary shows £5.00 value invoice is not deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary shows £5.00 value invoice is not deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount is not 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is not 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.not.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "32. Invoice Level Summary shows 500 value invoice is not Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows 500 value invoice is not Deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "33. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "34. Create Transaction that falls below 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"87\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "35. Create Transaction that falls below 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"125\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "36. Create Transaction that falls below 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"38\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num1}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "37. Create Transaction that falls below 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"28\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num2}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "38. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "39. Bill Run Summary excludes Deminimis Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary excludes Deminimis Invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal excludes deminimis and is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "40. Invoice Level Summary shows an Invoice with a net value of below 500 and made up of multiple transactions across different Licenses is flagged as Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows an Invoice with a net value of below 500 and made up of multiple transactions across different Licenses is flagged as Deminimis\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "41. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "42. Create a credit Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"167\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "43. Create Transaction which brings the Invoice to Positive and below 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"365\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "44. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "45. Bill Run Summary excludes Deminimis Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary excludes Deminimis Invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal excludes deminimis and is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "46. Invoice Level Summary shows an Invoice with a net value of below 500 and made up of multiple transactions across different Licenses is flagged as Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows an Invoice with a net value of below 500 and made up of at least 1 credit transaction\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "47. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "48. Create a Zero value Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"0\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "49. Create Transaction which brings the Invoice to Positive and below 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"365\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "50. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "51. Bill Run Summary excludes Deminimis Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary excludes Deminimis Invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal excludes deminimis and is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "52. Invoice Level Summary shows an Invoice with a net value of below 500 and made up of multiple transactions across different Licenses is flagged as Deminimis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows an Invoice with a net value of below 500 and made up at least 1 Zero value transaction\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "53. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "54. Create a Credit Minimum Charge Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"420\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "55. Create a positive (non-min charge) Transaction which brings the Invoice to Positive and below 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"2800\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "56. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "57. Bill Run Summary excludes Deminimis Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary excludes Deminimis Invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue excludes deminimis\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal excludes deminimis and is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "58. Verify Invoice Level Summary Shows deminimis true and Min Charge true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary includes deminimis true and min charge true\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "zero-value-invoices",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef3 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef4 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef5 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum3 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum4 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum5 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"A\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"A\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"A\" + randomCustomerRef2 + \"C\";\r",
									"const customerRef3 = \"A\" + randomCustomerRef2 + \"D\";\r",
									"const customerRef4 = \"A\" + randomCustomerRef2 + \"E\";\r",
									"const customerRef5 = \"A\" + randomCustomerRef2 + \"F\";\r",
									"\r",
									"const licenceNum = \"A\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"A\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"A\" + randomLicenseNum2 + \"_GEN2\";\r",
									"const licenceNum3 = \"A\" + randomLicenseNum2 + \"_GEN3\";\r",
									"const licenceNum4 = \"A\" + randomLicenseNum2 + \"_GEN4\";\r",
									"const licenceNum5 = \"A\" + randomLicenseNum2 + \"_GEN5\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"pm.environment.set(\"customer_ref3\", customerRef3);\r",
									"pm.environment.set(\"customer_ref4\", customerRef4);\r",
									"pm.environment.set(\"customer_ref5\", customerRef5);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);\r",
									"pm.environment.set(\"licence_num3\", licenceNum3);\r",
									"pm.environment.set(\"licence_num4\", licenceNum4);\r",
									"pm.environment.set(\"licence_num5\", licenceNum5);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"W\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create a non-Zero Value Debit Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"5856\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"W\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. Debit Invoice and Transaction are not flagged as Zero Value invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify debit invoice is not flagged as Zero Value invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount is not 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is not 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.not.eql(0);\r",
									"});\r",
									"\r",
									"\r",
									"//--------------------------------------------------------\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Create a Credit Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"65\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. Credit Invoice and Transaction are not flagged as Zero Value Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Credit Invoice and Transaction are not flagged as Zero Value Invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is not 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is not 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is not 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.not.eql(0);\r",
									"});\r",
									"\r",
									"//--------------------------------------------------------\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is returned and is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "10. Create Zero value transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. Bill Run Summary excludes Zero Value Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary excludes Zero Value Invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount excludes Zero Value Invoice\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue excludes Zero Value Invoice\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. Invoice level Summary includes Net Zero Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary excludes Zero Value Invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "15. Create a Debit Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"1.583\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"High\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. Create a Credit Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"1.583\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"High\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. Bill Run Summary excludes Zero Value Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary excludes Zero Value Invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount excludes Zero Value Invoice\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue excludes Zero Value Invoice\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "19.  Invoice level Summary includes Net Zero Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice level Summary includes Net Zero Value\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "21. Create Debit Transaction for Licence 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"87\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. Create Debit Transaction for Licence 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"2159\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. Create Credit Transaction for Licence 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"2001\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "24. Create Zero Value Transaction for Licence 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"0\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. Create Debit Transaction for Licence 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"1850\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num1}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. Create Credit Transaction for Licence 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"2001\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num1}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. Create Zero Value Transaction for Licence 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"0\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. Create Credit Transaction for Licence 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"30-JUL-2018\",\r\n    \"periodEnd\": \"31-OCT-2018\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 151,\r\n\t\"authorisedDays\": 151,\r\n    \"volume\": \"94\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"South West (incl Wessex)\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Test description\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"30-JUL-2018 - 31-OCT-2018\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num2}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"AGY3N\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "29. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "30. Bill Run Summary excludes Zero Value Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary excludes Zero Value Invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount excludes Zero Value Invoice\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue excludes Zero Value Invoice\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount excludes Zero Value Invoice\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue excludes Zero Value Invoice\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "31. Invoice Level Summary includes Zero Value Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary includes Zero Value Invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroLineCount is not 0\", function () {\r",
									"    pm.expect(invoiceArray.zeroLineCount).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "32. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef3 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef4 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef5 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum3 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum4 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum5 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"A\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"A\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"A\" + randomCustomerRef2 + \"C\";\r",
									"const customerRef3 = \"A\" + randomCustomerRef2 + \"D\";\r",
									"const customerRef4 = \"A\" + randomCustomerRef2 + \"E\";\r",
									"const customerRef5 = \"A\" + randomCustomerRef2 + \"F\";\r",
									"\r",
									"const licenceNum = \"A\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"A\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"A\" + randomLicenseNum2 + \"_GEN2\";\r",
									"const licenceNum3 = \"A\" + randomLicenseNum2 + \"_GEN3\";\r",
									"const licenceNum4 = \"A\" + randomLicenseNum2 + \"_GEN4\";\r",
									"const licenceNum5 = \"A\" + randomLicenseNum2 + \"_GEN5\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"pm.environment.set(\"customer_ref3\", customerRef3);\r",
									"pm.environment.set(\"customer_ref4\", customerRef4);\r",
									"pm.environment.set(\"customer_ref5\", customerRef5);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);\r",
									"pm.environment.set(\"licence_num3\", licenceNum3);\r",
									"pm.environment.set(\"licence_num4\", licenceNum4);\r",
									"pm.environment.set(\"licence_num5\", licenceNum5);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"W\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "33. Create a Minimum Charge transaction with a positive sign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"442\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"W\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "34. Create a Minimum Charge transaction with a negative sign in the same group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"442\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"W\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "35. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "36. Bill Run Summary excludes Zero Value Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary excludes Zero Value Invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount excludes Zero Value Invoice\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue excludes Zero Value Invoice\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount excludes Zero Value Invoice\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue excludes Zero Value Invoice\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "37. Invoice Level Summary includes Zero Value Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary includes Zero Value Invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "38. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef3 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef4 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef5 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum3 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum4 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum5 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"A\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"A\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"A\" + randomCustomerRef2 + \"C\";\r",
									"const customerRef3 = \"A\" + randomCustomerRef2 + \"D\";\r",
									"const customerRef4 = \"A\" + randomCustomerRef2 + \"E\";\r",
									"const customerRef5 = \"A\" + randomCustomerRef2 + \"F\";\r",
									"\r",
									"const licenceNum = \"A\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"A\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"A\" + randomLicenseNum2 + \"_GEN2\";\r",
									"const licenceNum3 = \"A\" + randomLicenseNum2 + \"_GEN3\";\r",
									"const licenceNum4 = \"A\" + randomLicenseNum2 + \"_GEN4\";\r",
									"const licenceNum5 = \"A\" + randomLicenseNum2 + \"_GEN5\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"pm.environment.set(\"customer_ref3\", customerRef3);\r",
									"pm.environment.set(\"customer_ref4\", customerRef4);\r",
									"pm.environment.set(\"customer_ref5\", customerRef5);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);\r",
									"pm.environment.set(\"licence_num3\", licenceNum3);\r",
									"pm.environment.set(\"licence_num4\", licenceNum4);\r",
									"pm.environment.set(\"licence_num5\", licenceNum5);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"W\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "39. Create a Minimum Charge transaction with a positive sign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"442\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"W\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "40. Create a Minimum Charge transaction with a negative sign with a different licence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"442\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num1}}\",\r\n    \"region\": \"W\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "41. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "42. Bill Run Summary excludes Zero Value Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run Summary excludes Zero Value Invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount excludes Zero Value Invoice\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue excludes Zero Value Invoice\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount excludes Zero Value Invoice\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue excludes Zero Value Invoice\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "43. Invoice Level Summary includes Zero Value Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary includes Zero Value Invoice\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "44. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef3 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef4 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef5 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum3 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum4 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum5 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"A\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"A\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"A\" + randomCustomerRef2 + \"C\";\r",
									"const customerRef3 = \"A\" + randomCustomerRef2 + \"D\";\r",
									"const customerRef4 = \"A\" + randomCustomerRef2 + \"E\";\r",
									"const customerRef5 = \"A\" + randomCustomerRef2 + \"F\";\r",
									"\r",
									"const licenceNum = \"A\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"A\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"A\" + randomLicenseNum2 + \"_GEN2\";\r",
									"const licenceNum3 = \"A\" + randomLicenseNum2 + \"_GEN3\";\r",
									"const licenceNum4 = \"A\" + randomLicenseNum2 + \"_GEN4\";\r",
									"const licenceNum5 = \"A\" + randomLicenseNum2 + \"_GEN5\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"pm.environment.set(\"customer_ref3\", customerRef3);\r",
									"pm.environment.set(\"customer_ref4\", customerRef4);\r",
									"pm.environment.set(\"customer_ref5\", customerRef5);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);\r",
									"pm.environment.set(\"licence_num3\", licenceNum3);\r",
									"pm.environment.set(\"licence_num4\", licenceNum4);\r",
									"pm.environment.set(\"licence_num5\", licenceNum5);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"W\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "45. Create a non-Zero Value Debit Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"5856\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"W\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "46. Create a new invoice with a non-Zero Value Credit Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"5856\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"W\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "47. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "48. Approve Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "49. Send Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "50. Bill Run Status is \"billed\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"if (response.billRun.status !== \"billed\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "51. Transaction File is created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify bill run status is billed\", function () {\r",
									"    pm.expect(response.billRun.status).to.eql(\"billed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionFileReference is populated\", function () {\r",
									"    pm.expect(response.billRun.transactionFileReference).to.not.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "minimum-charge",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef3 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef4 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef5 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum3 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum4 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum5 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"A\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"A\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"A\" + randomCustomerRef2 + \"C\";\r",
									"const customerRef3 = \"A\" + randomCustomerRef3 + \"D\";\r",
									"const customerRef4 = \"A\" + randomCustomerRef4 + \"E\";\r",
									"const customerRef5 = \"A\" + randomCustomerRef5 + \"F\";\r",
									"\r",
									"const licenceNum = \"A\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"A\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"A\" + randomLicenseNum2 + \"_GEN2\";\r",
									"const licenceNum3 = \"A\" + randomLicenseNum3 + \"_GEN3\";\r",
									"const licenceNum4 = \"A\" + randomLicenseNum4 + \"_GEN4\";\r",
									"const licenceNum5 = \"A\" + randomLicenseNum5 + \"_GEN5\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"pm.environment.set(\"customer_ref3\", customerRef3);\r",
									"pm.environment.set(\"customer_ref4\", customerRef4);\r",
									"pm.environment.set(\"customer_ref5\", customerRef5);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);\r",
									"pm.environment.set(\"licence_num3\", licenceNum3);\r",
									"pm.environment.set(\"licence_num4\", licenceNum4);\r",
									"pm.environment.set(\"licence_num5\", licenceNum5);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create a Transaction with a value below £25 and Minimum Charge set to FALSE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"325\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": false,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. Create a Transaction with a value below -£25 and Minimum Charge set to FALSE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2018\",\r\n    \"periodEnd\": \"31-MAR-2019\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"325\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": false,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. Create a Transaction with Minimum Charge set to True with a Charge Value of over £25",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"3654\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref2}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref2}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Create a Transaction with Minimum Charge set to True with a Charge Value of over -£25",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"3654\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref3}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref3}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. Invoice Level Summary shows Minimum Charge transaction is not created when the transaction value is below £25 and minimum charge set to FALSE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Bill Run Summary shows Minimum Charge transaction is not created when the transaction value is below £25 and minimum charge set to FALSE\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.not.eql(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 2500\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(2500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. Invoice Level Summary shows Minimum Charge transaction is not created when the transaction value is below -£25 and minimum charge set to FALSE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Bill Run Summary shows Minimum Charge transaction is not created when the transaction value is above -£25 and minimum charge set to FALSE\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is not 2500\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.not.eql(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is not 2500\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(-2500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. Invoice Level Summary shows Minimum Charge transaction is not created when the transaction value is above £25",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Bill Run Summary shows Minimum Charge transaction is not created when the transaction value is above £25\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is above 2500\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.be.above(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is above 2500\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.be.above(2500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10. Invoice Level Summary shows Minimum Charge transaction is not created when the transaction value is above -£25",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Bill Run Summary shows Minimum Charge transaction is not created when the transaction value is below -£25\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref3)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is over 2500\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.be.above(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is above 2500\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.be.below(-2500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "12. Create a Transaction with Minimum Charge set to True with a Charge Value of £25 exactly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"443.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. Create a Transaction with Minimum Charge set to True with a Charge Value of -£25 exactly (different invoice)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"443.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15. Bill Run Summary shows Minimum Charge transaction is not created when the transaction value is equal to £25",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Bill Run Summary shows Minimum Charge transaction is not created when the transaction value is equal to £25\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount is 1\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue is 2500\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 1\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. Invoice Level Summary shows Minimum Charge transaction is not created when the transaction value is equal to £25",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows Minimum Charge transaction is not created when transaction value is equal to £25\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"//Capture invoice ID\r",
									"pm.environment.set(\"invoice_id\", invoiceArray.id);\r",
									"\r",
									"//Capture licence ID\r",
									"pm.environment.set(\"licence_id\", invoiceArray.licences.id);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is returned and is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. Invoice Level Summary shows Minimum Charge transaction is not created when the transaction value is equal to -£25",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows Minimum Charge transaction is not created when the transaction value is equal to -£25\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is not 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.not.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is returned and is not 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. Transaction is not Minimum Charge Adjusment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const licenceInfo = response.invoice.licences.find(element => element.licenceNumber === environment.licence_num)\r",
									"const transactionInfo = licenceInfo.transactions[0]\r",
									"\r",
									"console.log(transactionInfo)\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Minimum Charge adjustment field is false\", function () {\r",
									"    pm.expect(transactionInfo.minimumChargeAdjustment).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "19. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "20. Create a Transaction with Minimum Charge set to True with a Charge Value of £0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "21. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. Bill Run Summary shows Minimum Charge transaction is not created when the transaction value is equal to 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Bill Run Summary shows Minimum Charge transaction is not created when the transaction value is equal to 0\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount is 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue is 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. Invoice Level Summary shows Minimum Charge transaction is not created when the transaction value is equal to 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows Minimum Charge transaction is not created when the transaction value is equal to 0\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "24. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "25. Create a positive Minimum Charge transaction with a value of £24.99",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"443\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. Create another positive Minimum Charge transaction with a value of £0.01 to the same group as previous transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. Create a negative Minimum Charge transaction with a value of -£24.99",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"443\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. Create another negative Minimum Charge transaction with a value of -£0.01 to the same group as previous transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "29. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "30. Invoice Level Summary shows Minimum Charge is not applied if multiple transactions in the same group add up to £25 with Minimum Charge set to TRUE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows Minimum Charge is NOT applied if multiple transactions in the same group add up to £25 with Minimum Charge set to TRUE\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is 2500\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is 2500\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(2500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "31. Invoice Level Summary shows Minimum Charge is not applied if multiple transactions in the same group add up to -£25 with Minimum Charge set to TRUE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows Minimum Charge is NOT applied if multiple transactions in the same group add up to £25 with Minimum Charge set to TRUE\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 2500\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is -2500\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(-2500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "32. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "33. Create a positive Transaction with Minimum Charge set to True with a Charge Value of £24.99",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"443\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "34. Create a negative Transaction with Minimum Charge set to True with a Charge Value of -£24.99",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id1\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"443\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num1}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "35. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "36. Bill Run status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "37. Bill Run Summary shows Minimum Charge transaction is created when the transaction value is below £25",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Bill Run Summary shows Minimum Charge transaction is created when the transaction value is below £25\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount is 1\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue is 2500\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 1\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 2500\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "38. Invoice Level Summary shows Minimum Charge transaction is created when the transaction value is below £25",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows Minimum Charge transaction is created when the transaction value is below £25\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"//Capture invoice ID\r",
									"pm.environment.set(\"invoice_id\", invoiceArray.id);\r",
									"\r",
									"//Capture licence ID\r",
									"pm.environment.set(\"licence_id\", invoiceArray.licences[0].id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is 2500\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is 2500\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(2500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "39. Invoice Level Summary shows Minimum Charge transaction is created when the transaction value is above -£25",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows Minimum Charge transaction is created when the transaction value is below £25\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
									"\r",
									"//Capture invoice ID\r",
									"pm.environment.set(\"invoice_id1\", invoiceArray.id);\r",
									"\r",
									"//Capture licence ID\r",
									"pm.environment.set(\"licence_id1\", invoiceArray.licences[0].id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 2500\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is -2500\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(-2500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "40. Minimum Charge is retained in the transaction record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching transaction ID\r",
									"const licenceInfo = response.invoice.licences.find(element => element.id === environment.licence_id)\r",
									"const transactionInfo = licenceInfo.transactions.find(element => element.id === environment.transaction_id)\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Minimum Charge is retained in the transaction record\", function () {\r",
									"    pm.expect(transactionInfo.subjectToMinimumCharge).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "41. Minimum Charge is retained in the transaction record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture original transaction information matching transaction ID to drill into objects  \r",
									"const licenceInfo = response.invoice.licences.find(element => element.id === environment.licence_id1)\r",
									"const transactionInfo = licenceInfo.transactions.find(element => element.id === environment.transaction_id1)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Minimum Charge is retained in the transaction record\", function () {\r",
									"    pm.expect(transactionInfo.subjectToMinimumCharge).to.eql(true);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id1}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "42. Min Charge adjustment transaction is flagged as relating to a minimum charge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture original transaction information matching transaction ID to drill into objects  \r",
									"const licenceInfo = response.invoice.licences.find(element => element.id === environment.licence_id)\r",
									"const transactionInfo = licenceInfo.transactions.find(element => element.id === environment.transaction_id)\r",
									"\r",
									"//Capture Minimum Charge adjustment transaction information\r",
									"const minChargetransactionInfo = licenceInfo.transactions.find(element => element.id !== environment.transaction_id)\r",
									"\r",
									"//Set transaction ID for future referral\r",
									"pm.environment.set(\"transaction_id2\", minChargetransactionInfo.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Transaction ID not null\", function () {\r",
									"    pm.expect(minChargetransactionInfo.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transaction is a Minimum Charge adjustment\", function () {\r",
									"    pm.expect(minChargetransactionInfo.minimumChargeAdjustment).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Minimum Charge adjustment\", function () {\r",
									"    pm.expect(minChargetransactionInfo.subjectToMinimumCharge).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Minimum Charge adjustment value is equal to difference between original transaction and -£25\", function () {\r",
									"    pm.expect(minChargetransactionInfo.chargeValue).to.eql(2500-transactionInfo.chargeValue);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify correct Minimum Charge adjustment line description\", function () {\r",
									"    pm.expect(minChargetransactionInfo.lineDescription).to.eql(\"Minimum Charge Calculation - raised under Schedule 23 of the Environment Act 1995\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Minimum Charge adjustment chargeValue sign is the same as the original transaction\", function () {\r",
									"    pm.expect(minChargetransactionInfo.credit).to.eql(transactionInfo.credit);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "43. Min Charge adjustment transaction is flagged as relating to a minimum charge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture original transaction information matching transaction ID to drill into objects  \r",
									"const licenceInfo = response.invoice.licences.find(element => element.id === environment.licence_id1)\r",
									"const transactionInfo = licenceInfo.transactions.find(element => element.id === environment.transaction_id1)\r",
									"\r",
									"//Capture Minimum Charge adjustment transaction information\r",
									"const minChargetransactionInfo = licenceInfo.transactions.find(element => element.id !== environment.transaction_id1)\r",
									"\r",
									"//Set transaction ID for future referral\r",
									"pm.environment.set(\"transaction_id3\", minChargetransactionInfo.id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Transaction ID not null\", function () {\r",
									"    pm.expect(minChargetransactionInfo.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transaction is a Minimum Charge adjustment\", function () {\r",
									"    pm.expect(minChargetransactionInfo.minimumChargeAdjustment).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Minimum Charge adjustment\", function () {\r",
									"    pm.expect(minChargetransactionInfo.subjectToMinimumCharge).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Minimum Charge adjustment value is equal to difference between original transaction and -£25\", function () {\r",
									"    pm.expect(minChargetransactionInfo.chargeValue).to.eql(2500-transactionInfo.chargeValue);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify correct Minimum Charge adjustment line description\", function () {\r",
									"    pm.expect(minChargetransactionInfo.lineDescription).to.eql(\"Minimum Charge Calculation - raised under Schedule 23 of the Environment Act 1995\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Minimum Charge adjustment chargeValue sign is the same as the original transaction\", function () {\r",
									"    pm.expect(minChargetransactionInfo.credit).to.eql(transactionInfo.credit);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id1}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "44. Capture positive Minimum Charge transaction details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify current status of the Bill Run is returned upon receipt of valid request\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Set transaction details for future referral\r",
									"pm.environment.set(\"region\", response.region);\r",
									"pm.environment.set(\"lineAreaCode\", response.lineAreaCode);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "45. Min Charge adjustment transaction details match parent group transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Region codes match\", function () {\r",
									"    pm.expect(response.region).to.eql(environment.region);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Customer Refs match\", function () {\r",
									"    pm.expect(response.customerReference).to.eql(environment.customer_ref);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Licence nums match\", function () {\r",
									"    pm.expect(response.licence.licenceNumber).to.eql(environment.licence_num);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Area Codes match\", function () {\r",
									"    pm.expect(response.lineAreaCode).to.eql(environment.lineAreaCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Numbers match\", function () {\r",
									"    pm.expect(response.billRun.billRunNumber).to.eql(environment.billRun_number);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id2}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "46. Capture negative Minimum Charge transaction details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Set transaction details for future referral\r",
									"pm.environment.set(\"region\", response.region);\r",
									"pm.environment.set(\"lineAreaCode\", response.lineAreaCode);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id1}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "47. Min Charge adjustment transaction details match parent group transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Region codes match\", function () {\r",
									"    pm.expect(response.region).to.eql(environment.region);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Customer Refs match\", function () {\r",
									"    pm.expect(response.customerReference).to.eql(environment.customer_ref1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Licence nums match\", function () {\r",
									"    pm.expect(response.licence.licenceNumber).to.eql(environment.licence_num1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Area Codes match\", function () {\r",
									"    pm.expect(response.lineAreaCode).to.eql(environment.lineAreaCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Numbers match\", function () {\r",
									"    pm.expect(response.billRun.billRunNumber).to.eql(environment.billRun_number);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id3}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id3}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "48. Positive Min Charge adjustment transaction details are left blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Period Start value is blank\", function () {\r",
									"    pm.expect(response.chargePeriodStart).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Period End value is blank\", function () {\r",
									"    pm.expect(response.chargePeriodEnd).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Authorised days value is blank\", function () {\r",
									"    pm.expect(response.regimeValue5).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Pro-rata days value is blank\", function () {\r",
									"    pm.expect(response.lineAttr3).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Volume value is blank\", function () {\r",
									"    pm.expect(response.lineAttr5).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Source value is blank\", function () {\r",
									"    pm.expect(response.regimeValue6).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Source Factor value is blank\", function () {\r",
									"    pm.expect(response.lineAttr6).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Season value is blank\", function () {\r",
									"    pm.expect(response.regimeValue7).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Season Factor value is blank\", function () {\r",
									"    pm.expect(response.lineAttr7).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Loss value is blank\", function () {\r",
									"    pm.expect(response.regimeValue8).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Loss Factor value is blank\", function () {\r",
									"    pm.expect(response.lineAttr8).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"SUC value is blank\", function () {\r",
									"    pm.expect(response.lineAttr4).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"EIUC value is blank\", function () {\r",
									"    pm.expect(response.lineAttr14).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"EIUC Source value is blank\", function () {\r",
									"    pm.expect(response.regimeValue13).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"EIUC Source Factor value is blank\", function () {\r",
									"    pm.expect(response.lineAttr13).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Regional Charging Area value is blank\", function () {\r",
									"    pm.expect(response.regimeValue15).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Section 130 Agreement value is blank\", function () {\r",
									"    pm.expect(response.regimeValue9).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Section 127 Agreement value is blank\", function () {\r",
									"    pm.expect(response.regimeValue12).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Section 126 Factor value is blank\", function () {\r",
									"    pm.expect(response.regimeValue11).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Licence Holder Charge Agreement value is blank\", function () {\r",
									"    pm.expect(response.lineAttr9).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Charge Element Agreement value is blank\", function () {\r",
									"    pm.expect(response.lineAttr10).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Charge Element ID value is blank\", function () {\r",
									"    pm.expect(response.regimeValue3).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Two Part Tariff value is blank\", function () {\r",
									"    pm.expect(response.regimeValue16).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Compensation Charge value is blank\", function () {\r",
									"    pm.expect(response.regimeValue17).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Water Undertaker value is blank\", function () {\r",
									"    pm.expect(response.regimeValue14).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Transaction Date is blank\", function () {\r",
									"    pm.expect(response.transactionDate).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Transaction Reference is blank\", function () {\r",
									"    pm.expect(response.invoice.transactionReference).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Transaction Reference is blank\", function () {\r",
									"    pm.expect(response.billRun.fileReference).to.eql(null);\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id2}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "49. Negative Min Charge adjustment transaction details are left blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Period Start value is blank\", function () {\r",
									"    pm.expect(response.chargePeriodStart).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Period End value is blank\", function () {\r",
									"    pm.expect(response.chargePeriodEnd).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Authorised days value is blank\", function () {\r",
									"    pm.expect(response.regimeValue5).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Pro-rata days value is blank\", function () {\r",
									"    pm.expect(response.lineAttr3).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Volume value is blank\", function () {\r",
									"    pm.expect(response.lineAttr5).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Source value is blank\", function () {\r",
									"    pm.expect(response.regimeValue6).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Source Factor value is blank\", function () {\r",
									"    pm.expect(response.lineAttr6).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Season value is blank\", function () {\r",
									"    pm.expect(response.regimeValue7).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Season Factor value is blank\", function () {\r",
									"    pm.expect(response.lineAttr7).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Loss value is blank\", function () {\r",
									"    pm.expect(response.regimeValue8).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Loss Factor value is blank\", function () {\r",
									"    pm.expect(response.lineAttr8).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"SUC value is blank\", function () {\r",
									"    pm.expect(response.lineAttr4).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"EIUC value is blank\", function () {\r",
									"    pm.expect(response.lineAttr14).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"EIUC Source value is blank\", function () {\r",
									"    pm.expect(response.regimeValue13).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"EIUC Source Factor value is blank\", function () {\r",
									"    pm.expect(response.lineAttr13).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Regional Charging Area value is blank\", function () {\r",
									"    pm.expect(response.regimeValue15).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Section 130 Agreement value is blank\", function () {\r",
									"    pm.expect(response.regimeValue9).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Section 127 Agreement value is blank\", function () {\r",
									"    pm.expect(response.regimeValue12).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Section 126 Factor value is blank\", function () {\r",
									"    pm.expect(response.regimeValue11).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Licence Holder Charge Agreement value is blank\", function () {\r",
									"    pm.expect(response.lineAttr9).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Charge Element Agreement value is blank\", function () {\r",
									"    pm.expect(response.lineAttr10).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Charge Element ID value is blank\", function () {\r",
									"    pm.expect(response.regimeValue3).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Two Part Tariff value is blank\", function () {\r",
									"    pm.expect(response.regimeValue16).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Compensation Charge value is blank\", function () {\r",
									"    pm.expect(response.regimeValue17).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Water Undertaker value is blank\", function () {\r",
									"    pm.expect(response.regimeValue14).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Transaction Date is blank\", function () {\r",
									"    pm.expect(response.transactionDate).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Transaction Reference is blank\", function () {\r",
									"    pm.expect(response.invoice.transactionReference).to.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Transaction Reference is blank\", function () {\r",
									"    pm.expect(response.billRun.fileReference).to.eql(null);\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id3}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id3}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "50. Approve Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "51. Send Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"billed\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"billed\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "52. Positive Min Charge adjustment transaction date, type, reference and file reference are now populated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Transaction Reference is not blank\", function () {\r",
									"    pm.expect(response.invoice.transactionReference).to.not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Transaction Type is I\", function () {\r",
									"    pm.expect(response.invoice.transactionType).to.eql(\"I\");\r",
									"})\r",
									"\r",
									"pm.test(\"Transaction Reference is not blank\", function () {\r",
									"    pm.expect(response.billRun.fileReference).to.not.eql(null);\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id2}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "53. Negative Min Charge adjustment transaction details are left blank Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Transaction Reference is not blank\", function () {\r",
									"    pm.expect(response.invoice.transactionReference).to.not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Transaction Type is C\", function () {\r",
									"    pm.expect(response.invoice.transactionType).to.eql(\"C\");\r",
									"})\r",
									"\r",
									"pm.test(\"Transaction Reference is not blank\", function () {\r",
									"    pm.expect(response.billRun.fileReference).to.not.eql(null);\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id3}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id3}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "54. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "55. Create a positive Minimum Charge Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "56. Create a positive Minimum Charge Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"243\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "57. Create a positive Minimum Charge Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"44\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "58. Create a negative Minimum Charge Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "59. Create a negative Minimum Charge Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"243\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "60. Create a negative Minimum Charge Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"44\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "61. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "62. Bill Run Summary shows Minimum Charge transaction is created when net group value is below £25",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Bill Run Summary shows Minimum Charge transaction is created when net group value is below £25\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount is 1\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue is 2500\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 1\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 2500\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "63. Invoice Level Summary shows Minimum Charge transaction is created when net group value is below £25",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows Minimum Charge transaction is created when net group value is below £25\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is 2500\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is 2500\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(2500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "64. Invoice Level Summary shows Minimum Charge transaction is created when net group value is above -£25",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice Level Summary shows Minimum Charge transaction is created when net group value is above -£25\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 2500\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is -2500\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(-2500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "65. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "66. Create a positive Minimum Charge transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "67. Create another positive Minimum Charge transaction with different Licence Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num1}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "68. Create a negative Minimum Charge transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num2}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "69. Create another negative Minimum Charge transaction with different Licence Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num3}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num3}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "70. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "71. Bill Run status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "72. Invoice Level Summary shows seperate Minimum Charges are created for transactions with different Licence Numbers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Invoice Level Summary shows seperate Minimum Charges are created for transactions with different Licence Numbers\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is 5000\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is 5000\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(5000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "73. Invoice Level Summary shows seperate Minimum Charges are created for transactions with different Licence Numbers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Invoice Level Summary shows seperate Minimum Charges are created for transactions with different Licence Numbers\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 5000\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is -5000\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(-5000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "74. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "75. Create a Minimum Charge transaction with a positive sign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "76. Create a Minimum Charge transaction with a negative sign in the same group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id1\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "77. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "78. Invoice Level Summary shows seperate Minimum Charges are created for transactions in the same group but with different signs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Invoice Level Summary shows seperate Minimum Charges are created for transactions in the same group but with different signs\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.environment.set(\"invoice_id\", invoiceArray.id)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 2500\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is 2500\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "79. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "80. Create a Minimum Charge transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "81. Calculate Charge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"charge_value\", response.calculation.chargeValue);",
									"pm.environment.set(\"minCharge_value\", 2500 - response.calculation.chargeValue);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "82. Create a Transaction over £25 within the same group but different licence number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id1\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"6521\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num1}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "83. Calculate Charge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"charge_value1\", response.calculation.chargeValue);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"6521\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "84. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "85. Invoice Level Summary shows seperate Minimum Charge is at licence level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"//Capture licence matching licence num\r",
									"const licenceArray = invoiceArray.licences.find(element => element.licenceNumber === environment.licence_num)\r",
									"//Capture licence1 matching licence num1\r",
									"const licenceArray1 = invoiceArray.licences.find(element => element.licenceNumber === environment.licence_num1)\r",
									"\r",
									"\r",
									"pm.environment.set(\"invoice_id\", invoiceArray.id)\r",
									"pm.environment.set(\"licence_id\", licenceArray.id)\r",
									"pm.environment.set(\"licence_id1\", licenceArray1.id)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is correct\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(environment.charge_value + environment.minCharge_value + environment.charge_value1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(environment.charge_value + environment.minCharge_value + environment.charge_value1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "86. Minimum Charge is applied at licence level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture original transaction information matching transaction ID to drill into objects  \r",
									"const licenceInfo = response.invoice.licences.find(element => element.id === environment.licence_id)\r",
									"const licenceInfo1 = response.invoice.licences.find(element => element.id === environment.licence_id1)\r",
									"const transactionInfo = licenceInfo.transactions.find(element => element.id === environment.transaction_id)\r",
									"const transactionInfo1 = licenceInfo1.transactions.find(element => element.id === environment.transaction_id1)\r",
									"const minChargetransactionInfo = licenceInfo.transactions.find(element => element.id !== environment.transaction_id)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Minimum Charge is retained in the transaction record\", function () {\r",
									"    pm.expect(response.invoice.minimumChargeInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify licence \" + environment.licence_num + \" with MinCharge netTotal is correct\", function () {\r",
									"    pm.expect(licenceInfo.netTotal).to.eql(environment.charge_value + environment.minCharge_value);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify licence \" + environment.licence_num1 + \"without MinCharge netTotal is correct\", function () {\r",
									"    pm.expect(licenceInfo1.netTotal).to.eql(environment.charge_value1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Minimum Charge is applied correctly in licence \" + environment.licence_num, function () {\r",
									"    pm.expect(minChargetransactionInfo.minimumChargeAdjustment).to.eql(true);\r",
									"    pm.expect(minChargetransactionInfo.chargeValue).to.eql(environment.minCharge_value)\r",
									"    pm.expect(transactionInfo.minimumChargeAdjustment).to.eql(false);\r",
									"    pm.expect(transactionInfo.chargeValue).to.eql(environment.charge_value);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Minimum Charge is not applied in licence \" + environment.licence_num1, function () {\r",
									"    pm.expect(transactionInfo1.minimumChargeAdjustment).to.eql(false);\r",
									"    pm.expect(transactionInfo1.chargeValue).to.eql(environment.charge_value1)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "87. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "88. Create a Minimum Charge transaction with a positive sign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "89. Calculate Charge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"charge_value\", response.calculation.chargeValue);",
									"pm.environment.set(\"minCharge_value\", 2500 - response.calculation.chargeValue);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "90. Create a Minimum Charge transaction with a negative sign with a different licence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id1\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num1}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "91. Calculate Charge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"charge_value1\", response.calculation.chargeValue);",
									"pm.environment.set(\"minCharge_value1\", -2500 - response.calculation.chargeValue);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "92. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "93. Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "94. Invoice Level Summary shows seperate Minimum Charge is at licence level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"function pos_to_neg(num) {\r",
									"    return -Math.abs(num);\r",
									"}\r",
									"\r",
									"function neg_to_pos(num) {\r",
									"    return Math.abs(num);\r",
									"}\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"//Capture licence matching licence num\r",
									"const licenceArray = invoiceArray.licences.find(element => element.licenceNumber === environment.licence_num)\r",
									"//Capture licence1 matching licence num1\r",
									"const licenceArray1 = invoiceArray.licences.find(element => element.licenceNumber === environment.licence_num1)\r",
									"\r",
									"console.log((environment.charge_value + environment.minCharge_value) + (environment.charge_value1 + environment.minCharge_value1))\r",
									"\r",
									"pm.environment.set(\"invoice_id\", invoiceArray.id)\r",
									"pm.environment.set(\"licence_id\", licenceArray.id)\r",
									"pm.environment.set(\"licence_id1\", licenceArray1.id)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is correct\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(neg_to_pos(environment.charge_value1 + environment.minCharge_value1));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is correct\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(environment.charge_value + environment.minCharge_value);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql((environment.charge_value + environment.minCharge_value) + (environment.charge_value1 + environment.minCharge_value1));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "95. Minimum Charge is applied at licence level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"function pos_to_neg(num) {\r",
									"    return -Math.abs(num);\r",
									"}\r",
									"\r",
									"function neg_to_pos(num) {\r",
									"    return Math.abs(num);\r",
									"}\r",
									"\r",
									"//Capture original transaction information matching transaction ID to drill into objects  \r",
									"const licenceInfo = response.invoice.licences.find(element => element.id === environment.licence_id)\r",
									"const licenceInfo1 = response.invoice.licences.find(element => element.id === environment.licence_id1)\r",
									"const transactionInfo = licenceInfo.transactions.find(element => element.id === environment.transaction_id)\r",
									"const transactionInfo1 = licenceInfo1.transactions.find(element => element.id === environment.transaction_id1)\r",
									"const minChargetransactionInfo = licenceInfo.transactions.find(element => element.id !== environment.transaction_id)\r",
									"const minChargetransactionInfo1 = licenceInfo1.transactions.find(element => element.id !== environment.transaction_id1)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Minimum Charge is retained in the transaction record\", function () {\r",
									"    pm.expect(response.invoice.minimumChargeInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify licence \" + environment.licence_num + \" with MinCharge netTotal is correct\", function () {\r",
									"    pm.expect(licenceInfo.netTotal).to.eql(environment.charge_value + environment.minCharge_value);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify licence \" + environment.licence_num1 + \"with MinCharge netTotal is correct\", function () {\r",
									"    pm.expect(licenceInfo1.netTotal).to.eql(pos_to_neg(environment.charge_value1) + environment.minCharge_value1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Minimum Charge is applied correctly in licence \" + environment.licence_num, function () {\r",
									"    pm.expect(minChargetransactionInfo.minimumChargeAdjustment).to.eql(true);\r",
									"    pm.expect(minChargetransactionInfo.chargeValue).to.eql(environment.minCharge_value)\r",
									"    pm.expect(transactionInfo.minimumChargeAdjustment).to.eql(false);\r",
									"    pm.expect(transactionInfo.chargeValue).to.eql(environment.charge_value);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Minimum Charge is applied correctly in licence \" + environment.licence_num1, function () {\r",
									"    pm.expect(minChargetransactionInfo1.minimumChargeAdjustment).to.eql(true);\r",
									"    pm.expect(minChargetransactionInfo1.chargeValue).to.eql(neg_to_pos(environment.minCharge_value1))\r",
									"    pm.expect(transactionInfo1.minimumChargeAdjustment).to.eql(false);\r",
									"    pm.expect(transactionInfo1.chargeValue).to.eql(neg_to_pos(environment.charge_value1))\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "96. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "97. Create a Minimum Charge transaction with a positive sign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Calculate Charge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"charge_value\", response.calculation.chargeValue);",
									"pm.environment.set(\"minCharge_value\", 2500 - response.calculation.chargeValue);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "98. Create a standard transaction with a negative sign with a different licence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id1\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"8854\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num1}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Calculate Charge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"charge_value1\", response.calculation.chargeValue);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"8854\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n    \"subjectToMinimumCharge\": true,\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "99. Create a standard transaction with a negative sign with a different licence Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id1\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"658\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num2}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Calculate Charge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"charge_value2\", response.calculation.chargeValue);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"658\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/calculate-charge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"calculate-charge"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "100. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "101. Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "102. Invoice Level Summary shows seperate Minimum Charge is at licence level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"function pos_to_neg(num) {\r",
									"    return -Math.abs(num);\r",
									"}\r",
									"\r",
									"function neg_to_pos(num) {\r",
									"    return Math.abs(num);\r",
									"}\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"//Capture licence matching licence num\r",
									"const licenceArray = invoiceArray.licences.find(element => element.licenceNumber === environment.licence_num)\r",
									"//Capture licence1 matching licence num1\r",
									"const licenceArray1 = invoiceArray.licences.find(element => element.licenceNumber === environment.licence_num1)\r",
									"//Capture licence1 matching licence num1\r",
									"const licenceArray2 = invoiceArray.licences.find(element => element.licenceNumber === environment.licence_num2)\r",
									"\r",
									"//console.log((environment.charge_value + environment.minCharge_value) + (environment.charge_value1 + environment.minCharge_value1))\r",
									"\r",
									"pm.environment.set(\"invoice_id\", invoiceArray.id)\r",
									"pm.environment.set(\"licence_id\", licenceArray.id)\r",
									"pm.environment.set(\"licence_id1\", licenceArray1.id)\r",
									"pm.environment.set(\"licence_id2\", licenceArray2.id)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary creditLineValue is correct\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(neg_to_pos(environment.charge_value1));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary debitLineValue is correct\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(environment.charge_value + environment.minCharge_value + environment.charge_value2);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary minimumChargeInvoice is true\", function () {\r",
									"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary deminimisInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary zeroValueInvoice is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice level Summary netTotal is correct\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql((environment.charge_value + environment.minCharge_value + environment.charge_value2) + environment.charge_value1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "view-delete-invoice",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef3 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum3 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const randomClientId = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"A\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"A\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"A\" + randomCustomerRef2 + \"C\";\r",
									"const customerRef3 = \"A\" + randomCustomerRef3 + \"D\";\r",
									"\r",
									"const licenceNum = \"A\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"A\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"A\" + randomLicenseNum2 + \"_GEN2\";\r",
									"const licenceNum3 = \"A\" + randomLicenseNum2 + \"_GEN3\";\r",
									"\r",
									"const clientId = \"A\" + randomClientId + \"CLI\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"pm.environment.set(\"customer_ref3\", customerRef3);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);\r",
									"pm.environment.set(\"licence_num3\", licenceNum3);\r",
									"\r",
									"pm.environment.set(\"client_id\", clientId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create a valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"6658\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false,\r\n    \"clientId\": \"{{client_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. Create a second Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id1\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number1\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"S\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Capture Invoice Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice ID is returned\", function () {\r",
									"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"invoice_id\", invoiceArray.id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. \"invoiceId\" must link to correct Bill Run ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify 409 conflict error due to Invoice ID not linked to bill run ID\");\r",
									"\r",
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice ID not linked to bill run ID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invoice \" + environment.invoice_id + \" is not linked to bill run \" + environment.billRun_id1 + \".\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"\r",
									"\r",
									"pm.environment.set(\"randomInvoiceID\", myUUID);\r",
									"\r",
									"console.log(myUUID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id1}}/invoices/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id1}}",
								"invoices",
								"{{invoice_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. \"invoiceId\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify 404 error due to missing invoice ID\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								""
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. Valid \"invoiceId\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify 404 error due to invalid bill run ID\");\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run ID is not found in CM database\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invoice \" + environment.randomInvoiceID + \" is unknown.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"\r",
									"\r",
									"pm.environment.set(\"randomInvoiceID\", myUUID);\r",
									"\r",
									"console.log(myUUID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{randomInvoiceID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{randomInvoiceID}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. View Invoice returns expected Invoice level items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice ID is correct\", function () {\r",
									"    pm.expect(response.invoice.id).to.eql(environment.invoice_id);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Billrun ID is correct\", function () {\r",
									"    pm.expect(response.invoice.billRunId).to.eql(environment.billRun_id);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify customerReference is correct\", function () {\r",
									"    pm.expect(response.invoice.customerReference).to.eql(environment.customer_ref);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify financialYear is correct\", function () {\r",
									"    pm.expect(response.invoice.financialYear).to.eql(2020);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify deminimisInvoice is present and is false\", function () {\r",
									"    pm.expect(response.invoice.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify zeroValueInvoice is present and is false\", function () {\r",
									"    pm.expect(response.invoice.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify minimumChargeInvoice is present and is false\", function () {\r",
									"    pm.expect(response.invoice.minimumChargeInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionReference is present and null\", function () {\r",
									"    pm.expect(response.invoice.transactionReference).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify netTotal is present and not null\", function () {\r",
									"    pm.expect(response.invoice.netTotal).to.not.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10. View Invoice returns expected Licence level items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const licenceArray = response.invoice.licences.find(element => element.licenceNumber === environment.licence_num)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Licence ID is present\", function () {\r",
									"    pm.expect(licenceArray.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Licence Number is correct\", function () {\r",
									"    pm.expect(licenceArray.licenceNumber).to.eql(environment.licence_num);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify netTotal is present and not null\", function () {\r",
									"    pm.expect(licenceArray.netTotal).to.not.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11. View Invoice returns expected Transaction level items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const transactionArray = response.invoice.licences[0].transactions.find(element => element.id === environment.transaction_id)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Transaction ID is present and not null\", function () {\r",
									"    pm.expect(transactionArray.id).to.eql(environment.transaction_id);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify clientId is correct\", function () {\r",
									"    pm.expect(transactionArray.clientId).to.eql(environment.client_id);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify chargeValue is not null\", function () {\r",
									"    pm.expect(transactionArray.chargeValue).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify credit is present and false\", function () {\r",
									"    pm.expect(transactionArray.credit).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is not null\", function () {\r",
									"    pm.expect(transactionArray.status).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify subjectToMinimumCharge is false\", function () {\r",
									"    pm.expect(transactionArray.subjectToMinimumCharge).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify minimumChargeAdjustment is false\", function () {\r",
									"    pm.expect(transactionArray.minimumChargeAdjustment).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify lineDescription is not null\", function () {\r",
									"    pm.expect(transactionArray.lineDescription).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify periodStart is not null\", function () {\r",
									"    pm.expect(transactionArray.periodStart).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify periodEnd is not null\", function () {\r",
									"    pm.expect(transactionArray.periodEnd).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify compensationCharge is false\", function () {\r",
									"    pm.expect(transactionArray.compensationCharge).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify calculation is not null\", function () {\r",
									"    pm.expect(transactionArray.calculation).to.not.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. \"invoiceId\" must link to correct Bill Run ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Verify 409 conflict error due to Invoice ID not linked to bill run ID\");\r",
									"\r",
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice ID not linked to bill run ID\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invoice \" + environment.invoice_id + \" is not linked to bill run \" + environment.billRun_id1 + \".\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id1}}/invoices/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id1}}",
								"invoices",
								"{{invoice_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. \"invoiceId\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify 404 error due to missing invoice ID\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								""
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. Valid \"invoiceId\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Verify 404 error due to invalid bill run ID\");\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run ID is not found in CM database\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invoice \" + environment.randomInvoiceID + \" is unknown.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"\r",
									"\r",
									"pm.environment.set(\"randomInvoiceID\", myUUID);\r",
									"\r",
									"console.log(myUUID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{randomInvoiceID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{randomInvoiceID}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15. Delete Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. Invoice is confirmed as deleted and not found in DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"if (response.statusCode !== 404) {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"} \r",
									"\r",
									"if (response.statusCode == 404) {\r",
									"    pm.test(\"Status code is 404 not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Verify Invoice ID is not found in CM database\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invoice \" + environment.invoice_id + \" is unknown.\");\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. Transaction is confirmed as deleted and cannot be found in DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice ID is not found in CM database\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"No transaction found with id \" + environment.transaction_id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const randomClientId = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"A\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"A\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"A\" + randomCustomerRef2 + \"C\";\r",
									"\r",
									"const licenceNum = \"A\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"A\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"A\" + randomLicenseNum2 + \"_GEN2\";\r",
									"\r",
									"const clientId = \"A\" + randomClientId + \"CLI\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);\r",
									"\r",
									"pm.environment.set(\"client_id\", clientId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "19. Create a valid Transaction Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id1\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"8876\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false,\r\n    \"clientId\": \"{{client_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. Create another valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id2\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"22\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num1}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false,\r\n    \"subjectToMinimumCharge\": true\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "21. Create another valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id3\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"1\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref2}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref2}}_{{licence_num2}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. Create another valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id4\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"6698\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref3}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num3}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref3}}_{{licence_num3}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "24. Bill Run Summary includes transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray1 = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray2 = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray3 = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref3)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Capture Bill Run net total\r",
									"pm.environment.set(\"net_total\", response.billRun.netTotal);\r",
									"\r",
									"pm.test(\"Verify Invoice ID 1 is returned\", function () {\r",
									"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
									"});\r",
									"pm.environment.set(\"invoice_id1\", invoiceArray.id);\r",
									"\r",
									"pm.test(\"Verify Invoice ID 2 is returned\", function () {\r",
									"    pm.expect(invoiceArray1.id).to.not.eql(null);\r",
									"});\r",
									"pm.environment.set(\"invoice_id2\", invoiceArray1.id);\r",
									"pm.environment.set(\"invoice_net_total\", invoiceArray1.netTotal);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. Delete Invoice 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id2}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. Invoice is confirmed deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"if (response.statusCode !== 404) {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"} \r",
									"\r",
									"if (response.statusCode == 404) {\r",
									"    pm.test(\"Status code is 404 not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Verify Invoice 2 is no longer found in DB\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invoice \" + environment.invoice_id2 + \" is unknown.\");\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id2}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. Bill Run Summary has been updated and does not includes transactions that were deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray1 = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Net totals are updated and correct\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(environment.net_total - environment.invoice_net_total);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice ID 1 is returned\", function () {\r",
									"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice ID 2 is not returned and has been deleted\", function () {\r",
									"    pm.expect(invoiceArray1).to.be.undefined;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. Approve Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "29. Send Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"billed\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"billed\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "30. Invoice is part of sent bill run and cannot be deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id1}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "view-delete-bill-run",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"A\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"A\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"A\" + randomCustomerRef2 + \"C\";\r",
									"\r",
									"const licenceNum = \"A\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"A\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"A\" + randomLicenseNum2 + \"_GEN2\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. \"billRunId\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify 404 error due to missing bill run ID\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs//",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"",
								""
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. Valid \"billRunId\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify 404 error due to invalid bill run ID\");\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run ID is not found in CM database\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.randomBillRunID + \" is unknown.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"\r",
									"\r",
									"pm.environment.set(\"randomBillRunID\", myUUID);\r",
									"\r",
									"console.log(myUUID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{randomBillRunID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{randomBillRunID}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. Bill Run Summary returns expected items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify CM returns Bill Run summary\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run ID is correct\", function () {\r",
									"    pm.expect(response.billRun.id).to.eql(environment.billRun_id);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Billrun Number is correct\", function () {\r",
									"    pm.expect(response.billRun.billRunNumber).to.eql(environment.billRun_number);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Region is correct\", function () {\r",
									"    pm.expect(response.billRun.region).to.eql(\"A\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is initialised\", function () {\r",
									"    pm.expect(response.billRun.status).to.eql(\"initialised\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify creditNoteCount is present and 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify creditNoteValue is present and 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify invoiceCount is present and 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify invoiceValue is present and 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify netTotal is present and 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionFileReference is present and blank\", function () {\r",
									"    pm.expect(response.billRun.transactionFileReference).to.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Create a valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"2345\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. Invoice level summary  returns expected items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify CM returns expected items in Invoice Summary\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice ID is returned\", function () {\r",
									"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify customerReference is returned and is correct\", function () {\r",
									"    pm.expect(invoiceArray.customerReference).to.eql(environment.customer_ref);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Financial Year is returned and is correct\", function () {\r",
									"    pm.expect(invoiceArray.financialYear).to.eql(2020);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify deminimisInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify zeroValueInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify licence ID is returned\", function () {\r",
									"    pm.expect(invoiceArray.licences[0].id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify licence ID is returned and is correct\", function () {\r",
									"    pm.expect(invoiceArray.licences[0].licenceNumber).to.eql(environment.licence_num);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionReference is returned and is null\", function () {\r",
									"    pm.expect(invoiceArray.transactionReference).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify netTotal is returned and is not null\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. Approve Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. Send Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"billed\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"billed\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10. Bill Run Status is \"billed\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"billed\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11. Invoice level summary  returns expected items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify CM returns expected items in Invoice Summary\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice ID is returned\", function () {\r",
									"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify customerReference is returned and is correct\", function () {\r",
									"    pm.expect(invoiceArray.customerReference).to.eql(environment.customer_ref);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Financial Year is returned and is correct\", function () {\r",
									"    pm.expect(invoiceArray.financialYear).to.eql(2020);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify deminimisInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify zeroValueInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify licence ID is returned\", function () {\r",
									"    pm.expect(invoiceArray.licences[0].id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify licence ID is returned and is correct\", function () {\r",
									"    pm.expect(invoiceArray.licences[0].licenceNumber).to.eql(environment.licence_num);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionReference is returned and is not null\", function () {\r",
									"    pm.expect(invoiceArray.transactionReference).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify netTotal is returned and is not null\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.not.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. Sent Bill Runs cannot be deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify sent Bill Run cannot be deleted\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.billRun_id + \" cannot be edited because its status is billed.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "14. Create a valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2018\",\r\n    \"periodEnd\": \"31-MAR-2019\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num1}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. Invoice level summary  returns expected items and includes Net Zero Value transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Invoice level Summary includes Net Zero Value transactions\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice ID is returned\", function () {\r",
									"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify customerReference is returned and is correct\", function () {\r",
									"    pm.expect(invoiceArray.customerReference).to.eql(environment.customer_ref1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Financial Year is returned and is correct\", function () {\r",
									"    pm.expect(invoiceArray.financialYear).to.eql(2018);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify creditLineValue is returned and is 0\", function () {\r",
									"    pm.expect(invoiceArray.creditLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify debitLineValue is returned and is 0\", function () {\r",
									"    pm.expect(invoiceArray.debitLineValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify deminimisInvoice is returned and is false\", function () {\r",
									"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify zeroValueInvoice is returned and is true\", function () {\r",
									"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify netTotal is returned and is 0\", function () {\r",
									"    pm.expect(invoiceArray.netTotal).to.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. Bill Run summary excludes Net Zero Value invoices and transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify Bill Run summary excludes Net Zero Value invoices and transactions\");\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run status is generated\", function () {\r",
									"    pm.expect(response.billRun.status).to.eql(\"generated\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run ID is correct\", function () {\r",
									"    pm.expect(response.billRun.id).to.eql(environment.billRun_id);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount is 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue is 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. \"billRunId\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify 404 error due to missing bill run ID\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs//",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"",
								""
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "19. Valid \"billRunId\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify 404 error due to invalid bill run ID\");\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run ID is not found in CM database\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.randomBillRunID + \" is unknown.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"\r",
									"\r",
									"pm.environment.set(\"randomBillRunID\", myUUID);\r",
									"\r",
									"console.log(myUUID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{randomBillRunID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{randomBillRunID}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. Bill Run is removed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "21. Deleted Bill Run is not found in DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"if (response.statusCode !== 404) {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"} \r",
									"\r",
									"if (response.statusCode == 404) {\r",
									"    pm.test(\"Status code is 404 not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Verify Deleted Bill Run is not found in the DB\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.billRun_id + \" is unknown.\");\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "approve-bill-run",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"A\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"A\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"A\" + randomCustomerRef2 + \"C\";\r",
									"\r",
									"const licenceNum = \"A\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"A\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"A\" + randomLicenseNum2 + \"_GEN2\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create a valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"\r",
									"\r",
									"pm.environment.set(\"randomBillRunID\", myUUID);\r",
									"\r",
									"console.log(myUUID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"5586\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Bill Run is not approved for billing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is generated\", function () {\r",
									"    pm.expect(response.billRun.status).to.not.eql(\"approved\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. Approve Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. Bill Run Status is \"approved\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"approved\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"} \r",
									"   \r",
									"pm.test(\"Status is approved\", function () {\r",
									"pm.expect(response.status).to.eql(\"approved\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. Bill Run is approved for billing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is approved\", function () {\r",
									"    pm.expect(response.billRun.status).to.eql(\"approved\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"A\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"A\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"A\" + randomCustomerRef2 + \"C\";\r",
									"\r",
									"const licenceNum = \"A\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"A\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"A\" + randomLicenseNum2 + \"_GEN2\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "10. Create a valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"8596\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11. Bill Run must have generated status to be approved",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Bill Run must have status of Generated to be approved\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.billRun_id + \" does not have a status of 'generated'.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. Valid \"regimeId\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify 404 error due to missing regime ID\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2//bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. \"billRunId\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify 404 error due to missing Bill Run ID\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs//approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15. Valid \"billRunId\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"console.log(\"Verify 404 error due to invalid bill run ID\");\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run ID is not found in CM database\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.randomBillRunID + \" is unknown.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{randomBillRunID}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{randomBillRunID}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. Approve Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. Send Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. Bill Run Status is \"billed\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"billed\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "19. Billed Bill Runs cannot be approved",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run cannot be approved because its already billed\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.billRun_id + \" cannot be patched because its status is billed.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"A\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"A\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"A\" + randomCustomerRef2 + \"C\";\r",
									"\r",
									"const licenceNum = \"A\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"A\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"A\" + randomLicenseNum2 + \"_GEN2\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "21. Create a valid Zero Value Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. Approve Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "24. Send Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"billing_not_required\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"billing_not_required\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. \"billing_not_required\" bill run cannot be approved",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run cannot be approved because its already billed\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.billRun_id + \" cannot be patched because its status is billing_not_required.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "send-bill-run",
			"item": [
				{
					"name": "1. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef3 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef4 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomCustomerRef5 = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum3 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum4 = Math.floor((Math.random() * 100000) + 1);\r",
									"const randomLicenseNum5 = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"const customerRef = \"A\" + randomCustomerRef + \"A\";\r",
									"const customerRef1 = \"A\" + randomCustomerRef1 + \"B\";\r",
									"const customerRef2 = \"A\" + randomCustomerRef2 + \"C\";\r",
									"const customerRef3 = \"A\" + randomCustomerRef3 + \"D\";\r",
									"const customerRef4 = \"A\" + randomCustomerRef4 + \"E\";\r",
									"const customerRef5 = \"A\" + randomCustomerRef5 + \"F\";\r",
									"\r",
									"const licenceNum = \"A\" + randomLicenseNum + \"_GEN\";\r",
									"const licenceNum1 = \"A\" + randomLicenseNum1 + \"_GEN1\";\r",
									"const licenceNum2 = \"A\" + randomLicenseNum2 + \"_GEN2\";\r",
									"const licenceNum3 = \"A\" + randomLicenseNum3 + \"_GEN3\";\r",
									"const licenceNum4 = \"A\" + randomLicenseNum4 + \"_GEN4\";\r",
									"const licenceNum5 = \"A\" + randomLicenseNum5 + \"_GEN5\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"customer_ref1\", customerRef1);\r",
									"pm.environment.set(\"customer_ref2\", customerRef2);\r",
									"pm.environment.set(\"customer_ref3\", customerRef3);\r",
									"pm.environment.set(\"customer_ref4\", customerRef4);\r",
									"pm.environment.set(\"customer_ref5\", customerRef5);\r",
									"\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									"pm.environment.set(\"licence_num1\", licenceNum1);\r",
									"pm.environment.set(\"licence_num2\", licenceNum2);\r",
									"pm.environment.set(\"licence_num3\", licenceNum3);\r",
									"pm.environment.set(\"licence_num4\", licenceNum4);\r",
									"pm.environment.set(\"licence_num5\", licenceNum5);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Create a valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"\r",
									"\r",
									"pm.environment.set(\"randomBillRunID\", myUUID);\r",
									"\r",
									"console.log(myUUID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"5586\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "3. Bill Run status is \"initialised\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is initialised\", function () {\r",
									"    pm.expect(response.status).to.eql(\"initialised\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "4. \"initialised\" Bill Run cannot be sent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run cannot be sent because its not approved\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.billRun_id + \" does not have a status of 'approved'.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "5. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "6. Bill Run status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is generated\", function () {\r",
									"    pm.expect(response.status).to.eql(\"generated\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "7. \"generated\" Bill Run cannot be sent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run cannot be sent because its not approved\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.billRun_id + \" does not have a status of 'approved'.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "8. Transaction File Reference is blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionFileReference is null\", function () {\r",
									"    pm.expect(response.billRun.transactionFileReference).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice ID is returned\", function () {\r",
									"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"invoice_id\", invoiceArray.id);\r",
									"pm.environment.set(\"licence_id\", invoiceArray.licences[0].id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "9. View Invoice: Transaction Reference is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const licenceArray = response.invoice.licences.find(element => element.id === environment.licence_id)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionReference is null\", function () {\r",
									"    pm.expect(response.invoice.transactionReference).to.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"\r",
									"\r",
									"pm.environment.set(\"randomInvoiceID\", myUUID);\r",
									"\r",
									"console.log(myUUID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10. View Transaction: Transaction Ref is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionReference is null\", function () {\r",
									"    pm.expect(response.invoice.transactionReference).to.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "10. View Transaction: Transaction Status is \"unbilled\" Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionReference is null\", function () {\r",
									"    pm.expect(response.invoice.transactionReference).to.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "11. Approve Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "12. \"regimeId\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 - Not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2//bill-runs/{{billRun_id}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"",
								"bill-runs",
								"{{billRun_id}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "13. \"billRunId\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 - Not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs//send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "14. Valid \"billRunId\" parameter is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 - Not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify valid Bill Run ID is mandatory\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.randomBillRunID + \" is unknown.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{randomBillRunID}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{randomBillRunID}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "15. Send Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"billed\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"billed\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "16. Bill Run Status is \"billed\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"billed\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "17. \"Billed\" Bill Run cannot be re-sent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run ID cannot be resent\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.billRun_id + \" cannot be patched because its status is billed.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "18. Transaction File Reference is not blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionFileReference is not null\", function () {\r",
									"    pm.expect(response.billRun.transactionFileReference).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"transaction_file_ref\", response.billRun.transactionFileReference);\r",
									"\r",
									"pm.test(\"Verify Invoice ID is returned\", function () {\r",
									"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "19. View Invoice: View Transaction: Transaction Reference is not null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const licenceArray = response.invoice.licences.find(element => element.id === environment.licence_id)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionReference is not null\", function () {\r",
									"    pm.expect(response.invoice.transactionReference).to.not.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var myUUID = uuid.v4();\r",
									"\r",
									"\r",
									"pm.environment.set(\"randomInvoiceID\", myUUID);\r",
									"\r",
									"console.log(myUUID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "20. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "21. Create a Zero Value Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id1\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num1}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "22. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "23. Approve Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "24. Send Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"billing_not_required\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"billing_not_required\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "25. Bill Run Status is \"billing_not_required\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Billing is not required due to Net Zero Value Bill Run\", function () {\r",
									"    pm.expect(response.status).to.eql(\"billing_not_required\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "26. Zero Value Transaction File Reference is blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionFileReference is null\", function () {\r",
									"    pm.expect(response.billRun.transactionFileReference).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice ID is returned\", function () {\r",
									"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"invoice_id1\", invoiceArray.id);\r",
									"pm.environment.set(\"licence_id1\", invoiceArray.licences[0].id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "27. View Invoice: Zero Value Transaction Reference is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const licenceArray = response.invoice.licences.find(element => element.id === environment.licence_id1)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionReference is null\", function () {\r",
									"    pm.expect(response.invoice.transactionReference).to.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id1}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "28. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "29. Create a Deminimis Value Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id2\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0.5\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref2}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref2}}_{{licence_num2}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "30. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "31. Approve Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "32. Send Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"billing_not_required\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"billing_not_required\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "33. Bill Run Status is \"billing_not_required\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Billing is not required due to Net Zero Value Bill Run\", function () {\r",
									"    pm.expect(response.status).to.eql(\"billing_not_required\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "34. Bill Run Transaction File Reference is blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount is 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue is 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionFileReference is null\", function () {\r",
									"    pm.expect(response.billRun.transactionFileReference).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice ID is returned\", function () {\r",
									"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"invoice_id2\", invoiceArray.id);\r",
									"pm.environment.set(\"licence_id2\", invoiceArray.licences[0].id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "35. Deminimis Invoice Transaction Reference is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const licenceArray = response.invoice.licences.find(element => element.id === environment.licence_id2)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionReference is null\", function () {\r",
									"    pm.expect(response.invoice.transactionReference).to.eql(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id2}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "36. Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"W\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "37. Create a valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id3\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2014\",\r\n    \"periodEnd\": \"31-MAR-2015\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"2569\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref3}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num3}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref3}}_{{licence_num3}}\",\r\n    \"region\": \"W\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "38. Create a valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id4\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2014\",\r\n    \"periodEnd\": \"31-MAR-2015\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"2569\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref3}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num3}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref3}}_{{licence_num3}}\",\r\n    \"region\": \"W\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "39. Create a valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id5\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2014\",\r\n    \"periodEnd\": \"31-MAR-2015\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"1250\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref4}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num4}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref4}}_{{licence_num4}}\",\r\n    \"region\": \"W\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"subjectToMinimumCharge\": true,\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "40. Create a valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Creating a Transaction and adding to Bill run\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id6\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2014\",\r\n    \"periodEnd\": \"31-MAR-2015\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"1250\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Very Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref4}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num4}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref4}}_{{licence_num4}}\",\r\n    \"region\": \"W\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"subjectToMinimumCharge\": true,\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "41. Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "42. Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "43. Approve Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "44. Send Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"billing_not_required\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"billing_not_required\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "45. Bill Run Status is \"billing_not_required\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Billing is not required due to Net Zero Value Bill Run\", function () {\r",
									"    pm.expect(response.status).to.eql(\"billing_not_required\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "46. Bill Run Transaction File Reference is blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const invoiceArray1 = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref3)\r",
									"const invoiceArray2 = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref4)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteCount is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary creditNoteValue is 0\", function () {\r",
									"    pm.expect(response.billRun.creditNoteValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceCount is 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceCount).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary invoiceValue is 0\", function () {\r",
									"    pm.expect(response.billRun.invoiceValue).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Bill Run Summary netTotal is 0\", function () {\r",
									"    pm.expect(response.billRun.netTotal).to.eql(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionFileReference is null\", function () {\r",
									"    pm.expect(response.billRun.transactionFileReference).to.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice ID is returned\", function () {\r",
									"    pm.expect(invoiceArray1.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Invoice ID is returned\", function () {\r",
									"    pm.expect(invoiceArray2.id).to.not.eql(null); \r",
									"});\r",
									"\r",
									"pm.environment.set(\"invoice_id3\", invoiceArray1.id);\r",
									"pm.environment.set(\"licence_id3\", invoiceArray1.licences[0].id);\r",
									"\r",
									"pm.environment.set(\"invoice_id4\", invoiceArray2.id);\r",
									"pm.environment.set(\"licence_id4\", invoiceArray2.licences[0].id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "47. Transaction Reference is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const licenceArray = response.invoice.licences.find(element => element.id === environment.licence_id3)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionReference is null\", function () {\r",
									"    pm.expect(response.invoice.transactionReference).to.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id3}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id3}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "48. Transaction Reference is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"//Capture invoice matching customer ref\r",
									"const licenceArray = response.invoice.licences.find(element => element.id === environment.licence_id4)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionReference is null\", function () {\r",
									"    pm.expect(response.invoice.transactionReference).to.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{invoice_id4}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"invoices",
								"{{invoice_id4}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "change-customer-details",
			"item": [
				{
					"name": "1. \"region\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states region is required\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"region\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Huge Factory Ltd\",\r\n  \"addressLine1\": \"1 Monster Lane\",\r\n  \"addressLine2\": \"High Town\",\r\n  \"addressLine3\": \"Chigley\",\r\n  \"addressLine4\": \"Chigley\",\r\n  \"addressLine5\": \"something\",\r\n  \"addressLine6\": \"something\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Valid \"region\" is required",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states a valid region is required\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"region\\\" must be one of [A, B, E, N, S, T, W, Y]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"WERS\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Huge Factory Ltd\",\r\n  \"addressLine1\": \"1 Monster Lane\",\r\n  \"addressLine2\": \"High Town\",\r\n  \"addressLine3\": \"Chigley\",\r\n  \"addressLine4\": \"Chigley\",\r\n  \"addressLine5\": \"something\",\r\n  \"addressLine6\": \"something\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. \"customerRef\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states customerReference is required\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"customerReference\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"S\",\r\n  \"customerName\": \"Huge Factory Ltd\",\r\n  \"addressLine1\": \"1 Monster Lane\",\r\n  \"addressLine2\": \"High Town\",\r\n  \"addressLine3\": \"Chigley\",\r\n  \"addressLine4\": \"Chigley\",\r\n  \"addressLine5\": \"something\",\r\n  \"addressLine6\": \"something\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. \"customerName\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states customerName is required\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"customerName\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"S\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"addressLine1\": \"1 Monster Lane\",\r\n  \"addressLine2\": \"High Town\",\r\n  \"addressLine3\": \"Chigley\",\r\n  \"addressLine4\": \"Chigley\",\r\n  \"addressLine5\": \"something\",\r\n  \"addressLine6\": \"something\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. \"addressLine1\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states addressLine1 is required\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"addressLine1\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"S\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Huge Factory Ltd\",\r\n  \"addressLine2\": \"High Town\",\r\n  \"addressLine3\": \"Chigley\",\r\n  \"addressLine4\": \"Chigley\",\r\n  \"addressLine5\": \"something\",\r\n  \"addressLine6\": \"something\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. \"postcode\" is mandatory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states postcode is required\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"postcode\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"A\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Huge Factory Ltd\",\r\n  \"addressLine1\": \"High Town Road\",\r\n  \"addressLine2\": \"High Town\",\r\n  \"addressLine3\": \"Chigley\",\r\n  \"addressLine4\": \"\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "7. \"customerRef\" accepts max 12 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"S\",\r\n  \"customerReference\": \"A12345678912\",\r\n  \"customerName\": \"Fox McCloud\",\r\n  \"addressLine1\": \"1 Slippy's Hit Lane\",\r\n  \"addressLine2\": \"Corneria City\",\r\n  \"addressLine3\": \"Lylat\",\r\n  \"addressLine4\": \"\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "8. \"customerRef\" does not accept more than 12 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states customerReference must be less than 12 Characters long\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"customerReference\\\" length must be less than or equal to 12 characters long\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"S\",\r\n  \"customerReference\": \"A123456789123\",\r\n  \"customerName\": \"Fox McCloud\",\r\n  \"addressLine1\": \"1 Slippy's Hit Lane\",\r\n  \"addressLine2\": \"Corneria City\",\r\n  \"addressLine3\": \"Lylat\",\r\n  \"addressLine4\": \"\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "9. \"customerName\" accepts max 360 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"A\",\r\n  \"customerReference\": \"ABCD1234\",\r\n  \"customerName\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu\",\r\n  \"addressLine1\": \"1 Slippy's Hit Lane\",\r\n  \"addressLine2\": \"Corneria City\",\r\n  \"addressLine3\": \"Lylat\",\r\n  \"addressLine4\": \"\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "10. \"customerName\" does not accept more than 360 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states customerName must be less than 360 Characters long\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"customerName\\\" length must be less than or equal to 360 characters long\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"S\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcud\",\r\n  \"addressLine1\": \"1 Slippy's Hit Lane\",\r\n  \"addressLine2\": \"Corneria City\",\r\n  \"addressLine3\": \"Lylat\",\r\n  \"addressLine4\": \"\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "11. \"addressLine1\" accepts max 240 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"A\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Fox McCloud\",\r\n  \"addressLine1\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu\",\r\n  \"addressLine2\": \"Corneria City\",\r\n  \"addressLine3\": \"Lylat\",\r\n  \"addressLine4\": \"\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "12. \"addressLine1\" does not accept more than 240 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states addressLine1 must be less than 240 Characters long\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"addressLine1\\\" length must be less than or equal to 240 characters long\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"S\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Fox McCloud\",\r\n  \"addressLine1\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu,\",\r\n  \"addressLine2\": \"Corneria City\",\r\n  \"addressLine3\": \"Lylat\",\r\n  \"addressLine4\": \"\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "13. \"addressLine2\" accepts max 240 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"A\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Fox McCloud\",\r\n  \"addressLine1\": \"1 Slippy's Hit Lane\",\r\n  \"addressLine2\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu\",\r\n  \"addressLine3\": \"Lylat\",\r\n  \"addressLine4\": \"\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "14. \"addressLine2\" does not accept more than 240 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states addressLine2 must be less than 12 Characters long\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"addressLine2\\\" length must be less than or equal to 240 characters long\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"S\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Fox McCloud\",\r\n  \"addressLine1\": \"1 Slippy's Hit Lane\",\r\n  \"addressLine2\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu,\",\r\n  \"addressLine3\": \"Lylat\",\r\n  \"addressLine4\": \"\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "15. \"addressLine3\" accepts max 240 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"A\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Fox McCloud\",\r\n  \"addressLine1\": \"1 Slippy's Hit Lane\",\r\n  \"addressLine2\": \"Corneria City\",\r\n  \"addressLine3\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu\",\r\n  \"addressLine4\": \"Lylat\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "16. \"addressLine3\" does not accept more than 240 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states addressLine3 must be less than 240 Characters long\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"addressLine3\\\" length must be less than or equal to 240 characters long\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"S\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Fox McCloud\",\r\n  \"addressLine1\": \"1 Slippy's Hit Lane\",\r\n  \"addressLine2\": \"Corneria City\",\r\n  \"addressLine3\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu,\",\r\n  \"addressLine4\": \"Lylat\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "17. \"addressLine4\" accepts max 240 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"A\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Fox McCloud\",\r\n  \"addressLine1\": \"1 Slippy's Hit Lane\",\r\n  \"addressLine2\": \"Corneria City\",\r\n  \"addressLine3\": \"Lylat\",\r\n  \"addressLine4\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "18. \"addressLine4\" does not accept more than 240 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states addressLine4 must be less than 240 Characters long\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"addressLine4\\\" length must be less than or equal to 240 characters long\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"S\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Fox McCloud\",\r\n  \"addressLine1\": \"1 Slippy's Hit Lane\",\r\n  \"addressLine2\": \"Corneria City\",\r\n  \"addressLine3\": \"Lylat\",\r\n  \"addressLine4\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu,\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "19. \"addressLine5\" accepts max 60 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"A\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Fox McCloud\",\r\n  \"addressLine1\": \"1 Slippy's Hit Lane\",\r\n  \"addressLine2\": \"Corneria City\",\r\n  \"addressLine3\": \"Lylat\",\r\n  \"addressLine4\": \"\",\r\n  \"addressLine5\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Ae\",\r\n  \"addressLine6\": \"\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "20. \"addressLine5\" does not accept more than 60 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states addressLine5 must be less than 60 Characters long\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"addressLine5\\\" length must be less than or equal to 60 characters long\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"S\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Fox McCloud\",\r\n  \"addressLine1\": \"1 Slippy's Hit Lane\",\r\n  \"addressLine2\": \"Corneria City\",\r\n  \"addressLine3\": \"Lylat\",\r\n  \"addressLine4\": \"\",\r\n  \"addressLine5\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aed\",\r\n  \"addressLine6\": \"\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "21. \"addressLine6\" accepts max 60 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"A\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Fox McCloud\",\r\n  \"addressLine1\": \"1 Slippy's Hit Lane\",\r\n  \"addressLine2\": \"Corneria City\",\r\n  \"addressLine3\": \"Lylat\",\r\n  \"addressLine4\": \"\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Ae\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "22. \"addressLine6\" does not accept more than 60 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states addressLine6 must be less than 60 Characters long\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"addressLine6\\\" length must be less than or equal to 60 characters long\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"S\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Fox McCloud\",\r\n  \"addressLine1\": \"1 Slippy's Hit Lane\",\r\n  \"addressLine2\": \"Corneria City\",\r\n  \"addressLine3\": \"Lylat\",\r\n  \"addressLine4\": \"\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aed\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "23. \"postcode\" accepts max 60 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"A\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Fox McCloud\",\r\n  \"addressLine1\": \"1 Slippy's Hit Lane\",\r\n  \"addressLine2\": \"Corneria City\",\r\n  \"addressLine3\": \"Lylat\",\r\n  \"addressLine4\": \"\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"\",\r\n  \"postcode\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Ae\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "24. \"postcode\" does not accept more than 60 Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message states postcode must be less than 60 Characters long\", function () {\r",
									"    pm.expect(response.message).to.include(\"\\\"postcode\\\" length must be less than or equal to 60 characters long\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"regime\": \"wrls\",\r\n  \"region\": \"S\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Fox McCloud\",\r\n  \"addressLine1\": \"1 Slippy's Hit Lane\",\r\n  \"addressLine2\": \"Corneria City\",\r\n  \"addressLine3\": \"Lylat\",\r\n  \"addressLine4\": \"\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"\",\r\n  \"postcode\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aen\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "25. Customer Details are added to the queue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"\r",
									"const customerRef = \"A\" + randomCustomerRef + \"A\";\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"region\": \"A\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Huge Factory Ltd\",\r\n  \"addressLine1\": \"2 Monster Lane\",\r\n  \"addressLine2\": \"High Town\",\r\n  \"addressLine4\": \"Chigley\",\r\n  \"addressLine5\": \"something\",\r\n  \"addressLine6\": \"something\",\r\n  \"postcode\": \"bs45df\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				},
				{
					"name": "26. Previous Customer Details can be updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"region\": \"A\",\r\n  \"customerReference\": \"{{customer_ref}}\",\r\n  \"customerName\": \"Fox McCloud\",\r\n  \"addressLine1\": \"1 Slippy's Hit Lane\",\r\n  \"addressLine2\": \"Corneria City\",\r\n  \"addressLine4\": \"Lylat\",\r\n  \"addressLine5\": \"\",\r\n  \"addressLine6\": \"\",\r\n  \"postcode\": \"bs235rf\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/customer-changes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"customer-changes"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "generate-transaction-file",
			"item": [
				{
					"name": "Create a new Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Create Bill Run - Region Y\");\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun ID is not null\", function () {\r",
									"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
									"    pm.expect(response.billRun.id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Billrun Number is not null\", function () {\r",
									"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
									"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
									"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
									"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
									"\r",
									"\r",
									"const customerRef = \"A\" + randomCustomerRef + \"A\";\r",
									"const licenceNum = \"A\" + randomLicenseNum + \"_GEN\";\r",
									"\r",
									"\r",
									"pm.environment.set(\"customer_ref\", customerRef);\r",
									"pm.environment.set(\"licence_num\", licenceNum);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"region\": \"A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a valid Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction ID is not null\", function () {",
									"    pm.expect(response.transaction.id).to.not.eql(null);",
									"});",
									"",
									"pm.environment.set(\"transaction_id\", response.transaction.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"periodStart\": \"01-APR-2014\",\r\n    \"periodEnd\": \"31-MAR-2015\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"2569\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"A\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"newLicence\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"transactions"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Generate Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"generate"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"generated\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"generated\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Approve Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"approve"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Send Bill Run",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"send"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Status is \"billed\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (response.status !== \"billed\") {\r",
									"    setTimeout(() => {}, 1000);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}",
								"status"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Bill Run Transaction File Reference not null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionFileReference is not null\", function () {\r",
									"    pm.expect(response.billRun.transactionFileReference).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"transactionFile_ref\", response.billRun.transactionFileReference)\r",
									"\r",
									"console.log(\"Transaction File Reference: \" + response.billRun.transactionFileReference);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"wrls",
								"bill-runs",
								"{{billRun_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				},
				{
					"name": "Transaction File Reference is retained at Transaction level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify transactionFileReference is not null\", function () {\r",
									"    pm.expect(response.billRun.fileReference).to.eql(environment.transactionFile_ref);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/admin/test/transactions/{{transaction_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"test",
								"transactions",
								"{{transaction_id}}"
							]
						},
						"description": "add transaction to queue"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "rebilling",
			"item": [
				{
					"name": "Receive and respond to Re-billing Requests",
					"item": [
						{
							"name": "1. Create a new Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun ID is not null\", function () {\r",
											"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
											"    pm.expect(response.billRun.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun Number is not null\", function () {\r",
											"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
											"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
											"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomCustomerRef = Math.floor((Math.random() * 1000000000) + 1);\r",
											"const randomCustomerRef1 = Math.floor((Math.random() * 1000000000) + 1);\r",
											"const randomCustomerRef2 = Math.floor((Math.random() * 1000000000) + 1);\r",
											"const randomCustomerRef3 = Math.floor((Math.random() * 1000000000) + 1);\r",
											"const randomCustomerRef4 = Math.floor((Math.random() * 1000000000) + 1);\r",
											"const randomCustomerRef5 = Math.floor((Math.random() * 1000000000) + 1);\r",
											"\r",
											"const randomLicenseNum = Math.floor((Math.random() * 100000) + 1);\r",
											"const randomLicenseNum1 = Math.floor((Math.random() * 100000) + 1);\r",
											"const randomLicenseNum2 = Math.floor((Math.random() * 100000) + 1);\r",
											"const randomLicenseNum3 = Math.floor((Math.random() * 100000) + 1);\r",
											"const randomLicenseNum4 = Math.floor((Math.random() * 100000) + 1);\r",
											"const randomLicenseNum5 = Math.floor((Math.random() * 100000) + 1);\r",
											"\r",
											"const customerRef = \"A\" + randomCustomerRef + \"A\";\r",
											"const customerRef1 = \"A\" + randomCustomerRef1 + \"B\";\r",
											"const customerRef2 = \"A\" + randomCustomerRef2 + \"C\";\r",
											"const customerRef3 = \"A\" + randomCustomerRef3 + \"D\";\r",
											"const customerRef4 = \"A\" + randomCustomerRef4 + \"E\";\r",
											"const customerRef5 = \"A\" + randomCustomerRef5 + \"F\";\r",
											"\r",
											"const licenceNum = \"A\" + randomLicenseNum + \"_GEN\";\r",
											"const licenceNum1 = \"A\" + randomLicenseNum1 + \"_GEN1\";\r",
											"const licenceNum2 = \"A\" + randomLicenseNum2 + \"_GEN2\";\r",
											"const licenceNum3 = \"A\" + randomLicenseNum3 + \"_GEN3\";\r",
											"const licenceNum4 = \"A\" + randomLicenseNum4 + \"_GEN4\";\r",
											"const licenceNum5 = \"A\" + randomLicenseNum5 + \"_GEN5\";\r",
											"\r",
											"pm.environment.set(\"customer_ref\", customerRef);\r",
											"pm.environment.set(\"customer_ref1\", customerRef1);\r",
											"pm.environment.set(\"customer_ref2\", customerRef2);\r",
											"pm.environment.set(\"customer_ref3\", customerRef3);\r",
											"pm.environment.set(\"customer_ref4\", customerRef4);\r",
											"pm.environment.set(\"customer_ref5\", customerRef5);\r",
											"\r",
											"pm.environment.set(\"licence_num\", licenceNum);\r",
											"pm.environment.set(\"licence_num1\", licenceNum1);\r",
											"pm.environment.set(\"licence_num2\", licenceNum2);\r",
											"pm.environment.set(\"licence_num3\", licenceNum3);\r",
											"pm.environment.set(\"licence_num4\", licenceNum4);\r",
											"pm.environment.set(\"licence_num5\", licenceNum5);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"region\": \"S\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create a valid Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"console.log(\"Creating a Transaction and adding to Bill run\");",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction ID is not null\", function () {",
											"    pm.expect(response.transaction.id).to.not.eql(null);",
											"});",
											"",
											"pm.environment.set(\"transaction_id\", response.transaction.id);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');\r",
											"var myUUID = uuid.v4();\r",
											"\r",
											"pm.environment.set(\"client_id\", myUUID);\r",
											"pm.environment.set(\"randomBillRunID\", myUUID);\r",
											"pm.environment.set(\"randomInvoiceID\", myUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"8854\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"clientId\": \"{{client_id}}\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"transactions"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "3. Capture Invoice ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching customer ref\r",
											"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID is not null\", function () {\r",
											"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebillInvoice_id\", invoiceArray.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "4. \"invoiceId\" must be billed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"409 conflict error\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID must be billed\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invoice \" + environment.rebillInvoice_id + \" is already on bill run \" + environment.billRun_id);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebillInvoice_id}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebillInvoice_id}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "5. Generate Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"generate"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "6. Bill Run Status is \"generated\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (response.status !== \"generated\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"status"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "7. Approve Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"approve"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "8. Send Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"send"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "9. Bill Run status is \"billed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"billed\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "10. Bill Run is sent and Transaction File reference is present",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status is billed\", function () {\r",
											"    pm.expect(response.billRun.status).to.eql(\"billed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transactionFileReference is not null\", function () {\r",
											"    pm.expect(response.billRun.transactionFileReference).to.not.eql(\"\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "11. Capture Transaction details within original invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const originalInvoiceSummary = response.invoice\r",
											"const originalTransaction = response.invoice.licences[0].transactions\r",
											"\r",
											"pm.environment.set(\"originalInvoiceTransactions_response\", originalTransaction);\r",
											"pm.environment.set(\"originalInvoiceSummary_response\", originalInvoiceSummary);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebillInvoice_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebillInvoice_id}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "12. Create a new Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Create Bill Run - Region Y\");\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun ID is not null\", function () {\r",
											"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
											"    pm.expect(response.billRun.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun Number is not null\", function () {\r",
											"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
											"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
											"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"region\": \"S\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs"
									]
								}
							},
							"response": []
						},
						{
							"name": "13. Create a valid Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"console.log(\"Creating a Transaction and adding to Bill run\");",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction ID is not null\", function () {",
											"    pm.expect(response.transaction.id).to.not.eql(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"8854\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"transactions"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "14. Generate Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"generate"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "15. Bill Run Status is \"generated\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (response.status !== \"generated\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"status"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "16. Approve Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"approve"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "17. Send Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"send"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "18. Bill Run status is \"billed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"billed\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "19. \"billRunId\" for Rebilling must not be billed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"409 conflict error\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify valid billRunId must not be billed for Rebilling\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.billRun_id + \" cannot be patched because its status is billed.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebillInvoice_id}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebillInvoice_id}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "20. Create a new Bill Run for different Region",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Create Bill Run - Region Y\");\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun ID is not null\", function () {\r",
											"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
											"    pm.expect(response.billRun.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun Number is not null\", function () {\r",
											"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
											"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"billRun_id1\", response.billRun.id);\r",
											"pm.environment.set(\"billRun_number1\", response.billRun.billRunNumber);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"region\": \"T\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs"
									]
								}
							},
							"response": []
						},
						{
							"name": "21. Create a new Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Create Bill Run - Region Y\");\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun ID is not null\", function () {\r",
											"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
											"    pm.expect(response.billRun.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun Number is not null\", function () {\r",
											"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
											"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
											"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"region\": \"S\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs"
									]
								}
							},
							"response": []
						},
						{
							"name": "22. Create a valid Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"console.log(\"Creating a Transaction and adding to Bill run\");",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction ID is not null\", function () {",
											"    pm.expect(response.transaction.id).to.not.eql(null);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"2214\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num1}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"transactions"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "23. \"billRunId\" is mandatory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Bill Run is not found - 404 error\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs//invoices/{{rebillInvoice_id}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"",
										"invoices",
										"{{rebillInvoice_id}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "24. \"invoiceId\" is mandatory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Bill Run is not found - 404 error\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices//rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "25. \"billRunId\" must exist in the CM DB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"console.log(\"Verify valid billRunId parameter is mandatory\");\r",
											"\r",
											"pm.test(\"Verify Bill Run is not found - 404 error\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify valid billRunId parameter is mandatory\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.randomBillRunID + \" is unknown.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{randomBillRunID}}/invoices/{{rebillInvoice_id}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{randomBillRunID}}",
										"invoices",
										"{{rebillInvoice_id}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "26. \"invoiceId\" must exist in the CM DB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Invoice ID is not found - 404 error\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify valid Invoice ID must exist in the CM\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invoice \" + environment.randomInvoiceID + \" is unknown.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{randomInvoiceID}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{randomInvoiceID}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "27. Rebill Invoice ID & Bill Run Id must link to the same region",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"409 conflict error\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify valid billRunId and Invoice Id must be for the same region\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invoice \" + environment.rebillInvoice_id + \" is for region S but bill run \" + environment.billRun_id1 + \" is for region T.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id1}}/invoices/{{rebillInvoice_id}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id1}}",
										"invoices",
										"{{rebillInvoice_id}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "28. Rebill returns \"C\" & \"R\" invoice IDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebilledInvoice_id_C\", response.invoices[0].id);\r",
											"pm.environment.set(\"rebilledInvoice_id_R\", response.invoices[1].id);\r",
											"\r",
											"pm.test(\"Verify C rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[0].id).to.not.eql(environment.rebillInvoice_id);\r",
											"    pm.expect(response.invoices[0].rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify R rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[1].id).to.not.eql(environment.rebillInvoice_id);\r",
											"    pm.expect(response.invoices[1].rebilledType).to.eql(\"R\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebillInvoice_id}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebillInvoice_id}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "Bill Run status is not \"pending\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"initialised\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Re-billing Transactions",
					"item": [
						{
							"name": "29. Transactions are copied into (R) Rebilling Invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const rebilledInvoiceSummary = response.invoice\r",
											"pm.environment.set(\"rebillInvoiceR\", rebilledInvoiceSummary);\r",
											"const originalInvoiceSummary = environment.originalInvoiceSummary_response\r",
											"const rebilledTransaction = rebilledInvoiceSummary.licences[0].transactions\r",
											"const originalTransaction = environment.originalInvoiceTransactions_response\r",
											"\r",
											"pm.environment.set(\"rebilledTransactionID\", rebilledTransaction[0].id);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID for the Rebilled invoice is new\", function () {\r",
											"    pm.expect(rebilledTransaction.id).to.not.eql(environment.rebillInvoice_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebilled Invoice ID is identified by Rebilling flag\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.rebilledType).to.eql(\"R\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Original Invoice ID is retained in the response\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.rebilledInvoiceId).to.eql(environment.rebillInvoice_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice Summary totals are identical in both Original Invoice & Rebilled invoice\", function () {\r",
											"    delete rebilledInvoiceSummary.id;\r",
											"    delete rebilledInvoiceSummary.billRunId;\r",
											"    delete rebilledInvoiceSummary.transactionReference;\r",
											"    delete rebilledInvoiceSummary.rebilledType;\r",
											"    delete rebilledInvoiceSummary.rebilledInvoiceId;\r",
											"    delete rebilledInvoiceSummary.licences;\r",
											"    delete originalInvoiceSummary.id;\r",
											"    delete originalInvoiceSummary.billRunId;\r",
											"    delete originalInvoiceSummary.transactionReference;\r",
											"    delete originalInvoiceSummary.rebilledType;\r",
											"    delete originalInvoiceSummary.rebilledInvoiceId;\r",
											"    delete originalInvoiceSummary.licences;\r",
											"    pm.expect(rebilledInvoiceSummary).to.eql(originalInvoiceSummary);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify client ID is not the same\", function () {\r",
											"    pm.expect(rebilledTransaction.clientId).to.eql(originalTransaction.clientId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transaction ID is new\", function () {\r",
											"    pm.expect(rebilledTransaction.id).to.not.eql(environment.transaction_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify original invoice is copied to new R rebilled invoice\", function () {\r",
											"    delete rebilledTransaction[0].id;\r",
											"    delete rebilledTransaction[0].clientId;\r",
											"    delete rebilledTransaction[0].rebilledTransactionId\r",
											"    delete originalTransaction[0].id;\r",
											"    delete originalTransaction[0].clientId;\r",
											"    delete originalTransaction[0].rebilledTransactionId\r",
											"    pm.expect(rebilledTransaction).to.eql(originalTransaction);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebilledInvoice_id_R}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebilledInvoice_id_R}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "29.1 Original Transaction ID is cross-referenced",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Original Transaction ID is included\", function () {\r",
											"    pm.expect(response.rebilledTransactionId).to.eql(environment.transaction_id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/admin/test/transactions/{{rebilledTransactionID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"test",
										"transactions",
										"{{rebilledTransactionID}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "30. Transactions are copied into (C) Reverse Rebilling Invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const rebilledInvoiceSummary = response.invoice\r",
											"pm.environment.set(\"rebillInvoiceC\", rebilledInvoiceSummary);\r",
											"const originalInvoiceSummary = environment.originalInvoiceSummary_response\r",
											"const rebilledTransaction = rebilledInvoiceSummary.licences[0].transactions\r",
											"const originalTransaction = environment.originalInvoiceTransactions_response\r",
											"\r",
											"\r",
											"function pos_to_neg(num) {\r",
											"    return -Math.abs(num);\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID for the Rebilled (C) invoice is new\", function () {\r",
											"    pm.expect(rebilledTransaction.id).to.not.eql(environment.rebillInvoice_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebilled Invoice ID is identified by Rebilling flag\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Original Invoice ID is retained in the response\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.rebilledInvoiceId).to.eql(environment.rebillInvoice_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice Summary totals are identical in both Original Invoice & Rebilled invoice\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.customerReference).to.eql(originalInvoiceSummary.customerReference);\r",
											"    pm.expect(rebilledInvoiceSummary.financialYear).to.eql(originalInvoiceSummary.financialYear);\r",
											"    pm.expect(rebilledInvoiceSummary.deminimisInvoice).to.eql(originalInvoiceSummary.deminimisInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary.zeroValueInvoice).to.eql(originalInvoiceSummary.zeroValueInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary.minimumChargeInvoice).to.eql(originalInvoiceSummary.minimumChargeInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary.creditLineValue).to.eql(originalInvoiceSummary.debitLineValue);\r",
											"    pm.expect(rebilledInvoiceSummary.debitLineValue).to.eql(originalInvoiceSummary.creditLineValue);\r",
											"    pm.expect(rebilledInvoiceSummary.netTotal).to.eql(pos_to_neg(originalInvoiceSummary.netTotal));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify client ID is not the same\", function () {\r",
											"    pm.expect(rebilledTransaction.clientId).to.eql(originalTransaction.clientId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transaction ID is new\", function () {\r",
											"    pm.expect(rebilledTransaction.id).to.not.eql(environment.transaction_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify credit property is reverse\", function () {\r",
											"    pm.expect(rebilledTransaction[0].credit).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify original invoice is copied to new C rebilled invoice\", function () {\r",
											"    delete rebilledTransaction[0].id;\r",
											"    delete rebilledTransaction[0].clientId;\r",
											"    delete rebilledTransaction[0].credit;\r",
											"    delete rebilledTransaction[0].rebilledTransactionId\r",
											"    delete originalTransaction[0].id;\r",
											"    delete originalTransaction[0].clientId;\r",
											"    delete originalTransaction[0].credit;\r",
											"    delete originalTransaction[0].rebilledTransactionId\r",
											"    pm.expect(rebilledTransaction).to.eql(originalTransaction);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebilledInvoice_id_C}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebilledInvoice_id_C}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "31. Re-capture (R) Rebilling Invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const rebilledInvoiceSummary = response.invoice\r",
											"pm.environment.set(\"rebillInvoiceR\", rebilledInvoiceSummary);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebilledInvoice_id_R}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebilledInvoice_id_R}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "32. Bill Run is sent and Transaction File reference is present Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching invoice ID\r",
											"const rebillInvoiceArrayR = response.billRun.invoices.find(element => element.id === environment.rebilledInvoice_id_R)\r",
											"//Capture invoice matching invoice ID\r",
											"const rebillInvoiceArrayC = response.billRun.invoices.find(element => element.id === environment.rebilledInvoice_id_C)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebill Invoice (R) is included in View Bill Run\", function () {\r",
											"    delete environment.rebillInvoiceR.billRunId;\r",
											"    delete environment.rebillInvoiceR.licences[0].netTotal;\r",
											"    delete environment.rebillInvoiceR.licences[0].transactions;\r",
											"    pm.expect(rebillInvoiceArrayR).to.eql(environment.rebillInvoiceR);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebill Invoice (C) is included in View Bill Run\", function () {\r",
											"    delete environment.rebillInvoiceC.billRunId;\r",
											"    delete environment.rebillInvoiceC.licences[0].netTotal;\r",
											"    delete environment.rebillInvoiceC.licences[0].transactions;\r",
											"    pm.expect(rebillInvoiceArrayC).to.eql(environment.rebillInvoiceC);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						}
					]
				},
				{
					"name": "Prevent Duplicate Re-Billing of a Single Invoice",
					"item": [
						{
							"name": "33. Previously Rebilled invoice cannot be Rebilled again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 409 Conflict\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice has already been rebilled\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invoice \" + environment.rebillInvoice_id + \" has already been rebilled.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebillInvoice_id}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebillInvoice_id}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "34. Delete \"R\" Rebill Invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebilledInvoice_id_R}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebilledInvoice_id_R}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "35. Delete \"C\" Rebill Invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebilledInvoice_id_C}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebilledInvoice_id_C}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "36. \"R\" Rebilled invoice is confirmed as deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice has already been rebilled\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invoice \" + environment.rebilledInvoice_id_R + \" is unknown.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebilledInvoice_id_R}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebilledInvoice_id_R}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "37. \"C\" Rebilled invoice is confirmed as deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 404 Not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice has already been rebilled\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invoice \" + environment.rebilledInvoice_id_C + \" is unknown.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebilledInvoice_id_C}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebilledInvoice_id_C}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "38. Deleted Rebilled Invoices can be rebilled again and return \"C\" & \"R\" invoice IDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebilledInvoice_id_C\", response.invoices[0].id);\r",
											"pm.environment.set(\"rebilledInvoice_id_R\", response.invoices[1].id);\r",
											"\r",
											"pm.test(\"Verify C rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[0].id).to.not.eql(environment.rebillInvoice_id);\r",
											"    pm.expect(response.invoices[0].rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify R rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[1].id).to.not.eql(environment.rebillInvoice_id);\r",
											"    pm.expect(response.invoices[1].rebilledType).to.eql(\"R\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebillInvoice_id}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebillInvoice_id}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "Bill Run Status is not \"pending\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.status !== \"initialised\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"status"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "39. Generate Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"generate"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "40. Bill Run Status is \"generated\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (response.status !== \"generated\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"status"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "41. Transactions are copied into (R) Rebilling Invoice after deleting and rebilling again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const rebilledInvoiceSummary = response.invoice\r",
											"const originalInvoiceSummary = environment.originalInvoiceSummary_response\r",
											"const rebilledTransaction = rebilledInvoiceSummary.licences[0].transactions\r",
											"const originalTransaction = environment.originalInvoiceTransactions_response\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID for the Rebilled invoice is new\", function () {\r",
											"    pm.expect(rebilledTransaction.id).to.not.eql(environment.rebillInvoice_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebilled Invoice ID is identified by Rebilling flag\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.rebilledType).to.eql(\"R\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Original Invoice ID is retained in the response\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.rebilledInvoiceId).to.eql(environment.rebillInvoice_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice Summary totals are identical in both Original Invoice & Rebilled invoice\", function () {\r",
											"    delete rebilledInvoiceSummary.id;\r",
											"    delete rebilledInvoiceSummary.billRunId;\r",
											"    delete rebilledInvoiceSummary.transactionReference;\r",
											"    delete rebilledInvoiceSummary.rebilledType;\r",
											"    delete rebilledInvoiceSummary.rebilledInvoiceId;\r",
											"    delete rebilledInvoiceSummary.licences;\r",
											"    delete originalInvoiceSummary.id;\r",
											"    delete originalInvoiceSummary.billRunId;\r",
											"    delete originalInvoiceSummary.transactionReference;\r",
											"    delete originalInvoiceSummary.rebilledType;\r",
											"    delete originalInvoiceSummary.rebilledInvoiceId;\r",
											"    delete originalInvoiceSummary.licences;\r",
											"    pm.expect(rebilledInvoiceSummary).to.eql(originalInvoiceSummary);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify client ID is not the same\", function () {\r",
											"    pm.expect(rebilledTransaction.clientId).to.eql(originalTransaction.clientId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transaction ID is new\", function () {\r",
											"    pm.expect(rebilledTransaction.id).to.not.eql(environment.transaction_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify original invoice is copied to new R rebilled invoice\", function () {\r",
											"    delete rebilledTransaction[0].id;\r",
											"    delete rebilledTransaction[0].clientId;\r",
											"    delete rebilledTransaction[0].rebilledTransactionId\r",
											"    delete originalTransaction[0].id;\r",
											"    delete originalTransaction[0].clientId;\r",
											"    delete originalTransaction[0].rebilledTransactionId\r",
											"    pm.expect(rebilledTransaction).to.eql(originalTransaction);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebilledInvoice_id_R}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebilledInvoice_id_R}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "42. Transactions are copied into (C) Reverse Rebilling Invoice after deleting and rebilling again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const rebilledInvoiceSummary = response.invoice\r",
											"const originalInvoiceSummary = environment.originalInvoiceSummary_response\r",
											"const rebilledTransaction = rebilledInvoiceSummary.licences[0].transactions\r",
											"const originalTransaction = environment.originalInvoiceTransactions_response\r",
											"\r",
											"function pos_to_neg(num) {\r",
											"    return -Math.abs(num);\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID for the Rebilled (C) invoice is new\", function () {\r",
											"    pm.expect(rebilledTransaction.id).to.not.eql(environment.rebillInvoice_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebilled Invoice ID is identified by Rebilling flag\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Original Invoice ID is retained in the response\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.rebilledInvoiceId).to.eql(environment.rebillInvoice_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice Summary totals are identical in both Original Invoice & Rebilled invoice\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.customerReference).to.eql(originalInvoiceSummary.customerReference);\r",
											"    pm.expect(rebilledInvoiceSummary.financialYear).to.eql(originalInvoiceSummary.financialYear);\r",
											"    pm.expect(rebilledInvoiceSummary.deminimisInvoice).to.eql(originalInvoiceSummary.deminimisInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary.zeroValueInvoice).to.eql(originalInvoiceSummary.zeroValueInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary.minimumChargeInvoice).to.eql(originalInvoiceSummary.minimumChargeInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary.creditLineValue).to.eql(originalInvoiceSummary.debitLineValue);\r",
											"    pm.expect(rebilledInvoiceSummary.debitLineValue).to.eql(originalInvoiceSummary.creditLineValue);\r",
											"    pm.expect(rebilledInvoiceSummary.netTotal).to.eql(pos_to_neg(originalInvoiceSummary.netTotal));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify client ID is not the same\", function () {\r",
											"    pm.expect(rebilledTransaction.clientId).to.eql(originalTransaction.clientId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transaction ID is new\", function () {\r",
											"    pm.expect(rebilledTransaction.id).to.not.eql(environment.transaction_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify credit property is reverse\", function () {\r",
											"    pm.expect(rebilledTransaction[0].credit).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify original invoice is copied to new C rebilled invoice\", function () {\r",
											"    delete rebilledTransaction[0].id;\r",
											"    delete rebilledTransaction[0].clientId;\r",
											"    delete rebilledTransaction[0].credit;\r",
											"    delete rebilledTransaction[0].rebilledTransactionId\r",
											"    delete originalTransaction[0].id;\r",
											"    delete originalTransaction[0].clientId;\r",
											"    delete originalTransaction[0].credit;\r",
											"    delete originalTransaction[0].rebilledTransactionId\r",
											"    pm.expect(rebilledTransaction).to.eql(originalTransaction);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebilledInvoice_id_C}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebilledInvoice_id_C}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "43. Approve Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"approve"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "44. Send Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"send"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "45. Bill Run status is \"billed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"billed\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "46. Bill Run is sent and Transaction File reference is present",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify status is billed\", function () {\r",
											"    pm.expect(response.billRun.status).to.eql(\"billed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transactionFileReference is not null\", function () {\r",
											"    pm.expect(response.billRun.transactionFileReference).to.not.eql(\"\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "47. Create a new Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Create Bill Run - Region Y\");\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun ID is not null\", function () {\r",
											"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
											"    pm.expect(response.billRun.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun Number is not null\", function () {\r",
											"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
											"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"billRun_id1\", response.billRun.id);\r",
											"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"region\": \"S\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs"
									]
								}
							},
							"response": []
						},
						{
							"name": "48. Sent Rebilled Invoice cannot be rebilled again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 409 Conflict\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice has already been rebilled\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invoice \" + environment.rebillInvoice_id + \" has already been rebilled.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id1}}/invoices/{{rebillInvoice_id}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id1}}",
										"invoices",
										"{{rebillInvoice_id}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "49. C rebill Invoice cannot be rebilled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 409 Conflict\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify C rebill Invoice cannot be rebilled\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invoice \" + environment.rebilledInvoice_id_C + \" is a rebill cancel invoice and cannot be rebilled.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id1}}/invoices/{{rebilledInvoice_id_C}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id1}}",
										"invoices",
										"{{rebilledInvoice_id_C}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "50. Sent R rebill Invoice CAN be rebilled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify C rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[0].id).to.not.eql(environment.rebillInvoice_id);\r",
											"    pm.expect(response.invoices[0].id).to.not.eql(environment.rebilledInvoice_id_C);\r",
											"    pm.expect(response.invoices[0].rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify R rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[1].id).to.not.eql(environment.rebillInvoice_id);\r",
											"    pm.expect(response.invoices[1].id).to.not.eql(environment.rebilledInvoice_id_R);\r",
											"    pm.expect(response.invoices[1].rebilledType).to.eql(\"R\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id1}}/invoices/{{rebilledInvoice_id_R}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id1}}",
										"invoices",
										"{{rebilledInvoice_id_R}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "Bill Run Status is not \"pending\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.status !== \"initialised\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id1}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id1}}",
										"status"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						}
					]
				},
				{
					"name": "Exclude Re-billing invoices from Min Charge/Deminimis checks",
					"item": [
						{
							"name": "51. Create a new Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Create Bill Run - Region Y\");\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun ID is not null\", function () {\r",
											"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
											"    pm.expect(response.billRun.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun Number is not null\", function () {\r",
											"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
											"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"billRun_id2\", response.billRun.id);\r",
											"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"region\": \"S\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs"
									]
								}
							},
							"response": []
						},
						{
							"name": "52. Create a credit Transaction that is below £5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"console.log(\"Creating a Transaction and adding to Bill run\");",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction ID is not null\", function () {",
											"    pm.expect(response.transaction.id).to.not.eql(null);",
											"});",
											"",
											"pm.environment.set(\"transaction_id\", response.transaction.id);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": true,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"15\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref}}_{{licence_num}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"transactions"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "53. Create a debit Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"console.log(\"Creating a Transaction and adding to Bill run\");",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction ID is not null\", function () {",
											"    pm.expect(response.transaction.id).to.not.eql(null);",
											"});",
											"",
											"pm.environment.set(\"transaction_id1\", response.transaction.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"15\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num1}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"transactions"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "54. Create a Min Charge Transaction Licence A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"console.log(\"Creating a Transaction and adding to Bill run\");",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction ID is not null\", function () {",
											"    pm.expect(response.transaction.id).to.not.eql(null);",
											"});",
											"",
											"pm.environment.set(\"transaction_id2\", response.transaction.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"335\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"subjectToMinimumCharge\": \"true\",\r\n    \"customerReference\": \"{{customer_ref2}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num2}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref2}}_{{licence_num2}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"transactions"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "55. Create a Non Min Charge Transaction Licence B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction ID is not null\", function () {",
											"    pm.expect(response.transaction.id).to.not.eql(null);",
											"});",
											"",
											"pm.environment.set(\"transaction_id3\", response.transaction.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"335\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"subjectToMinimumCharge\": \"false\",\r\n    \"customerReference\": \"{{customer_ref2}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num3}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref2}}_{{licence_num3}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"transactions"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "56. Create a Zero Value Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction ID is not null\", function () {",
											"    pm.expect(response.transaction.id).to.not.eql(null);",
											"});",
											"",
											"pm.environment.set(\"transaction_id4\", response.transaction.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"0\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref4}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num4}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref4}}_{{licence_num4}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"transactions"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "57. Generate Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/generate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"generate"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "58. Bill Run Status is \"generated\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (response.status !== \"generated\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"status"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "59. Capture Invoice ID 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching customer ref\r",
											"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID is not null\", function () {\r",
											"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebillInvoice_id1\", invoiceArray.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "60. Capture Invoice ID 2 (Deminimis)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching customer ref\r",
											"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID is not null\", function () {\r",
											"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebillInvoice_id2\", invoiceArray.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "61. Capture Invoice ID 3 (Min Charge)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching customer ref\r",
											"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID is not null\", function () {\r",
											"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebillInvoice_id3\", invoiceArray.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "62. Capture Invoice ID 4 (Zero Value)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching customer ref\r",
											"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref4)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID is not null\", function () {\r",
											"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebillInvoice_id4\", invoiceArray.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "63. Approve Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"approve"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "64. Capture Transaction details within original invoice 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const originalInvoiceSummary1 = response.invoice\r",
											"const originalTransaction1 = response.invoice.licences[0].transactions\r",
											"\r",
											"pm.environment.set(\"originalInvoiceTransactions_response1\", originalTransaction1);\r",
											"pm.environment.set(\"originalInvoiceSummary_response1\", originalInvoiceSummary1);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/invoices/{{rebillInvoice_id1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"invoices",
										"{{rebillInvoice_id1}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "65. Capture Transaction details within original invoice 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const originalInvoiceSummary2 = response.invoice\r",
											"const originalTransaction2 = response.invoice.licences[0].transactions\r",
											"\r",
											"pm.environment.set(\"originalInvoiceTransactions_response2\", originalTransaction2);\r",
											"pm.environment.set(\"originalInvoiceSummary_response2\", originalInvoiceSummary2);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/invoices/{{rebillInvoice_id2}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"invoices",
										"{{rebillInvoice_id2}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "66. Capture Transaction details within original invoice 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture licence info matching licence num\r",
											"const lincenceArray = response.invoice.licences.find(element => element.licenceNumber == environment.licence_num2)\r",
											"//Capture seperate transactions info within licence matching transaction ID\r",
											"const transactionArray = lincenceArray.transactions.find(element => element.id === environment.transaction_id2)\r",
											"\r",
											"const originalInvoiceSummary3 = response.invoice\r",
											"const originalTransaction3 = transactionArray\r",
											"\r",
											"pm.environment.set(\"originalInvoiceTransactions_response3\", originalTransaction3);\r",
											"pm.environment.set(\"originalInvoiceSummary_response3\", originalInvoiceSummary3);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/invoices/{{rebillInvoice_id3}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"invoices",
										"{{rebillInvoice_id3}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "67. Capture Transaction details within original invoice 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const originalInvoiceSummary4 = response.invoice\r",
											"const originalTransaction4 = response.invoice.licences[0].transactions\r",
											"\r",
											"pm.environment.set(\"originalInvoiceTransactions_response4\", originalTransaction4);\r",
											"pm.environment.set(\"originalInvoiceSummary_response4\", originalInvoiceSummary4);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/invoices/{{rebillInvoice_id4}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"invoices",
										"{{rebillInvoice_id4}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "68. Send Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/send",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"send"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "69. Bill Run status is \"billed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"billed\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "70. Create a new Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Create Bill Run - Region Y\");\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun ID is not null\", function () {\r",
											"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
											"    pm.expect(response.billRun.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun Number is not null\", function () {\r",
											"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
											"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"billRun_id3\", response.billRun.id);\r",
											"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"region\": \"S\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs"
									]
								}
							},
							"response": []
						},
						{
							"name": "71. Rebill Invoice 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebilledInvoice_id_C1\", response.invoices[0].id);\r",
											"pm.environment.set(\"rebilledInvoice_id_R1\", response.invoices[1].id);\r",
											"\r",
											"pm.test(\"Verify C rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[0].id).to.not.eql(environment.rebillInvoice_id1);\r",
											"    pm.expect(response.invoices[0].rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify R rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[1].id).to.not.eql(environment.rebillInvoice_id1);\r",
											"    pm.expect(response.invoices[1].rebilledType).to.eql(\"R\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}/invoices/{{rebillInvoice_id1}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}",
										"invoices",
										"{{rebillInvoice_id1}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "Bill Run status is not \"pending\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"initialised\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "72. Rebill Invoice 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebilledInvoice_id_C2\", response.invoices[0].id);\r",
											"pm.environment.set(\"rebilledInvoice_id_R2\", response.invoices[1].id);\r",
											"\r",
											"pm.test(\"Verify C rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[0].id).to.not.eql(environment.rebillInvoice_id2);\r",
											"    pm.expect(response.invoices[0].rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify R rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[1].id).to.not.eql(environment.rebillInvoice_id2);\r",
											"    pm.expect(response.invoices[1].rebilledType).to.eql(\"R\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}/invoices/{{rebillInvoice_id2}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}",
										"invoices",
										"{{rebillInvoice_id2}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "Bill Run status is not \"pending\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"initialised\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "73. Rebill Invoice 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebilledInvoice_id_C3\", response.invoices[0].id);\r",
											"pm.environment.set(\"rebilledInvoice_id_R3\", response.invoices[1].id);\r",
											"\r",
											"pm.test(\"Verify C rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[0].id).to.not.eql(environment.rebillInvoice_id3);\r",
											"    pm.expect(response.invoices[0].rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify R rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[1].id).to.not.eql(environment.rebillInvoice_id3);\r",
											"    pm.expect(response.invoices[1].rebilledType).to.eql(\"R\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}/invoices/{{rebillInvoice_id3}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}",
										"invoices",
										"{{rebillInvoice_id3}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "Bill Run status is not \"pending\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"initialised\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "74. Rebill Invoice 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebilledInvoice_id_C4\", response.invoices[0].id);\r",
											"pm.environment.set(\"rebilledInvoice_id_R4\", response.invoices[1].id);\r",
											"\r",
											"pm.test(\"Verify C rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[0].id).to.not.eql(environment.rebillInvoice_id4);\r",
											"    pm.expect(response.invoices[0].rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify R rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[1].id).to.not.eql(environment.rebillInvoice_id4);\r",
											"    pm.expect(response.invoices[1].rebilledType).to.eql(\"R\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}/invoices/{{rebillInvoice_id4}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}",
										"invoices",
										"{{rebillInvoice_id4}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "Bill Run status is not \"pending\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"initialised\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "75. Generate Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}/generate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}",
										"generate"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "76. Bill Run Status is \"generated\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (response.status !== \"generated\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}",
										"status"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "77. Transactions are copied into (R) Rebilling Invoice 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const rebilledInvoiceSummary1 = response.invoice\r",
											"const originalInvoiceSummary1 = environment.originalInvoiceSummary_response1\r",
											"const rebilledTransaction1 = rebilledInvoiceSummary1.licences[0].transactions\r",
											"const originalTransaction1 = environment.originalInvoiceTransactions_response1\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID for the Rebilled invoice is new\", function () {\r",
											"    pm.expect(rebilledTransaction1.id).to.not.eql(environment.rebillInvoice_id1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebilled Invoice ID is identified by Rebilling flag\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary1.rebilledType).to.eql(\"R\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Original Invoice ID is retained in the response\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary1.rebilledInvoiceId).to.eql(environment.rebillInvoice_id1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice Summary totals are identical in both Original Invoice & Rebilled invoice\", function () {\r",
											"    delete rebilledInvoiceSummary1.id;\r",
											"    delete rebilledInvoiceSummary1.billRunId;\r",
											"    delete rebilledInvoiceSummary1.transactionReference;\r",
											"    delete rebilledInvoiceSummary1.rebilledType;\r",
											"    delete rebilledInvoiceSummary1.rebilledInvoiceId;\r",
											"    delete rebilledInvoiceSummary1.licences;\r",
											"    delete originalInvoiceSummary1.id;\r",
											"    delete originalInvoiceSummary1.billRunId;\r",
											"    delete originalInvoiceSummary1.transactionReference;\r",
											"    delete originalInvoiceSummary1.rebilledType;\r",
											"    delete originalInvoiceSummary1.rebilledInvoiceId;\r",
											"    delete originalInvoiceSummary1.licences;\r",
											"    pm.expect(rebilledInvoiceSummary1).to.eql(originalInvoiceSummary1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify client ID is not the same\", function () {\r",
											"    pm.expect(rebilledTransaction1.clientId).to.eql(originalTransaction1.clientId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transaction ID is new\", function () {\r",
											"    pm.expect(rebilledTransaction1.id).to.not.eql(environment.transaction_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify original invoice is copied to new R rebilled invoice\", function () {\r",
											"    delete rebilledTransaction1[0].id;\r",
											"    delete rebilledTransaction1[0].clientId;\r",
											"    delete rebilledTransaction1[0].rebilledTransactionId\r",
											"    delete originalTransaction1[0].id;\r",
											"    delete originalTransaction1[0].clientId;\r",
											"    delete originalTransaction1[0].rebilledTransactionId\r",
											"    pm.expect(rebilledTransaction1).to.eql(originalTransaction1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}/invoices/{{rebilledInvoice_id_R1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}",
										"invoices",
										"{{rebilledInvoice_id_R1}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "78. Transactions are copied into (C) Reverse Rebilling Invoice 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const rebilledInvoiceSummary1 = response.invoice\r",
											"const originalInvoiceSummary1 = environment.originalInvoiceSummary_response1\r",
											"const rebilledTransaction1 = rebilledInvoiceSummary1.licences[0].transactions\r",
											"const originalTransaction1 = environment.originalInvoiceTransactions_response1\r",
											"\r",
											"function neg_to_pos(num) {\r",
											"    return Math.abs(num);\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID for the Rebilled (C) invoice is new\", function () {\r",
											"    pm.expect(rebilledTransaction1.id).to.not.eql(environment.rebillInvoice_id1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebilled Invoice ID is identified by Rebilling flag\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary1.rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Original Invoice ID is retained in the response\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary1.rebilledInvoiceId).to.eql(environment.rebillInvoice_id1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice Summary totals are identical in both Original Invoice & Rebilled invoice\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary1.customerReference).to.eql(originalInvoiceSummary1.customerReference);\r",
											"    pm.expect(rebilledInvoiceSummary1.financialYear).to.eql(originalInvoiceSummary1.financialYear);\r",
											"    pm.expect(rebilledInvoiceSummary1.deminimisInvoice).to.eql(originalInvoiceSummary1.deminimisInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary1.zeroValueInvoice).to.eql(originalInvoiceSummary1.zeroValueInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary1.minimumChargeInvoice).to.eql(originalInvoiceSummary1.minimumChargeInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary1.creditLineValue).to.eql(originalInvoiceSummary1.debitLineValue);\r",
											"    pm.expect(rebilledInvoiceSummary1.debitLineValue).to.eql(originalInvoiceSummary1.creditLineValue);\r",
											"    pm.expect(rebilledInvoiceSummary1.netTotal).to.eql(neg_to_pos(originalInvoiceSummary1.netTotal));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify client ID is not the same\", function () {\r",
											"    pm.expect(rebilledTransaction1.clientId).to.eql(originalTransaction1.clientId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transaction ID is new\", function () {\r",
											"    pm.expect(rebilledTransaction1.id).to.not.eql(environment.transaction_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify credit property is reverse\", function () {\r",
											"    pm.expect(rebilledTransaction1[0].credit).to.eql(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify original invoice is copied to new C rebilled invoice\", function () {\r",
											"    delete rebilledTransaction1[0].id;\r",
											"    delete rebilledTransaction1[0].clientId;\r",
											"    delete rebilledTransaction1[0].credit;\r",
											"    delete rebilledTransaction1[0].rebilledTransactionId\r",
											"    delete originalTransaction1[0].id;\r",
											"    delete originalTransaction1[0].clientId;\r",
											"    delete originalTransaction1[0].credit;\r",
											"    delete originalTransaction1[0].rebilledTransactionId\r",
											"    pm.expect(rebilledTransaction1).to.eql(originalTransaction1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}/invoices/{{rebilledInvoice_id_C1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}",
										"invoices",
										"{{rebilledInvoice_id_C1}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "79. Transactions are copied into (R) Rebilling Invoice 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const rebilledInvoiceSummary2 = response.invoice\r",
											"const originalInvoiceSummary2 = environment.originalInvoiceSummary_response2\r",
											"const rebilledTransaction2 = rebilledInvoiceSummary2.licences[0].transactions\r",
											"const originalTransaction2 = environment.originalInvoiceTransactions_response2\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID for the Rebilled invoice is new\", function () {\r",
											"    pm.expect(rebilledTransaction2.id).to.not.eql(environment.rebillInvoice_id2);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebilled Invoice ID is identified by Rebilling flag\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary2.rebilledType).to.eql(\"R\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Original Invoice ID is retained in the response\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary2.rebilledInvoiceId).to.eql(environment.rebillInvoice_id2);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice Summary totals are identical in both Original Invoice & Rebilled invoice\", function () {\r",
											"    delete rebilledInvoiceSummary2.id;\r",
											"    delete rebilledInvoiceSummary2.billRunId;\r",
											"    delete rebilledInvoiceSummary2.transactionReference;\r",
											"    delete rebilledInvoiceSummary2.rebilledType;\r",
											"    delete rebilledInvoiceSummary2.rebilledInvoiceId;\r",
											"    delete rebilledInvoiceSummary2.licences;\r",
											"    delete originalInvoiceSummary2.id;\r",
											"    delete originalInvoiceSummary2.billRunId;\r",
											"    delete originalInvoiceSummary2.transactionReference;\r",
											"    delete originalInvoiceSummary2.rebilledType;\r",
											"    delete originalInvoiceSummary2.rebilledInvoiceId;\r",
											"    delete originalInvoiceSummary2.licences;\r",
											"    pm.expect(rebilledInvoiceSummary2).to.eql(originalInvoiceSummary2);\r",
											"});\r",
											"\r",
											"console.log(rebilledInvoiceSummary2)\r",
											"console.log(originalInvoiceSummary2)\r",
											"\r",
											"pm.test(\"Verify client ID is not the same\", function () {\r",
											"    pm.expect(rebilledTransaction2.clientId).to.eql(originalTransaction2.clientId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transaction ID is new\", function () {\r",
											"    pm.expect(rebilledTransaction2.id).to.not.eql(environment.transaction_id1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify original invoice is copied to new R rebilled invoice\", function () {\r",
											"    delete rebilledTransaction2[0].id;\r",
											"    delete rebilledTransaction2[0].clientId;\r",
											"    delete rebilledTransaction2[0].rebilledTransactionId\r",
											"    delete originalTransaction2[0].id;\r",
											"    delete originalTransaction2[0].clientId;\r",
											"    delete originalTransaction2[0].rebilledTransactionId\r",
											"    pm.expect(rebilledTransaction2).to.eql(originalTransaction2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}/invoices/{{rebilledInvoice_id_R2}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}",
										"invoices",
										"{{rebilledInvoice_id_R2}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "80. Transactions are copied into (C) Reverse Rebilling Invoice 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const rebilledInvoiceSummary2 = response.invoice\r",
											"const originalInvoiceSummary2 = environment.originalInvoiceSummary_response2\r",
											"const rebilledTransaction2 = rebilledInvoiceSummary2.licences[0].transactions\r",
											"const originalTransaction2 = environment.originalInvoiceTransactions_response2\r",
											"\r",
											"function pos_to_neg(num) {\r",
											"    return -Math.abs(num);\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID for the Rebilled (C) invoice is new\", function () {\r",
											"    pm.expect(rebilledTransaction2.id).to.not.eql(environment.rebillInvoice_id2);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebilled Invoice ID is identified by Rebilling flag\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary2.rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Original Invoice ID is retained in the response\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary2.rebilledInvoiceId).to.eql(environment.rebillInvoice_id2);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice Summary totals are identical in both Original Invoice & Rebilled invoice\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary2.customerReference).to.eql(originalInvoiceSummary2.customerReference);\r",
											"    pm.expect(rebilledInvoiceSummary2.financialYear).to.eql(originalInvoiceSummary2.financialYear);\r",
											"    pm.expect(rebilledInvoiceSummary2.deminimisInvoice).to.eql(originalInvoiceSummary2.deminimisInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary2.zeroValueInvoice).to.eql(originalInvoiceSummary2.zeroValueInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary2.minimumChargeInvoice).to.eql(originalInvoiceSummary2.minimumChargeInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary2.creditLineValue).to.eql(originalInvoiceSummary2.debitLineValue);\r",
											"    pm.expect(rebilledInvoiceSummary2.debitLineValue).to.eql(originalInvoiceSummary2.creditLineValue);\r",
											"    pm.expect(rebilledInvoiceSummary2.netTotal).to.eql(pos_to_neg(originalInvoiceSummary2.netTotal));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify client ID is not the same\", function () {\r",
											"    pm.expect(rebilledTransaction2.clientId).to.eql(originalTransaction2.clientId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transaction ID is new\", function () {\r",
											"    pm.expect(rebilledTransaction2.id).to.not.eql(environment.transaction_id1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify credit property is reverse\", function () {\r",
											"    pm.expect(rebilledTransaction2[0].credit).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify original invoice is copied to new C rebilled invoice\", function () {\r",
											"    delete rebilledTransaction2[0].id;\r",
											"    delete rebilledTransaction2[0].clientId;\r",
											"    delete rebilledTransaction2[0].credit;\r",
											"    delete rebilledTransaction2[0].rebilledTransactionId\r",
											"    delete originalTransaction2[0].id;\r",
											"    delete originalTransaction2[0].clientId;\r",
											"    delete originalTransaction2[0].credit;\r",
											"    delete originalTransaction2[0].rebilledTransactionId\r",
											"    pm.expect(rebilledTransaction2).to.eql(originalTransaction2);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}/invoices/{{rebilledInvoice_id_C2}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}",
										"invoices",
										"{{rebilledInvoice_id_C2}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "81. Transactions are copied into (R) Rebilling Invoice 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const rebilledInvoiceSummary3 = response.invoice\r",
											"const originalInvoiceSummary3 = environment.originalInvoiceSummary_response3\r",
											"\r",
											"//Capture licence info matching licence num\r",
											"const lincenceArray = response.invoice.licences.find(element => element.licenceNumber == environment.licence_num2)\r",
											"//Capture seperate transactions info within licence matching transaction ID\r",
											"const transactionArray = lincenceArray.transactions.find(element => element.minimumChargeAdjustment === false)\r",
											"\r",
											"const rebilledTransaction3 = transactionArray\r",
											"const originalTransaction3 = environment.originalInvoiceTransactions_response3\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID for the Rebilled invoice is new\", function () {\r",
											"    pm.expect(rebilledTransaction3.id).to.not.eql(environment.rebillInvoice_id3);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebilled Invoice ID is identified by Rebilling flag\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary3.rebilledType).to.eql(\"R\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Original Invoice ID is retained in the response\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary3.rebilledInvoiceId).to.eql(environment.rebillInvoice_id3);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice Summary totals are identical in both Original Invoice & Rebilled invoice\", function () {\r",
											"    delete rebilledInvoiceSummary3.id;\r",
											"    delete rebilledInvoiceSummary3.billRunId;\r",
											"    delete rebilledInvoiceSummary3.transactionReference;\r",
											"    delete rebilledInvoiceSummary3.rebilledType;\r",
											"    delete rebilledInvoiceSummary3.rebilledInvoiceId;\r",
											"    delete rebilledInvoiceSummary3.licences;\r",
											"    delete originalInvoiceSummary3.id;\r",
											"    delete originalInvoiceSummary3.billRunId;\r",
											"    delete originalInvoiceSummary3.transactionReference;\r",
											"    delete originalInvoiceSummary3.rebilledType;\r",
											"    delete originalInvoiceSummary3.rebilledInvoiceId;\r",
											"    delete originalInvoiceSummary3.licences;\r",
											"    pm.expect(rebilledInvoiceSummary3).to.eql(originalInvoiceSummary3);\r",
											"});\r",
											"\r",
											"console.log(originalInvoiceSummary3)\r",
											"console.log(rebilledInvoiceSummary3)\r",
											"\r",
											"pm.test(\"Verify client ID is not the same\", function () {\r",
											"    pm.expect(rebilledTransaction3.clientId).to.eql(originalTransaction3.clientId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transaction ID is new\", function () {\r",
											"    pm.expect(rebilledTransaction3.id).to.not.eql(environment.transaction_id2);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify original invoice is copied to new R rebilled invoice\", function () {\r",
											"    delete rebilledTransaction3.id;\r",
											"    delete rebilledTransaction3.clientId;\r",
											"    delete rebilledTransaction3.rebilledTransactionId\r",
											"    delete originalTransaction3.id;\r",
											"    delete originalTransaction3.clientId;\r",
											"    delete originalTransaction3.rebilledTransactionId\r",
											"    pm.expect(rebilledTransaction3).to.eql(originalTransaction3);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}/invoices/{{rebilledInvoice_id_R3}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}",
										"invoices",
										"{{rebilledInvoice_id_R3}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "82. Transactions are copied into (C) Reverse Rebilling Invoice 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const rebilledInvoiceSummary3 = response.invoice\r",
											"const originalInvoiceSummary3 = environment.originalInvoiceSummary_response3\r",
											"\r",
											"//Capture licence info matching licence num\r",
											"const lincenceArray = response.invoice.licences.find(element => element.licenceNumber == environment.licence_num2)\r",
											"//Capture seperate transactions info within licence matching transaction ID\r",
											"const transactionArray = lincenceArray.transactions.find(element => element.minimumChargeAdjustment === false)\r",
											"\r",
											"const rebilledTransaction3 = transactionArray\r",
											"const originalTransaction3 = environment.originalInvoiceTransactions_response3\r",
											"\r",
											"function pos_to_neg(num) {\r",
											"    return -Math.abs(num);\r",
											"}\r",
											"\r",
											"function neg_to_pos(num) {\r",
											"    return Math.abs(num);\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID for the Rebilled (C) invoice is new\", function () {\r",
											"    pm.expect(rebilledTransaction3.id).to.not.eql(environment.rebillInvoice_id3);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebilled Invoice ID is identified by Rebilling flag\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary3.rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Original Invoice ID is retained in the response\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary3.rebilledInvoiceId).to.eql(environment.rebillInvoice_id3);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice Summary totals are identical in both Original Invoice & Rebilled invoice\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary3.customerReference).to.eql(originalInvoiceSummary3.customerReference);\r",
											"    pm.expect(rebilledInvoiceSummary3.financialYear).to.eql(originalInvoiceSummary3.financialYear);\r",
											"    pm.expect(rebilledInvoiceSummary3.deminimisInvoice).to.eql(originalInvoiceSummary3.deminimisInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary3.zeroValueInvoice).to.eql(originalInvoiceSummary3.zeroValueInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary3.minimumChargeInvoice).to.eql(originalInvoiceSummary3.minimumChargeInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary3.creditLineValue).to.eql(originalInvoiceSummary3.debitLineValue);\r",
											"    pm.expect(rebilledInvoiceSummary3.debitLineValue).to.eql(originalInvoiceSummary3.creditLineValue);\r",
											"    pm.expect(neg_to_pos(rebilledInvoiceSummary3.netTotal)).to.eql(originalInvoiceSummary3.netTotal);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify client ID is not the same\", function () {\r",
											"    pm.expect(rebilledTransaction3.clientId).to.eql(originalTransaction3.clientId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transaction ID is new\", function () {\r",
											"    pm.expect(rebilledTransaction3.id).to.not.eql(environment.transaction_id2);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify credit property is reverse\", function () {\r",
											"    pm.expect(rebilledTransaction3.credit).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify original invoice is copied to new C rebilled invoice\", function () {\r",
											"    delete rebilledTransaction3.id;\r",
											"    delete rebilledTransaction3.clientId;\r",
											"    delete rebilledTransaction3.credit;\r",
											"    delete rebilledTransaction3.rebilledTransactionId\r",
											"    delete originalTransaction3.id;\r",
											"    delete originalTransaction3.clientId;\r",
											"    delete originalTransaction3.credit;\r",
											"    delete originalTransaction3.rebilledTransactionId\r",
											"    pm.expect(rebilledTransaction3).to.eql(originalTransaction3);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}/invoices/{{rebilledInvoice_id_C3}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}",
										"invoices",
										"{{rebilledInvoice_id_C3}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "83. Transactions are copied into (R) Rebilling Invoice 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const rebilledInvoiceSummary4 = response.invoice\r",
											"const originalInvoiceSummary4 = environment.originalInvoiceSummary_response4\r",
											"const rebilledTransaction4 = rebilledInvoiceSummary4.licences[0].transactions\r",
											"const originalTransaction4 = environment.originalInvoiceTransactions_response4\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID for the Rebilled invoice is new\", function () {\r",
											"    pm.expect(rebilledTransaction4.id).to.not.eql(environment.rebillInvoice_id4);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebilled Invoice ID is identified by Rebilling flag\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary4.rebilledType).to.eql(\"R\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Original Invoice ID is retained in the response\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary4.rebilledInvoiceId).to.eql(environment.rebillInvoice_id4);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice Summary totals are identical in both Original Invoice & Rebilled invoice\", function () {\r",
											"    delete rebilledInvoiceSummary4.id;\r",
											"    delete rebilledInvoiceSummary4.billRunId;\r",
											"    delete rebilledInvoiceSummary4.transactionReference;\r",
											"    delete rebilledInvoiceSummary4.rebilledType;\r",
											"    delete rebilledInvoiceSummary4.rebilledInvoiceId;\r",
											"    delete rebilledInvoiceSummary4.licences;\r",
											"    delete originalInvoiceSummary4.id;\r",
											"    delete originalInvoiceSummary4.billRunId;\r",
											"    delete originalInvoiceSummary4.transactionReference;\r",
											"    delete originalInvoiceSummary4.rebilledType;\r",
											"    delete originalInvoiceSummary4.rebilledInvoiceId;\r",
											"    delete originalInvoiceSummary4.licences;\r",
											"    pm.expect(rebilledInvoiceSummary4).to.eql(originalInvoiceSummary4);\r",
											"});\r",
											"\r",
											"console.log(rebilledInvoiceSummary4)\r",
											"console.log(originalInvoiceSummary4)\r",
											"\r",
											"pm.test(\"Verify client ID is not the same\", function () {\r",
											"    pm.expect(rebilledTransaction4.clientId).to.eql(originalTransaction4.clientId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transaction ID is new\", function () {\r",
											"    pm.expect(rebilledTransaction4.id).to.not.eql(environment.transaction_id4);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify original invoice is copied to new R rebilled invoice\", function () {\r",
											"    delete rebilledTransaction4[0].id;\r",
											"    delete rebilledTransaction4[0].clientId;\r",
											"    delete rebilledTransaction4[0].rebilledTransactionId\r",
											"    delete originalTransaction4[0].id;\r",
											"    delete originalTransaction4[0].clientId;\r",
											"    delete originalTransaction4[0].rebilledTransactionId\r",
											"    pm.expect(rebilledTransaction4).to.eql(originalTransaction4);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}/invoices/{{rebilledInvoice_id_R4}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}",
										"invoices",
										"{{rebilledInvoice_id_R4}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "84. Transactions are copied into (C) Reverse Rebilling Invoice 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const rebilledInvoiceSummary4 = response.invoice\r",
											"const originalInvoiceSummary4 = environment.originalInvoiceSummary_response4\r",
											"const rebilledTransaction4 = rebilledInvoiceSummary4.licences[0].transactions\r",
											"const originalTransaction4 = environment.originalInvoiceTransactions_response4\r",
											"\r",
											"function pos_to_neg(num) {\r",
											"    return -Math.abs(num);\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID for the Rebilled (C) invoice is new\", function () {\r",
											"    pm.expect(rebilledTransaction4.id).to.not.eql(environment.rebillInvoice_id4);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebilled Invoice ID is identified by Rebilling flag\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary4.rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Original Invoice ID is retained in the response\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary4.rebilledInvoiceId).to.eql(environment.rebillInvoice_id4);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice Summary totals are identical in both Original Invoice & Rebilled invoice\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary4.customerReference).to.eql(originalInvoiceSummary4.customerReference);\r",
											"    pm.expect(rebilledInvoiceSummary4.financialYear).to.eql(originalInvoiceSummary4.financialYear);\r",
											"    pm.expect(rebilledInvoiceSummary4.deminimisInvoice).to.eql(originalInvoiceSummary4.deminimisInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary4.zeroValueInvoice).to.eql(originalInvoiceSummary4.zeroValueInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary4.minimumChargeInvoice).to.eql(originalInvoiceSummary4.minimumChargeInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary4.creditLineValue).to.eql(originalInvoiceSummary4.debitLineValue);\r",
											"    pm.expect(rebilledInvoiceSummary4.debitLineValue).to.eql(originalInvoiceSummary4.creditLineValue);\r",
											"    pm.expect(rebilledInvoiceSummary4.netTotal).to.eql(originalInvoiceSummary4.netTotal);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify client ID is not the same\", function () {\r",
											"    pm.expect(rebilledTransaction4.clientId).to.eql(originalTransaction4.clientId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transaction ID is new\", function () {\r",
											"    pm.expect(rebilledTransaction4.id).to.not.eql(environment.transaction_id4);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify credit property is reverse\", function () {\r",
											"    pm.expect(rebilledTransaction4[0].credit).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify original invoice is copied to new C rebilled invoice\", function () {\r",
											"    delete rebilledTransaction4[0].id;\r",
											"    delete rebilledTransaction4[0].clientId;\r",
											"    delete rebilledTransaction4[0].credit;\r",
											"    delete rebilledTransaction4[0].rebilledTransactionId\r",
											"    delete originalTransaction4[0].id;\r",
											"    delete originalTransaction4[0].clientId;\r",
											"    delete originalTransaction4[0].credit;\r",
											"    delete originalTransaction4[0].rebilledTransactionId\r",
											"    pm.expect(rebilledTransaction4).to.eql(originalTransaction4);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}/invoices/{{rebilledInvoice_id_C4}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}",
										"invoices",
										"{{rebilledInvoice_id_C4}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "85. Deminimis is not applied to invoice 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching customer ref\r",
											"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref && element.rebilledType === \"C\")\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID is not null\", function () {\r",
											"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Deminimis is not applied to C rebill invoice\", function () {\r",
											"    pm.expect(invoiceArray.deminimisInvoice).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "86. Deminimis is applied to invoice 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching customer ref\r",
											"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1 && element.rebilledType === \"C\")\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID is not null\", function () {\r",
											"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Deminimis is applied to C rebill invoice\", function () {\r",
											"    pm.expect(invoiceArray.deminimisInvoice).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "87. Min Charge is applied to invoice 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching customer ref\r",
											"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref2 && element.rebilledType === \"C\")\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID is not null\", function () {\r",
											"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Min Charge is applied to C rebill invoice\", function () {\r",
											"    pm.expect(invoiceArray.minimumChargeInvoice).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "88. Zero Value Invoice is applied to invoice 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching customer ref\r",
											"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref4 && element.rebilledType === \"C\")\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID is not null\", function () {\r",
											"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Zero Value invoice is applied to C rebill invoice\", function () {\r",
											"    pm.expect(invoiceArray.zeroValueInvoice).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id3}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id3}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						}
					]
				},
				{
					"name": "Prevent Addition of Transactions to Re-billing invoices",
					"item": [
						{
							"name": "89. Create a new Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun ID is not null\", function () {\r",
											"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
											"    pm.expect(response.billRun.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun Number is not null\", function () {\r",
											"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
											"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"billRun_id4\", response.billRun.id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"region\": \"S\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs"
									]
								}
							},
							"response": []
						},
						{
							"name": "90. Create a debit Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"console.log(\"Creating a Transaction and adding to Bill run\");",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction ID is not null\", function () {",
											"    pm.expect(response.transaction.id).to.not.eql(null);",
											"});",
											"",
											"pm.environment.set(\"transaction_id\", response.transaction.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"6695\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref5}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num5}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref5}}_{{licence_num5}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id4}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id4}}",
										"transactions"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "91. Generate Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id4}}/generate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id4}}",
										"generate"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "92. Bill Run Status is \"generated\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (response.status !== \"generated\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id4}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id4}}",
										"status"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "93. Capture Invoice ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching customer ref\r",
											"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref5)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID is not null\", function () {\r",
											"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebillInvoice_id\", invoiceArray.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id4}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id4}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "94. Approve Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id4}}/approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id4}}",
										"approve"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "95. Capture Transaction details within original invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const originalInvoiceSummary = response.invoice\r",
											"const originalTransaction = response.invoice.licences[0].transactions\r",
											"\r",
											"pm.environment.set(\"originalInvoiceTransactions_response\", originalTransaction);\r",
											"pm.environment.set(\"originalInvoiceSummary_response\", originalInvoiceSummary);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id4}}/invoices/{{rebillInvoice_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id4}}",
										"invoices",
										"{{rebillInvoice_id}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "96. Send Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id4}}/send",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id4}}",
										"send"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "97. Bill Run status is \"billed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"billed\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id4}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id4}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "98. Create a new Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun ID is not null\", function () {\r",
											"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
											"    pm.expect(response.billRun.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun Number is not null\", function () {\r",
											"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
											"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"billRun_id5\", response.billRun.id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"region\": \"S\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs"
									]
								}
							},
							"response": []
						},
						{
							"name": "99. Rebill Invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebilledInvoice_id_C\", response.invoices[0].id);\r",
											"pm.environment.set(\"rebilledInvoice_id_R\", response.invoices[1].id);\r",
											"\r",
											"pm.test(\"Verify C rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[0].id).to.not.eql(environment.rebillInvoice_id);\r",
											"    pm.expect(response.invoices[0].rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify R rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[1].id).to.not.eql(environment.rebillInvoice_id);\r",
											"    pm.expect(response.invoices[1].rebilledType).to.eql(\"R\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id5}}/invoices/{{rebillInvoice_id}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id5}}",
										"invoices",
										"{{rebillInvoice_id}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "Bill Run status is not \"pending\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"initialised\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id5}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id5}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "100. Capture Rebill invoices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching invoice ID\r",
											"const rebillInvoiceArrayR = response.billRun.invoices.find(element => element.id === environment.rebilledInvoice_id_R)\r",
											"//Capture invoice matching invoice ID\r",
											"const rebillInvoiceArrayC = response.billRun.invoices.find(element => element.id === environment.rebilledInvoice_id_C)\r",
											"\r",
											"pm.environment.set(\"rebillInvoiceLincenceArray_R\", rebillInvoiceArrayR.licences);\r",
											"pm.environment.set(\"rebillInvoiceLincenceArray_C\", rebillInvoiceArrayC.licences);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebill Invoice (R) is present\", function () {\r",
											"    pm.expect(rebillInvoiceArrayR.rebilledType).to.eql(\"R\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebill Invoice (C) is present\", function () {\r",
											"    pm.expect(rebillInvoiceArrayC.rebilledType).to.eql(\"C\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id5}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id5}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "101. Create a Transaction with the same Customer/FY combo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction ID is not null\", function () {",
											"    pm.expect(response.transaction.id).to.not.eql(null);",
											"});",
											"",
											"pm.environment.set(\"transaction_id5\", response.transaction.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"574\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref5}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num5}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref5}}_{{licence_num5}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id5}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id5}}",
										"transactions"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "102. New Transactions are allocated a new Invoice ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching invoice ID\r",
											"const rebillInvoiceArrayR = response.billRun.invoices.find(element => element.id === environment.rebilledInvoice_id_R)\r",
											"//Capture invoice matching invoice ID\r",
											"const rebillInvoiceArrayC = response.billRun.invoices.find(element => element.id === environment.rebilledInvoice_id_C)\r",
											"\r",
											"pm.environment.set(\"rebillInvoiceLincenceArray_R\", rebillInvoiceArrayR.licences);\r",
											"pm.environment.set(\"rebillInvoiceLincenceArray_C\", rebillInvoiceArrayC.licences);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the new transaction has not been added to the Rebill Invoice (R)\", function () {\r",
											"    pm.expect(rebillInvoiceArrayR.licences).to.eql(environment.rebillInvoiceLincenceArray_R);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the new transaction has not been added to the Rebill Invoice (R)\", function () {\r",
											"    pm.expect(rebillInvoiceArrayC.licences).to.eql(environment.rebillInvoiceLincenceArray_C);\r",
											"});\r",
											"\r",
											"console.log(rebillInvoiceArrayR)\r",
											"console.log(environment.rebillInvoiceLincenceArray_R)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id5}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id5}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "103. Generate Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id5}}/generate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id5}}",
										"generate"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "104. Bill Run Status is \"generated\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (response.status !== \"generated\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id5}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id5}}",
										"status"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "105. Approve Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id5}}/approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id5}}",
										"approve"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "106. Send Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id5}}/send",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id5}}",
										"send"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "107. Bill Run status is \"billed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"billed\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id5}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id5}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Rebilled Invoices",
					"item": [
						{
							"name": "108. Create a new Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun ID is not null\", function () {\r",
											"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
											"    pm.expect(response.billRun.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun Number is not null\", function () {\r",
											"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
											"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"billRun_id6\", response.billRun.id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"region\": \"S\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs"
									]
								}
							},
							"response": []
						},
						{
							"name": "109. Create a debit Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"console.log(\"Creating a Transaction and adding to Bill run\");",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction ID is not null\", function () {",
											"    pm.expect(response.transaction.id).to.not.eql(null);",
											"});",
											"",
											"pm.environment.set(\"transaction_id\", response.transaction.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"6695\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref5}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num5}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref5}}_{{licence_num5}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id6}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id6}}",
										"transactions"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "110. Generate Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id6}}/generate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id6}}",
										"generate"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "111. Bill Run Status is \"generated\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (response.status !== \"generated\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id6}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id6}}",
										"status"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "112. Capture Invoice ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching customer ref\r",
											"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref5)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID is not null\", function () {\r",
											"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebillInvoice_id\", invoiceArray.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id6}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id6}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "113. Approve Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id6}}/approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id6}}",
										"approve"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "114. Capture Transaction details within original invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const originalInvoiceSummary = response.invoice\r",
											"const originalTransaction = response.invoice.licences[0].transactions\r",
											"\r",
											"pm.environment.set(\"originalInvoiceTransactions_response\", originalTransaction);\r",
											"pm.environment.set(\"originalInvoiceSummary_response\", originalInvoiceSummary);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id6}}/invoices/{{rebillInvoice_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id6}}",
										"invoices",
										"{{rebillInvoice_id}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "115. Send Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id6}}/send",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id6}}",
										"send"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "116. Bill Run status is \"billed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"billed\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id6}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id6}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "117. Create a new Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun ID is not null\", function () {\r",
											"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
											"    pm.expect(response.billRun.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun Number is not null\", function () {\r",
											"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
											"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"billRun_id7\", response.billRun.id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"region\": \"S\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs"
									]
								}
							},
							"response": []
						},
						{
							"name": "118. Rebill Invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebilledInvoice_id_C\", response.invoices[0].id);\r",
											"pm.environment.set(\"rebilledInvoice_id_R\", response.invoices[1].id);\r",
											"\r",
											"pm.test(\"Verify C rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[0].id).to.not.eql(environment.rebillInvoice_id);\r",
											"    pm.expect(response.invoices[0].rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify R rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[1].id).to.not.eql(environment.rebillInvoice_id);\r",
											"    pm.expect(response.invoices[1].rebilledType).to.eql(\"R\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id7}}/invoices/{{rebillInvoice_id}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id7}}",
										"invoices",
										"{{rebillInvoice_id}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "119. Bill Run status is \"initialised\" (not pending)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"initialised\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id7}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id7}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "120. Rebill invoices are present in new bill run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching invoice ID\r",
											"const rebillInvoiceArrayR = response.billRun.invoices.find(element => element.id === environment.rebilledInvoice_id_R)\r",
											"//Capture invoice matching invoice ID\r",
											"const rebillInvoiceArrayC = response.billRun.invoices.find(element => element.id === environment.rebilledInvoice_id_C)\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebill Invoice (R) is present\", function () {\r",
											"    pm.expect(rebillInvoiceArrayR.rebilledType).to.eql(\"R\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebill Invoice (C) is present\", function () {\r",
											"    pm.expect(rebillInvoiceArrayC.rebilledType).to.eql(\"C\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id7}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id7}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "121. Delete (R) Invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id7}}/invoices/{{rebilledInvoice_id_R}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id7}}",
										"invoices",
										"{{rebilledInvoice_id_R}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "122. Delete (C) Invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id7}}/invoices/{{rebilledInvoice_id_C}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id7}}",
										"invoices",
										"{{rebilledInvoice_id_C}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "123. Rebill invoices are no longer present in new bill run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Bill Run does not include any invoices\", function () {\r",
											"    pm.expect(response.billRun.invoices).to.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id7}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id7}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "124. Rebill the same Invoice again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebilledInvoice_id_C\", response.invoices[0].id);\r",
											"pm.environment.set(\"rebilledInvoice_id_R\", response.invoices[1].id);\r",
											"\r",
											"pm.test(\"Verify C rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[0].id).to.not.eql(environment.rebillInvoice_id);\r",
											"    pm.expect(response.invoices[0].rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify R rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[1].id).to.not.eql(environment.rebillInvoice_id);\r",
											"    pm.expect(response.invoices[1].rebilledType).to.eql(\"R\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id7}}/invoices/{{rebillInvoice_id}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id7}}",
										"invoices",
										"{{rebillInvoice_id}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "Bill Run status is not \"pending\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"initialised\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id7}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id7}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "125. Rebill invoices are present in new bill run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching invoice ID\r",
											"const rebillInvoiceArrayR = response.billRun.invoices.find(element => element.id === environment.rebilledInvoice_id_R)\r",
											"//Capture invoice matching invoice ID\r",
											"const rebillInvoiceArrayC = response.billRun.invoices.find(element => element.id === environment.rebilledInvoice_id_C)\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebill Invoice (R) is present\", function () {\r",
											"    pm.expect(rebillInvoiceArrayR.rebilledType).to.eql(\"R\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebill Invoice (C) is present\", function () {\r",
											"    pm.expect(rebillInvoiceArrayC.rebilledType).to.eql(\"C\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id7}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id7}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "126. Bill Run is removed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id7}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id7}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "127. Deleted Bill Run and Invoices are not found in DB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.statusCode !== 404) {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"} \r",
											"\r",
											"if (response.statusCode == 404) {\r",
											"    pm.test(\"Status code is 404 not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    });\r",
											"\r",
											"    pm.test(\"Verify Deleted Bill Run is not found in the DB\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Bill run \" + environment.billRun_id7 + \" is unknown.\");\r",
											"});\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id7}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id7}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "128. Create a new Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun ID is not null\", function () {\r",
											"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
											"    pm.expect(response.billRun.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun Number is not null\", function () {\r",
											"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
											"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"billRun_id8\", response.billRun.id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"region\": \"S\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs"
									]
								}
							},
							"response": []
						},
						{
							"name": "129. Rebill Invoice again after Bill Run has been deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebilledInvoice_id_C\", response.invoices[0].id);\r",
											"pm.environment.set(\"rebilledInvoice_id_R\", response.invoices[1].id);\r",
											"\r",
											"pm.test(\"Verify C rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[0].id).to.not.eql(environment.rebillInvoice_id);\r",
											"    pm.expect(response.invoices[0].rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify R rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[1].id).to.not.eql(environment.rebillInvoice_id);\r",
											"    pm.expect(response.invoices[1].rebilledType).to.eql(\"R\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id8}}/invoices/{{rebillInvoice_id}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id8}}",
										"invoices",
										"{{rebillInvoice_id}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "Bill Run status is not \"pending\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"initialised\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id8}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id8}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "130. Rebill invoices are present in new Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching invoice ID\r",
											"const rebillInvoiceArrayR = response.billRun.invoices.find(element => element.id === environment.rebilledInvoice_id_R)\r",
											"//Capture invoice matching invoice ID\r",
											"const rebillInvoiceArrayC = response.billRun.invoices.find(element => element.id === environment.rebilledInvoice_id_C)\r",
											"\r",
											"pm.environment.set(\"rebillInvoiceLincenceArray_R\", rebillInvoiceArrayR.licences);\r",
											"pm.environment.set(\"rebillInvoiceLincenceArray_C\", rebillInvoiceArrayC.licences);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebill Invoice (R) is present\", function () {\r",
											"    pm.expect(rebillInvoiceArrayR.rebilledType).to.eql(\"R\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebill Invoice (C) is present\", function () {\r",
											"    pm.expect(rebillInvoiceArrayC.rebilledType).to.eql(\"C\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id8}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id8}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						}
					]
				},
				{
					"name": "Rebill Multiple Invoices with same Customer Ref & FY details to the same Bill Run",
					"item": [
						{
							"name": "131. Create a new Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Create Bill Run - Region Y\");\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun ID is not null\", function () {\r",
											"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
											"    pm.expect(response.billRun.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun Number is not null\", function () {\r",
											"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
											"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"billRun_id1\", response.billRun.id);\r",
											"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"region\": \"S\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs"
									]
								}
							},
							"response": []
						},
						{
							"name": "132. Create a debit Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"console.log(\"Creating a Transaction and adding to Bill run\");",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction ID is not null\", function () {",
											"    pm.expect(response.transaction.id).to.not.eql(null);",
											"});",
											"",
											"pm.environment.set(\"transaction_id1\", response.transaction.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');\r",
											"var myUUID = uuid.v4();\r",
											"\r",
											"\r",
											"pm.environment.set(\"client_id\", myUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"5548\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num1}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"clientId\": \"{{client_id}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id1}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id1}}",
										"transactions"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "133. Generate Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id1}}/generate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id1}}",
										"generate"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "134. Bill Run Status is \"generated\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (response.status !== \"generated\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id1}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id1}}",
										"status"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "135. Capture Invoice ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching customer ref\r",
											"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID is not null\", function () {\r",
											"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebillInvoice_id\", invoiceArray.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id1}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "136. Approve Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id1}}/approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id1}}",
										"approve"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "137. Send Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id1}}/send",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id1}}",
										"send"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "138. Capture Original Invoice (1) Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const originalInvoiceSummary = response.invoice\r",
											"const originalTransaction = response.invoice.licences[0].transactions\r",
											"\r",
											"pm.environment.set(\"originalInvoiceTransactions_response1\", originalTransaction);\r",
											"pm.environment.set(\"originalInvoiceSummary_response1\", originalInvoiceSummary);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id1}}/invoices/{{rebillInvoice_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id1}}",
										"invoices",
										"{{rebillInvoice_id}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "139. Bill Run status is \"billed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"billed\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id1}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "140. Create a new Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun ID is not null\", function () {\r",
											"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
											"    pm.expect(response.billRun.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun Number is not null\", function () {\r",
											"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
											"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"billRun_id2\", response.billRun.id);\r",
											"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"region\": \"S\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs"
									]
								}
							},
							"response": []
						},
						{
							"name": "141. Create a debit Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"console.log(\"Creating a Transaction and adding to Bill run\");",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Transaction ID is not null\", function () {",
											"    pm.expect(response.transaction.id).to.not.eql(null);",
											"});",
											"",
											"pm.environment.set(\"transaction_id1\", response.transaction.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');\r",
											"var myUUID = uuid.v4();\r",
											"\r",
											"\r",
											"pm.environment.set(\"client_id\", myUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"periodStart\": \"01-APR-2020\",\r\n    \"periodEnd\": \"31-MAR-2021\",\r\n    \"credit\": false,\r\n\t\"billableDays\": 310,\r\n\t\"authorisedDays\": 365,\r\n    \"volume\": \"5548\",\r\n    \"source\": \"Tidal\",\r\n    \"season\": \"Summer\",\r\n    \"loss\": \"Low\",\r\n    \"twoPartTariff\": false,\r\n    \"compensationCharge\": false,\r\n    \"eiucSource\": \"Tidal\",\r\n    \"waterUndertaker\": false,\r\n    \"regionalChargingArea\": \"Thames\",\r\n\t\"section127Agreement\": true,\r\n\t\"section130Agreement\": false,\r\n    \"customerReference\": \"{{customer_ref1}}\",\r\n    \"lineDescription\": \"Drains within Littleport & Downham IDB\",\r\n    \"licenceNumber\": \"{{licence_num1}}\",\r\n    \"chargePeriod\": \"01-APR-2020 - 31-MAR-2021\",\r\n    \"chargeElementId\": \"1\",\r\n    \"batchNumber\": \"{{customer_ref1}}_{{licence_num1}}\",\r\n    \"region\": \"S\",\r\n    \"areaCode\": \"ARCA\",\r\n    \"clientId\": \"{{client_id}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"transactions"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "142. Generate Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/generate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"generate"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "143. Bill Run Status is \"generated\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (response.status !== \"generated\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"status"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "144. Capture Invoice ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"//Capture invoice matching customer ref\r",
											"const invoiceArray = response.billRun.invoices.find(element => element.customerReference === environment.customer_ref1)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID is not null\", function () {\r",
											"    pm.expect(invoiceArray.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebillInvoice_id1\", invoiceArray.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "145. Approve Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"approve"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "146. Send Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/send",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"send"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "147. Capture Original Invoice (2) Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const originalInvoiceSummary = response.invoice\r",
											"const originalTransaction = response.invoice.licences[0].transactions\r",
											"\r",
											"pm.environment.set(\"originalInvoiceTransactions_response2\", originalTransaction);\r",
											"pm.environment.set(\"originalInvoiceSummary_response2\", originalInvoiceSummary);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}/invoices/{{rebillInvoice_id1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}",
										"invoices",
										"{{rebillInvoice_id1}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "148. Bill Run status is \"billed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"billed\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id2}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id2}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "149. Create a new Bill Run for Rebill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun ID is not null\", function () {\r",
											"    console.log(\"Bill Run ID =\" + response.billRun.id);\r",
											"    pm.expect(response.billRun.id).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Billrun Number is not null\", function () {\r",
											"    console.log(\"Bill Run Number =\" + response.billRun.billRunNumber);\r",
											"    pm.expect(response.billRun.billRunNumber).to.not.eql(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"billRun_id\", response.billRun.id);\r",
											"pm.environment.set(\"billRun_number\", response.billRun.billRunNumber);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"region\": \"S\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs"
									]
								}
							},
							"response": []
						},
						{
							"name": "150. Invoices with same Customer Ref & FY details can be Rebilled on the same Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify C rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[0].rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify R rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[1].rebilledType).to.eql(\"R\");\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebilledInvoice_id_C1\", response.invoices[0].id);\r",
											"pm.environment.set(\"rebilledInvoice_id_R1\", response.invoices[1].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebillInvoice_id}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebillInvoice_id}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "Bill Run status is not \"pending\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"initialised\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "151. Invoices with same Customer Ref & FY details can be Rebilled on the same Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify C rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[0].rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify R rebill invoice ID is returned\", function () {\r",
											"    pm.expect(response.invoices[1].rebilledType).to.eql(\"R\");\r",
											"});\r",
											"\r",
											"pm.environment.set(\"rebilledInvoice_id_C2\", response.invoices[0].id);\r",
											"pm.environment.set(\"rebilledInvoice_id_R2\", response.invoices[1].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebillInvoice_id1}}/rebill",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebillInvoice_id1}}",
										"rebill"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "Bill Run status is not \"pending\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"initialised\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "152. Rebilled Invoice1 (R)  matches Original Invoice1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const rebilledInvoiceSummary = response.invoice\r",
											"const originalInvoiceSummary = environment.originalInvoiceSummary_response1\r",
											"const rebilledTransaction = rebilledInvoiceSummary.licences[0].transactions\r",
											"const originalTransaction = environment.originalInvoiceTransactions_response1\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID for the Rebilled invoice is new\", function () {\r",
											"    pm.expect(rebilledTransaction.id).to.not.eql(environment.rebillInvoice_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebilled Invoice ID is identified by Rebilling flag\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.rebilledType).to.eql(\"R\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Original Invoice ID is retained in the response\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.rebilledInvoiceId).to.eql(environment.rebillInvoice_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice Summary totals are identical in both Original Invoice & Rebilled invoice\", function () {\r",
											"    delete rebilledInvoiceSummary.id;\r",
											"    delete rebilledInvoiceSummary.billRunId;\r",
											"    delete rebilledInvoiceSummary.transactionReference;\r",
											"    delete rebilledInvoiceSummary.rebilledType;\r",
											"    delete rebilledInvoiceSummary.rebilledInvoiceId;\r",
											"    delete rebilledInvoiceSummary.licences;\r",
											"    delete originalInvoiceSummary.id;\r",
											"    delete originalInvoiceSummary.billRunId;\r",
											"    delete originalInvoiceSummary.transactionReference;\r",
											"    delete originalInvoiceSummary.rebilledType;\r",
											"    delete originalInvoiceSummary.rebilledInvoiceId;\r",
											"    delete originalInvoiceSummary.licences;\r",
											"    pm.expect(rebilledInvoiceSummary).to.eql(originalInvoiceSummary);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify client ID is not the same\", function () {\r",
											"    pm.expect(rebilledTransaction.clientId).to.eql(originalTransaction.clientId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transaction ID is new\", function () {\r",
											"    pm.expect(rebilledTransaction.id).to.not.eql(environment.transaction_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify original invoice is copied to new R rebilled invoice\", function () {\r",
											"    delete rebilledTransaction[0].id;\r",
											"    delete rebilledTransaction[0].clientId;\r",
											"    delete rebilledTransaction[0].rebilledTransactionId\r",
											"    delete originalTransaction[0].id;\r",
											"    delete originalTransaction[0].clientId;\r",
											"    delete originalTransaction[0].rebilledTransactionId\r",
											"    pm.expect(rebilledTransaction).to.eql(originalTransaction);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebilledInvoice_id_R1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebilledInvoice_id_R1}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "153. Rebilled Invoice1 (C)  matches Original Invoice1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const rebilledInvoiceSummary = response.invoice\r",
											"const originalInvoiceSummary = environment.originalInvoiceSummary_response1\r",
											"const rebilledTransaction = rebilledInvoiceSummary.licences[0].transactions\r",
											"const originalTransaction = environment.originalInvoiceTransactions_response1\r",
											"\r",
											"function pos_to_neg(num) {\r",
											"    return -Math.abs(num);\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID for the Rebilled (C) invoice is new\", function () {\r",
											"    pm.expect(rebilledTransaction.id).to.not.eql(environment.rebillInvoice_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebilled Invoice ID is identified by Rebilling flag\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Original Invoice ID is retained in the response\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.rebilledInvoiceId).to.eql(environment.rebillInvoice_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice Summary totals are identical in both Original Invoice & Rebilled invoice\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.customerReference).to.eql(originalInvoiceSummary.customerReference);\r",
											"    pm.expect(rebilledInvoiceSummary.financialYear).to.eql(originalInvoiceSummary.financialYear);\r",
											"    pm.expect(rebilledInvoiceSummary.deminimisInvoice).to.eql(originalInvoiceSummary.deminimisInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary.zeroValueInvoice).to.eql(originalInvoiceSummary.zeroValueInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary.minimumChargeInvoice).to.eql(originalInvoiceSummary.minimumChargeInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary.creditLineValue).to.eql(originalInvoiceSummary.debitLineValue);\r",
											"    pm.expect(rebilledInvoiceSummary.debitLineValue).to.eql(originalInvoiceSummary.creditLineValue);\r",
											"    pm.expect(rebilledInvoiceSummary.netTotal).to.eql(pos_to_neg(originalInvoiceSummary.netTotal));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify client ID is not the same\", function () {\r",
											"    pm.expect(rebilledTransaction.clientId).to.eql(originalTransaction.clientId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transaction ID is new\", function () {\r",
											"    pm.expect(rebilledTransaction.id).to.not.eql(environment.transaction_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify credit property is reverse\", function () {\r",
											"    pm.expect(rebilledTransaction[0].credit).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify original invoice is copied to new C rebilled invoice\", function () {\r",
											"    delete rebilledTransaction[0].id;\r",
											"    delete rebilledTransaction[0].clientId;\r",
											"    delete rebilledTransaction[0].credit;\r",
											"    delete rebilledTransaction[0].rebilledTransactionId\r",
											"    delete originalTransaction[0].id;\r",
											"    delete originalTransaction[0].clientId;\r",
											"    delete originalTransaction[0].credit;\r",
											"    delete originalTransaction[0].rebilledTransactionId\r",
											"    pm.expect(rebilledTransaction).to.eql(originalTransaction);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebilledInvoice_id_C1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebilledInvoice_id_C1}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "154. Rebilled Invoice2 (R) matches Original Invoice2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const rebilledInvoiceSummary = response.invoice\r",
											"const originalInvoiceSummary = environment.originalInvoiceSummary_response2\r",
											"const rebilledTransaction = rebilledInvoiceSummary.licences[0].transactions\r",
											"const originalTransaction = environment.originalInvoiceTransactions_response2\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID for the Rebilled invoice is new\", function () {\r",
											"    pm.expect(rebilledTransaction.id).to.not.eql(environment.rebillInvoice_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebilled Invoice ID is identified by Rebilling flag\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.rebilledType).to.eql(\"R\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Original Invoice ID is retained in the response\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.rebilledInvoiceId).to.eql(environment.rebillInvoice_id1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice Summary totals are identical in both Original Invoice & Rebilled invoice\", function () {\r",
											"    delete rebilledInvoiceSummary.id;\r",
											"    delete rebilledInvoiceSummary.billRunId;\r",
											"    delete rebilledInvoiceSummary.transactionReference;\r",
											"    delete rebilledInvoiceSummary.rebilledType;\r",
											"    delete rebilledInvoiceSummary.rebilledInvoiceId;\r",
											"    delete rebilledInvoiceSummary.licences;\r",
											"    delete originalInvoiceSummary.id;\r",
											"    delete originalInvoiceSummary.billRunId;\r",
											"    delete originalInvoiceSummary.transactionReference;\r",
											"    delete originalInvoiceSummary.rebilledType;\r",
											"    delete originalInvoiceSummary.rebilledInvoiceId;\r",
											"    delete originalInvoiceSummary.licences;\r",
											"    pm.expect(rebilledInvoiceSummary).to.eql(originalInvoiceSummary);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify client ID is not the same\", function () {\r",
											"    pm.expect(rebilledTransaction.clientId).to.eql(originalTransaction.clientId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transaction ID is new\", function () {\r",
											"    pm.expect(rebilledTransaction.id).to.not.eql(environment.transaction_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify original invoice is copied to new R rebilled invoice\", function () {\r",
											"    delete rebilledTransaction[0].id;\r",
											"    delete rebilledTransaction[0].clientId;\r",
											"    delete rebilledTransaction[0].rebilledTransactionId\r",
											"    delete originalTransaction[0].id;\r",
											"    delete originalTransaction[0].clientId;\r",
											"    delete originalTransaction[0].rebilledTransactionId\r",
											"    pm.expect(rebilledTransaction).to.eql(originalTransaction);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebilledInvoice_id_R2}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebilledInvoice_id_R2}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "156. Rebilled Invoice2 (C) matches Original Invoice2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"const rebilledInvoiceSummary = response.invoice\r",
											"const originalInvoiceSummary = environment.originalInvoiceSummary_response2\r",
											"const rebilledTransaction = rebilledInvoiceSummary.licences[0].transactions\r",
											"const originalTransaction = environment.originalInvoiceTransactions_response2\r",
											"\r",
											"function pos_to_neg(num) {\r",
											"    return -Math.abs(num);\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice ID for the Rebilled (C) invoice is new\", function () {\r",
											"    pm.expect(rebilledTransaction.id).to.not.eql(environment.rebillInvoice_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Rebilled Invoice ID is identified by Rebilling flag\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.rebilledType).to.eql(\"C\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Original Invoice ID is retained in the response\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.rebilledInvoiceId).to.eql(environment.rebillInvoice_id1);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Invoice Summary totals are identical in both Original Invoice & Rebilled invoice\", function () {\r",
											"    pm.expect(rebilledInvoiceSummary.customerReference).to.eql(originalInvoiceSummary.customerReference);\r",
											"    pm.expect(rebilledInvoiceSummary.financialYear).to.eql(originalInvoiceSummary.financialYear);\r",
											"    pm.expect(rebilledInvoiceSummary.deminimisInvoice).to.eql(originalInvoiceSummary.deminimisInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary.zeroValueInvoice).to.eql(originalInvoiceSummary.zeroValueInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary.minimumChargeInvoice).to.eql(originalInvoiceSummary.minimumChargeInvoice);\r",
											"    pm.expect(rebilledInvoiceSummary.creditLineValue).to.eql(originalInvoiceSummary.debitLineValue);\r",
											"    pm.expect(rebilledInvoiceSummary.debitLineValue).to.eql(originalInvoiceSummary.creditLineValue);\r",
											"    pm.expect(rebilledInvoiceSummary.netTotal).to.eql(pos_to_neg(originalInvoiceSummary.netTotal));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify client ID is not the same\", function () {\r",
											"    pm.expect(rebilledTransaction.clientId).to.eql(originalTransaction.clientId);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transaction ID is new\", function () {\r",
											"    pm.expect(rebilledTransaction.id).to.not.eql(environment.transaction_id);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify credit property is reverse\", function () {\r",
											"    pm.expect(rebilledTransaction[0].credit).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify original invoice is copied to new C rebilled invoice\", function () {\r",
											"    delete rebilledTransaction[0].id;\r",
											"    delete rebilledTransaction[0].clientId;\r",
											"    delete rebilledTransaction[0].credit;\r",
											"    delete rebilledTransaction[0].rebilledTransactionId\r",
											"    delete originalTransaction[0].id;\r",
											"    delete originalTransaction[0].clientId;\r",
											"    delete originalTransaction[0].credit;\r",
											"    delete originalTransaction[0].rebilledTransactionId\r",
											"    pm.expect(rebilledTransaction).to.eql(originalTransaction);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/invoices/{{rebilledInvoice_id_C2}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"invoices",
										"{{rebilledInvoice_id_C2}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "157. Generate Summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/generate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"generate"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "158. Bill Run Status is \"generated\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"if (response.status !== \"generated\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"status"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "159. Approve Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"approve"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "160. Send Bill Run",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}/send",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}",
										"send"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "161. Bill Run is status is \"billed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"if (response.billRun.status !== \"billed\") {\r",
											"    setTimeout(() => {}, 1000);\r",
											"    postman.setNextRequest(pm.info.requestId);\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						},
						{
							"name": "162. Transaction File is created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify bill run status is billed\", function () {\r",
											"    pm.expect(response.billRun.status).to.eql(\"billed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify transactionFileReference is populated\", function () {\r",
											"    pm.expect(response.billRun.transactionFileReference).to.not.eql(null);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/v2/wrls/bill-runs/{{billRun_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v2",
										"wrls",
										"bill-runs",
										"{{billRun_id}}"
									]
								},
								"description": "add transaction to queue"
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{systemToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Use to automate refreshing the AWS cognito bearer token in Postman",
					"//",
					"// Thanks to the following sources for helping to put this",
					"// together",
					"// https://nicolaswidart.com/blog/automatically-set-authentication-tokens-in-postman-requests",
					"// https://medium.com/@allen.helton/how-to-automate-oauth2-token-renewal-in-postman-864420d381a0",
					"// https://stackoverflow.com/a/55614206/6117745",
					"// https://docs.aws.amazon.com/cognito/latest/developerguide/token-endpoint.html",
					"",
					"const sdk = require('postman-collection')",
					"",
					"// We need to support requests against endpoints that require different",
					"// credentials. We keep the code generic by referencing the environment",
					"// variables that hold those credentials using these variables. We default",
					"// to the 'system' versions as they will be used in the majority of cases.",
					"let tokenVar = 'systemToken'",
					"let tokenTimestampVar = 'systemTokenTimestamp'",
					"let tokenExpiresInVar = 'systemExpiresIn'",
					"let oauthUserVar = 'systemUser'",
					"let oauthPassVar = 'systemPass'",
					"",
					"const authServiceUrl = pm.environment.get('tokenUrl')",
					"",
					"if (automateToken()) {",
					"  console.log('CHA API - Automating token')",
					"  // Check if the request is to an admin endpoint. It includes so update the variables",
					"",
					"  if (requestRequiresAdmin()) {",
					"    updateEnvironmentReferencesToAdmin()",
					"    console.log('CHA API - Admin path determined. Using admin env vars.')",
					"  }",
					"",
					"  if (tokenRefreshNeeded()) {",
					"    console.log('CHA API - Refresh of token needed')",
					"    refreshToken()",
					"  }",
					"}",
					"",
					"function automateToken () {",
					"  let automate = pm.environment.get('automateToken') || 'true'",
					"",
					"  if (automate === 'true') {",
					"    automate = true",
					"  } else {",
					"    automate = false",
					"  }",
					"",
					"  return automate",
					"}",
					"",
					"function requestRequiresAdmin () {",
					"  const path = pm.request.url.getPath()",
					"  const regex = RegExp('(authorised-systems|regime|test)', 'i')",
					"",
					"  return regex.test(path)",
					"}",
					"",
					"// Update the values we use to reference to environment variables",
					"// to use the admin alternatives",
					"function updateEnvironmentReferencesToAdmin () {",
					"  tokenVar = 'adminToken'",
					"  tokenTimestampVar = 'adminTokenTimestamp'",
					"  tokenExpiresInVar = 'adminExpiresIn'",
					"  oauthUserVar = 'adminUser'",
					"  oauthPassVar = 'adminPass'",
					"}",
					"",
					"// Compares the current token's timestamp against the current time",
					"// in UTC. If the difference in milliseconds is greater than",
					"// tokenExpiresInAsMilliseconds() then a refresh is needed",
					"function tokenRefreshNeeded () {",
					"  // Date.now() returns the number of milliseconds since 1970-01-01",
					"  const difference = (Date.now() - timestampAsMilliseconds())",
					"",
					"  return difference >= tokenExpiresInAsMilliseconds()",
					"}",
					"",
					"// When we successfully request a token we record a timestamp",
					"// in the environment variables.",
					"function timestampAsMilliseconds () {",
					"  // Set a default in case we don't have a timestamp in the env vars",
					"  let result = Date.UTC(2010, 0, 1)",
					"  const tokenTimestamp = pm.environment.get(tokenTimestampVar)",
					"",
					"  if (tokenTimestamp) {",
					"    result = tokenTimestamp",
					"  }",
					"",
					"  return result",
					"}",
					"",
					"// When we successfully request a token we record how long the token",
					"// will be valid for (expressed as seconds) in the environment variables.",
					"// As we need to deal in milliseconds this function takes that value (or",
					"// a default if the env var doesn't exist) and converts it to millseconds.",
					"function tokenExpiresInAsMilliseconds () {",
					"  // Set a default in case we don't have a timestamp in the env vars",
					"  let result = 3600",
					"  const tokenExpiresIn = pm.environment.get(tokenExpiresInVar)",
					"",
					"  if (tokenExpiresIn) {",
					"    result = tokenExpiresIn",
					"  }",
					"",
					"  return result * 1000",
					"}",
					"",
					"function encodedKeys () {",
					"  const keys = pm.environment.get(oauthUserVar) + ':' + pm.environment.get(oauthPassVar)",
					"",
					"  return CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(keys));",
					"}",
					"",
					"function refreshToken () {",
					"  const tokenRequest = new sdk.Request({",
					"    url: authServiceUrl,",
					"    method: 'POST',",
					"    header: [",
					"      new sdk.Header({",
					"        key: 'content-type',",
					"        value: 'application/x-www-form-urlencoded'",
					"      }),",
					"      new sdk.Header({",
					"        key: 'acccept',",
					"        value: 'application/json'",
					"      }),",
					"      new sdk.Header({",
					"        key: 'Authorization',",
					"        value: 'Basic ' + encodedKeys()",
					"      })",
					"    ],",
					"    body: {",
					"      mode: 'urlencoded',",
					"      urlencoded: [",
					"        { key: 'grant_type', value: 'client_credentials' },",
					"      ]",
					"    }",
					"  })",
					"",
					"  pm.sendRequest(tokenRequest, function (err, response) {",
					"    if (err) {",
					"      throw err",
					"    }",
					"",
					"    if (response.code !== 200) {",
					"      throw new Error('Could not log in.')",
					"    }",
					"",
					"    pm.environment.set(tokenVar, response.json().access_token)",
					"    pm.environment.set(tokenExpiresInVar, response.json().expires_in)",
					"    pm.environment.set(tokenTimestampVar, Date.now());",
					"    console.log(`New token has been set: ${response.json().access_token}`);",
					"  })",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "slug",
			"value": "wrls"
		}
	]
}